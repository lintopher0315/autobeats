{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tf = require(\"@tensorflow/tfjs\");\n\nvar logging = require(\"../core/logging\");\n\nvar audio_utils_1 = require(\"./audio_utils\");\n\nvar custom_layers_1 = require(\"./custom_layers\");\n\nvar GANSynth = function () {\n  function GANSynth(checkpointURL) {\n    this.nn = tf.sequential();\n    this.nLatents = 256;\n    this.nPitches = 61;\n    this.minMidiPitch = 24;\n    this.maxMidiPitch = 84;\n    this.midiPitches = this.maxMidiPitch - this.minMidiPitch + 1;\n    this.checkpointURL = checkpointURL;\n  }\n\n  GANSynth.prototype.initialize = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var startTime, vars;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.dispose();\n            startTime = performance.now();\n            return [4, fetch(this.checkpointURL + \"/weights_manifest.json\").then(function (response) {\n              return response.json();\n            }).then(function (manifest) {\n              return tf.io.loadWeights(manifest, _this.checkpointURL);\n            })];\n\n          case 1:\n            vars = _a.sent();\n            tf.tidy(function () {\n              for (var v in vars) {\n                if (v.includes('kernel')) {\n                  var fanIn = vars[v].shape[0] * vars[v].shape[1] * vars[v].shape[2];\n                  vars[v] = tf.mul(vars[v], tf.sqrt(2 / fanIn));\n                }\n              }\n\n              _this.build(vars);\n\n              Object.keys(vars).map(function (name) {\n                return vars[name].dispose();\n              });\n              _this.initialized = true;\n              logging.logWithDuration('Initialized model', startTime, 'GANSynth');\n            });\n            return [2];\n        }\n      });\n    });\n  };\n\n  GANSynth.prototype.dispose = function () {\n    if (!this.initialized) {\n      return;\n    }\n\n    this.nn.dispose();\n    this.initialized = false;\n  };\n\n  GANSynth.prototype.isInitialized = function () {\n    return this.initialized;\n  };\n\n  GANSynth.prototype.build = function (vars) {\n    var _this = this;\n\n    tf.tidy(function () {\n      var convConfig = {\n        filters: 256,\n        kernelSize: [2, 16],\n        strides: [1, 1],\n        activation: 'linear',\n        useBias: true,\n        padding: 'valid',\n        dilationRate: [1, 1],\n        trainable: false\n      };\n      var inputShape = {\n        inputShape: [1, 1, _this.nLatents + _this.nPitches]\n      };\n\n      _this.nn.add(custom_layers_1.pixelNorm(1e-8, inputShape));\n\n      _this.nn.add(custom_layers_1.initialPad(2, 16));\n\n      _this.nn.add(tf.layers.conv2d(convConfig));\n\n      _this.nn.add(tf.layers.leakyReLU({\n        alpha: 0.2\n      }));\n\n      _this.nn.add(custom_layers_1.pixelNorm());\n\n      convConfig.padding = 'same';\n      convConfig.kernelSize = [3, 3];\n\n      _this.nn.add(tf.layers.conv2d(convConfig));\n\n      _this.nn.add(tf.layers.leakyReLU({\n        alpha: 0.2\n      }));\n\n      _this.nn.add(custom_layers_1.pixelNorm());\n\n      var layerFilters = [256, 256, 256, 128, 64, 32];\n\n      for (var i = 0; i < layerFilters.length; i++) {\n        _this.nn.add(custom_layers_1.boxUpscale(2));\n\n        convConfig.filters = layerFilters[i];\n\n        _this.nn.add(tf.layers.conv2d(convConfig));\n\n        _this.nn.add(tf.layers.leakyReLU({\n          alpha: 0.2\n        }));\n\n        _this.nn.add(custom_layers_1.pixelNorm());\n\n        _this.nn.add(tf.layers.conv2d(convConfig));\n\n        _this.nn.add(tf.layers.leakyReLU({\n          alpha: 0.2\n        }));\n\n        _this.nn.add(custom_layers_1.pixelNorm());\n      }\n\n      convConfig.filters = 2;\n      convConfig.kernelSize = [1, 1];\n      convConfig.activation = 'tanh';\n\n      _this.nn.add(tf.layers.conv2d(convConfig));\n\n      _this.setWeights(vars);\n    });\n  };\n\n  GANSynth.prototype.setWeights = function (vars) {\n    function getVar(name) {\n      var v = vars[name];\n\n      if (v === undefined) {\n        throw Error(\"Variable not found: \" + name);\n      }\n\n      return v;\n    }\n\n    var prefix = 'Generator/progressive_gan_generator/progressive_gan_block_';\n    var weights = [getVar(prefix + \"1/conv0/conv2d/kernel/ExponentialMovingAverage\"), getVar(prefix + \"1/conv0/bias/ExponentialMovingAverage\"), getVar(prefix + \"1/conv1/conv2d/kernel/ExponentialMovingAverage\"), getVar(prefix + \"1/conv1/bias/ExponentialMovingAverage\"), getVar(prefix + \"2/conv0/conv2d/kernel/ExponentialMovingAverage\"), getVar(prefix + \"2/conv0/bias/ExponentialMovingAverage\"), getVar(prefix + \"2/conv1/conv2d/kernel/ExponentialMovingAverage\"), getVar(prefix + \"2/conv1/bias/ExponentialMovingAverage\"), getVar(prefix + \"3/conv0/conv2d/kernel/ExponentialMovingAverage\"), getVar(prefix + \"3/conv0/bias/ExponentialMovingAverage\"), getVar(prefix + \"3/conv1/conv2d/kernel/ExponentialMovingAverage\"), getVar(prefix + \"3/conv1/bias/ExponentialMovingAverage\"), getVar(prefix + \"4/conv0/conv2d/kernel/ExponentialMovingAverage\"), getVar(prefix + \"4/conv0/bias/ExponentialMovingAverage\"), getVar(prefix + \"4/conv1/conv2d/kernel/ExponentialMovingAverage\"), getVar(prefix + \"4/conv1/bias/ExponentialMovingAverage\"), getVar(prefix + \"5/conv0/conv2d/kernel/ExponentialMovingAverage\"), getVar(prefix + \"5/conv0/bias/ExponentialMovingAverage\"), getVar(prefix + \"5/conv1/conv2d/kernel/ExponentialMovingAverage\"), getVar(prefix + \"5/conv1/bias/ExponentialMovingAverage\"), getVar(prefix + \"6/conv0/conv2d/kernel/ExponentialMovingAverage\"), getVar(prefix + \"6/conv0/bias/ExponentialMovingAverage\"), getVar(prefix + \"6/conv1/conv2d/kernel/ExponentialMovingAverage\"), getVar(prefix + \"6/conv1/bias/ExponentialMovingAverage\"), getVar(prefix + \"7/conv0/conv2d/kernel/ExponentialMovingAverage\"), getVar(prefix + \"7/conv0/bias/ExponentialMovingAverage\"), getVar(prefix + \"7/conv1/conv2d/kernel/ExponentialMovingAverage\"), getVar(prefix + \"7/conv1/bias/ExponentialMovingAverage\"), getVar(prefix + \"7/to_rgb/conv2d/kernel/ExponentialMovingAverage\"), getVar(prefix + \"7/to_rgb/bias/ExponentialMovingAverage\")];\n    this.nn.setWeights(weights);\n  };\n\n  GANSynth.prototype.predict = function (inputs, batchSize) {\n    return this.nn.predict(inputs, {\n      batchSize: batchSize\n    });\n  };\n\n  GANSynth.prototype.randomSample = function (pitch) {\n    var _this = this;\n\n    return tf.tidy(function () {\n      var z = tf.randomNormal([1, _this.nLatents], 0, 1, 'float32');\n      var pitchIdx = tf.tensor1d([pitch - _this.minMidiPitch], 'int32');\n      var pitchOneHot = tf.oneHot(pitchIdx, _this.midiPitches);\n      var cond = tf.concat([z, pitchOneHot], 1).expandDims(1).expandDims(1);\n\n      var specgrams = _this.predict(cond, 1);\n\n      return specgrams;\n    });\n  };\n\n  GANSynth.prototype.specgramsToAudio = function (specgrams) {\n    return audio_utils_1.specgramsToAudio(specgrams);\n  };\n\n  return GANSynth;\n}();\n\nexports.GANSynth = GANSynth;","map":null,"metadata":{},"sourceType":"script"}