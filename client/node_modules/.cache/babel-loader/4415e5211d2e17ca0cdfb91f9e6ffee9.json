{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _1 = require(\".\");\n\nvar constants_1 = require(\"./constants\");\n\nvar BaseVisualizer = function () {\n  function BaseVisualizer(sequence, config) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    this.noteSequence = sequence;\n    this.sequenceIsQuantized = _1.sequences.isQuantizedSequence(this.noteSequence);\n    var defaultPixelsPerTimeStep = 30;\n\n    if (this.sequenceIsQuantized) {\n      var spq = sequence.quantizationInfo.stepsPerQuarter;\n      defaultPixelsPerTimeStep = spq ? defaultPixelsPerTimeStep / spq : 7;\n    }\n\n    this.config = {\n      noteHeight: config.noteHeight || 6,\n      noteSpacing: config.noteSpacing || 1,\n      pixelsPerTimeStep: config.pixelsPerTimeStep || defaultPixelsPerTimeStep,\n      noteRGB: config.noteRGB || '8, 41, 64',\n      activeNoteRGB: config.activeNoteRGB || '240, 84, 119',\n      minPitch: config.minPitch,\n      maxPitch: config.maxPitch\n    };\n    var size = this.getSize();\n    this.width = size.width;\n    this.height = size.height;\n  }\n\n  BaseVisualizer.prototype.getSize = function () {\n    if (this.config.minPitch === undefined || this.config.maxPitch === undefined) {\n      this.config.minPitch = constants_1.MAX_MIDI_PITCH;\n      this.config.maxPitch = constants_1.MIN_MIDI_PITCH;\n\n      for (var _i = 0, _a = this.noteSequence.notes; _i < _a.length; _i++) {\n        var note = _a[_i];\n        this.config.minPitch = Math.min(note.pitch, this.config.minPitch);\n        this.config.maxPitch = Math.max(note.pitch, this.config.maxPitch);\n      }\n\n      this.config.minPitch -= 2;\n      this.config.maxPitch += 2;\n    }\n\n    var height = (this.config.maxPitch - this.config.minPitch) * this.config.noteHeight;\n    var numNotes = this.noteSequence.notes.length;\n    var endTime = this.sequenceIsQuantized ? this.noteSequence.totalQuantizedSteps : this.noteSequence.totalTime;\n    var width = numNotes * this.config.noteSpacing + endTime * this.config.pixelsPerTimeStep;\n    return {\n      width: width,\n      height: height\n    };\n  };\n\n  BaseVisualizer.prototype.getNotePosition = function (note, noteIndex) {\n    var x = this.getNoteStartTime(note) * this.config.pixelsPerTimeStep;\n    var w = this.config.pixelsPerTimeStep * (this.getNoteEndTime(note) - this.getNoteStartTime(note)) - this.config.noteSpacing;\n    var y = this.height - (note.pitch - this.config.minPitch) * this.config.noteHeight;\n    return {\n      x: x,\n      y: y,\n      w: w,\n      h: this.config.noteHeight\n    };\n  };\n\n  BaseVisualizer.prototype.scrollIntoViewIfNeeded = function (scrollIntoView, activeNotePosition) {\n    if (scrollIntoView && this.parentElement) {\n      var containerWidth = this.parentElement.getBoundingClientRect().width;\n\n      if (activeNotePosition > this.parentElement.scrollLeft + containerWidth) {\n        this.parentElement.scrollLeft = activeNotePosition - 20;\n      }\n    }\n  };\n\n  BaseVisualizer.prototype.getNoteStartTime = function (note) {\n    return this.sequenceIsQuantized ? note.quantizedStartStep : note.startTime;\n  };\n\n  BaseVisualizer.prototype.getNoteEndTime = function (note) {\n    return this.sequenceIsQuantized ? note.quantizedEndStep : note.endTime;\n  };\n\n  BaseVisualizer.prototype.isPaintingActiveNote = function (note, playedNote) {\n    var isPlayedNote = this.getNoteStartTime(note) === this.getNoteStartTime(playedNote);\n    var heldDownDuringPlayedNote = this.getNoteStartTime(note) <= this.getNoteStartTime(playedNote) && this.getNoteEndTime(note) >= this.getNoteEndTime(playedNote);\n    return isPlayedNote || heldDownDuringPlayedNote;\n  };\n\n  return BaseVisualizer;\n}();\n\nexports.BaseVisualizer = BaseVisualizer;\n\nvar PianoRollCanvasVisualizer = function (_super) {\n  __extends(PianoRollCanvasVisualizer, _super);\n\n  function PianoRollCanvasVisualizer(sequence, canvas, config) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    var _this = _super.call(this, sequence, config) || this;\n\n    _this.ctx = canvas.getContext('2d');\n    _this.parentElement = canvas.parentElement;\n    var dpr = window.devicePixelRatio || 1;\n\n    if (_this.ctx) {\n      _this.ctx.canvas.width = dpr * _this.width;\n      _this.ctx.canvas.height = dpr * _this.height;\n      canvas.style.width = _this.width + \"px\";\n      canvas.style.height = _this.height + \"px\";\n\n      _this.ctx.scale(dpr, dpr);\n    }\n\n    _this.redraw();\n\n    return _this;\n  }\n\n  PianoRollCanvasVisualizer.prototype.redraw = function (activeNote, scrollIntoView) {\n    this.clear();\n    var activeNotePosition;\n\n    for (var i = 0; i < this.noteSequence.notes.length; i++) {\n      var note = this.noteSequence.notes[i];\n      var size = this.getNotePosition(note, i);\n      var opacityBaseline = 0.2;\n      var opacity = note.velocity ? note.velocity / 100 + opacityBaseline : 1;\n      var isActive = activeNote && this.isPaintingActiveNote(note, activeNote);\n      var fill = \"rgba(\" + (isActive ? this.config.activeNoteRGB : this.config.noteRGB) + \",\\n  \" + opacity + \")\";\n      this.redrawNote(size.x, size.y, size.w, size.h, fill);\n\n      if (isActive) {\n        activeNotePosition = size.x;\n      }\n    }\n\n    this.scrollIntoViewIfNeeded(scrollIntoView, activeNotePosition);\n    return activeNotePosition;\n  };\n\n  PianoRollCanvasVisualizer.prototype.clear = function () {\n    this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n  };\n\n  PianoRollCanvasVisualizer.prototype.redrawNote = function (x, y, w, h, fill) {\n    this.ctx.fillStyle = fill;\n    this.ctx.fillRect(Math.round(x), Math.round(y), Math.round(w), Math.round(h));\n  };\n\n  return PianoRollCanvasVisualizer;\n}(BaseVisualizer);\n\nexports.PianoRollCanvasVisualizer = PianoRollCanvasVisualizer;\n\nvar Visualizer = function (_super) {\n  __extends(Visualizer, _super);\n\n  function Visualizer(sequence, canvas, config) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    var _this = _super.call(this, sequence, canvas, config) || this;\n\n    _1.logging.log('mm.Visualizer is deprecated, and will be removed in a future \\\n         version. Please use mm.PianoRollCanvasVisualizer instead', 'mm.Visualizer', 5);\n\n    return _this;\n  }\n\n  return Visualizer;\n}(PianoRollCanvasVisualizer);\n\nexports.Visualizer = Visualizer;\n\nvar PianoRollSVGVisualizer = function (_super) {\n  __extends(PianoRollSVGVisualizer, _super);\n\n  function PianoRollSVGVisualizer(sequence, svg, config) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    var _this = _super.call(this, sequence, config) || this;\n\n    _this.svg = svg;\n    _this.parentElement = svg.parentElement;\n    _this.drawn = false;\n    _this.svg.style.width = _this.width + \"px\";\n    _this.svg.style.height = _this.height + \"px\";\n\n    _this.clear();\n\n    _this.draw();\n\n    return _this;\n  }\n\n  PianoRollSVGVisualizer.prototype.redraw = function (activeNote, scrollIntoView) {\n    if (!this.drawn) {\n      this.draw();\n    }\n\n    if (!activeNote) {\n      return null;\n    }\n\n    var el = this.svg.querySelector('rect.active');\n\n    if (el) {\n      var fill = this.getNoteFillColor(this.noteSequence.notes[parseInt(el.getAttribute('data-index'), 10)], false);\n      el.setAttribute('fill', fill);\n      el.removeAttribute('class');\n    }\n\n    var activeNotePosition;\n\n    for (var i = 0; i < this.noteSequence.notes.length; i++) {\n      var note = this.noteSequence.notes[i];\n      var isActive = activeNote && this.isPaintingActiveNote(note, activeNote);\n\n      if (!isActive) {\n        continue;\n      }\n\n      var el_1 = this.svg.querySelector(\"rect[data-index=\\\"\" + i + \"\\\"]\");\n      var fill = this.getNoteFillColor(note, true);\n      el_1.setAttribute('fill', fill);\n      el_1.setAttribute('class', 'active');\n      activeNotePosition = parseFloat(el_1.getAttribute('x'));\n    }\n\n    this.scrollIntoViewIfNeeded(scrollIntoView, activeNotePosition);\n    return activeNotePosition;\n  };\n\n  PianoRollSVGVisualizer.prototype.draw = function () {\n    for (var i = 0; i < this.noteSequence.notes.length; i++) {\n      var note = this.noteSequence.notes[i];\n      var size = this.getNotePosition(note, i);\n      var fill = this.getNoteFillColor(note, false);\n      this.drawNote(size.x, size.y, size.w, size.h, fill, i);\n    }\n\n    this.drawn = true;\n  };\n\n  PianoRollSVGVisualizer.prototype.getNoteFillColor = function (note, isActive) {\n    var opacityBaseline = 0.2;\n    var opacity = note.velocity ? note.velocity / 100 + opacityBaseline : 1;\n    var fill = \"rgba(\" + (isActive ? this.config.activeNoteRGB : this.config.noteRGB) + \",\\n  \" + opacity + \")\";\n    return fill;\n  };\n\n  PianoRollSVGVisualizer.prototype.drawNote = function (x, y, w, h, fill, index) {\n    if (!this.svg) {\n      return;\n    }\n\n    var rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n    rect.setAttribute('fill', fill);\n    rect.setAttribute('x', \"\" + Math.round(x));\n    rect.setAttribute('y', \"\" + Math.round(y));\n    rect.setAttribute('width', \"\" + Math.round(w));\n    rect.setAttribute('height', \"\" + Math.round(h));\n    rect.setAttribute('data-index', \"\" + index);\n    this.svg.appendChild(rect);\n  };\n\n  PianoRollSVGVisualizer.prototype.clear = function () {\n    this.svg.innerHTML = '';\n    this.drawn = false;\n  };\n\n  return PianoRollSVGVisualizer;\n}(BaseVisualizer);\n\nexports.PianoRollSVGVisualizer = PianoRollSVGVisualizer;","map":null,"metadata":{},"sourceType":"script"}