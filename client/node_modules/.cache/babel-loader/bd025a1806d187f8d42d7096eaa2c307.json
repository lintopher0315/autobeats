{"ast":null,"code":"import _classCallCheck from \"/home/christopher/Documents/autobeats/autobeats/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/christopher/Documents/autobeats/autobeats/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport * as Util from './Util';\n\nvar Note =\n/*#__PURE__*/\nfunction () {\n  _createClass(Note, null, [{\n    key: \"fromJSON\",\n\n    /**\n     * Convert JSON to Note object\n     * @param {object} json\n     * @static\n     * @returns {Note}\n     */\n    value: function fromJSON(json) {\n      var note = new Note(json.midi, json.time, json.duration, json.velocity);\n      return note;\n    }\n  }]);\n\n  function Note(midi, time) {\n    var duration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var velocity = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n\n    _classCallCheck(this, Note);\n\n    /**\n     * The MIDI note number\n     * @type {Number}\n     */\n    if (Util.isNumber(midi)) {\n      this.midi = midi;\n    } else if (Util.isPitch(midi)) {\n      this.name = midi;\n    } else {\n      throw new Error('the midi value must either be in Pitch Notation (e.g. C#4) or a midi value');\n    }\n    /**\n     * The note on time in seconds\n     * @type {Number}\n     */\n\n\n    this.time = time;\n    /**\n     * The duration in seconds\n     * @type {Number}\n     */\n\n    this.duration = duration;\n    /**\n     * The velocity 0-1\n     * @type {Number}\n     */\n\n    this.velocity = velocity;\n  }\n  /**\n   * If the note is the same as the given note\n   * @param {String|Number} note\n   * @return {Boolean}\n   */\n\n\n  _createClass(Note, [{\n    key: \"match\",\n    value: function match(note) {\n      if (Util.isNumber(note)) {\n        return this.midi === note;\n      } else if (Util.isPitch(note)) {\n        return this.name.toLowerCase() === note.toLowerCase();\n      }\n    }\n    /**\n     * The note in Scientific Pitch Notation\n     * @type {String}\n     */\n\n  }, {\n    key: \"toJSON\",\n\n    /**\n     * Convert the note to JSON\n     * @returns {Object}\n     */\n    value: function toJSON() {\n      return {\n        name: this.name,\n        midi: this.midi,\n        time: this.time,\n        velocity: this.velocity,\n        duration: this.duration\n      };\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return Util.midiToPitch(this.midi);\n    },\n    set: function set(name) {\n      this.midi = Util.pitchToMidi(name);\n    }\n    /**\n     * Alias for time\n     * @type {Number}\n     */\n\n  }, {\n    key: \"noteOn\",\n    get: function get() {\n      return this.time;\n    },\n    set: function set(t) {\n      this.time = t;\n    }\n    /**\n     * The note off time\n     * @type {Number}\n     */\n\n  }, {\n    key: \"noteOff\",\n    get: function get() {\n      return this.time + this.duration;\n    },\n    set: function set(time) {\n      this.duration = time - this.time;\n    }\n  }]);\n\n  return Note;\n}();\n\nexport { Note };","map":null,"metadata":{},"sourceType":"module"}