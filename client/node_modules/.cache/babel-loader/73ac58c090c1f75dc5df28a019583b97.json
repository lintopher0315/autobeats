{"ast":null,"code":"/**\n * [![npm version](https://img.shields.io/npm/v/tonal-key.svg?style=flat-square)](https://www.npmjs.com/package/tonal-key)\n *\n * The `Tonal` module is a facade to the rest of the modules. They are namespaced,\n * so for example to use `pc` function from `tonal-note` you have to write:\n * `Tonal.Note.pc`\n *\n * It exports the following modules:\n * - Note\n * - Interval\n * - Distance\n * - Scale\n * - Chord\n * - PcSet\n *\n * Additionally this facade exports some functions without namespace (see \"Methods\" below)\n *\n * @example\n * // es6 modules\n * import * as Tonal from \"tonal\"\n * Tonal.Note.name(\"cx\") // => \"C##\"\n *\n * @example\n * import { Note } from \"tonal\"\n * Note.name(\"bb\") // => \"Bb\"\n *\n * @example\n * // es5 node modules\n * var Tonal = require(\"tonal\");\n * Tonal.Distance.transpose(Tonal.Note.pc(\"C#2\"), \"M3\") // => \"E#\"\n * Tonal.Chord.notes(\"Dmaj7\") // => [\"D\", \"F#\", \"A\", \"C#\"]\n *\n * @module Tonal\n */\nimport * as Array from \"tonal-array\";\nimport * as Note from \"tonal-note\";\nimport * as Interval from \"tonal-interval\";\nimport * as Distance from \"tonal-distance\";\nimport * as Dictionary from \"tonal-dictionary\";\nimport * as Scale from \"tonal-scale\";\nimport * as Chord from \"tonal-chord\";\nimport * as PcSet from \"tonal-pcset\";\nexport { Array, Note, Interval, Distance, Scale, Chord, PcSet, Dictionary };\n/**\n * Transpose a note by an interval\n * @function\n * @param {string} note\n * @param {string} interval\n * @return {string} the transported note\n * @see Distance.transpose\n */\n\nexport var transpose = Distance.transpose;\n/**\n * Get the interval from two notes\n * @function\n * @param {string} from\n * @param {string} to\n * @return {string} the interval in reverse shorthand notation\n * @see Distance.interval\n */\n\nexport var interval = Distance.interval;\n/**\n * Get note properties\n * @function\n * @param {string} note - the note name\n * @return {Object}\n * @see Note.props\n * @example\n * Tonal.note(\"A4\").chroma // => 9\n */\n\nexport var note = Note.props;\n/**\n * Get midi note number\n * @function\n * @param {string} note\n * @return {Number}\n * @see Note.midi\n * @example\n * Tonal.midi(\"A4\") // => 49\n */\n\nexport var midi = Note.midi;\n/**\n * Get note frequency using equal tempered tuning at 440\n * @function\n * @param {string} note\n * @return {Number}\n * @see Note.freq\n * @example\n * Tonal.freq(\"A4\") // => 440\n */\n\nexport var freq = Note.freq;\n/**\n * Get intervals from a chord type\n * @function\n * @param {string} type - the chord type (no tonic)\n * @return {Array} an array of intervals or undefined if the chord type is not known\n * @see Dictionary.chord\n * @example\n * Tonal.chord(\"m7b5\") // => [\"1P\", \"3m\", \"5d\", \"7m\"]\n */\n\nexport var chord = Dictionary.chord;\n/**\n * Get intervals from scale name\n * @function\n * @param {string} name - the scale name (without tonic)\n * @return {Array} an array of intervals or undefiend if the scale is not kown\n * @example\n * Tonal.scale(\"major\") // => [\"1P\", \"2M\", \"3M\"...]\n */\n\nexport var scale = Dictionary.scale;","map":null,"metadata":{},"sourceType":"module"}