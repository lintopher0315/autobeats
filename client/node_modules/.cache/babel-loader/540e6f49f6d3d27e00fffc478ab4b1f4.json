{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tf = require(\"@tensorflow/tfjs\");\n\nvar chords = require(\"../core/chords\");\n\nvar constants = require(\"../core/constants\");\n\nvar data = require(\"../core/data\");\n\nvar logging = require(\"../core/logging\");\n\nvar LayerVars = function () {\n  function LayerVars(kernel, bias) {\n    if (kernel === undefined) {\n      throw Error('`kernel` is undefined.');\n    }\n\n    if (bias === undefined) {\n      throw Error('`bias` is undefined.');\n    }\n\n    this.kernel = kernel;\n    this.bias = bias;\n  }\n\n  return LayerVars;\n}();\n\nexports.LayerVars = LayerVars;\n\nfunction dense(vars, inputs) {\n  return inputs.matMul(vars.kernel).add(vars.bias);\n}\n\nvar Encoder = function () {\n  function Encoder() {}\n\n  return Encoder;\n}();\n\nexports.Encoder = Encoder;\n\nvar BidirectionalLstmEncoder = function (_super) {\n  __extends(BidirectionalLstmEncoder, _super);\n\n  function BidirectionalLstmEncoder(lstmFwVars, lstmBwVars, muVars) {\n    var _this = _super.call(this) || this;\n\n    _this.lstmFwVars = lstmFwVars;\n    _this.lstmBwVars = lstmBwVars;\n    _this.muVars = muVars;\n    _this.zDims = muVars ? _this.muVars.bias.shape[0] : null;\n    return _this;\n  }\n\n  BidirectionalLstmEncoder.prototype.encode = function (sequence, segmentLengths) {\n    var _this = this;\n\n    if (segmentLengths) {\n      throw new Error('Variable-length segments not supported in flat encoder');\n    }\n\n    return tf.tidy(function () {\n      var fwState = _this.singleDirection(sequence, true);\n\n      var bwState = _this.singleDirection(sequence, false);\n\n      var finalState = tf.concat([fwState[1], bwState[1]], 1);\n\n      if (_this.muVars) {\n        return dense(_this.muVars, finalState);\n      } else {\n        return finalState;\n      }\n    });\n  };\n\n  BidirectionalLstmEncoder.prototype.singleDirection = function (inputs, fw) {\n    var batchSize = inputs.shape[0];\n    var length = inputs.shape[1];\n    var lstmVars = fw ? this.lstmFwVars : this.lstmBwVars;\n    var state = [tf.zeros([batchSize, lstmVars.bias.shape[0] / 4]), tf.zeros([batchSize, lstmVars.bias.shape[0] / 4])];\n    var forgetBias = tf.scalar(1.0);\n\n    var lstm = function lstm(data, state) {\n      return tf.basicLSTMCell(forgetBias, lstmVars.kernel, lstmVars.bias, data, state[0], state[1]);\n    };\n\n    var splitInputs = tf.split(inputs.toFloat(), length, 1);\n\n    for (var _i = 0, _a = fw ? splitInputs : splitInputs.reverse(); _i < _a.length; _i++) {\n      var data_1 = _a[_i];\n      state = lstm(data_1.squeeze([1]), state);\n    }\n\n    return state;\n  };\n\n  return BidirectionalLstmEncoder;\n}(Encoder);\n\nvar HierarchicalEncoder = function (_super) {\n  __extends(HierarchicalEncoder, _super);\n\n  function HierarchicalEncoder(baseEncoders, numSteps, muVars) {\n    var _this = _super.call(this) || this;\n\n    _this.baseEncoders = baseEncoders;\n    _this.numSteps = numSteps;\n    _this.muVars = muVars;\n    _this.zDims = _this.muVars.bias.shape[0];\n    return _this;\n  }\n\n  HierarchicalEncoder.prototype.encode = function (sequence, segmentLengths) {\n    var _this = this;\n\n    if (segmentLengths) {\n      if (sequence.shape[0] !== 1) {\n        throw new Error('When using variable-length segments, batch size must be 1.');\n      }\n\n      if (segmentLengths.length !== this.numSteps[0]) {\n        throw new Error('Must provide length for all variable-length segments.');\n      }\n    }\n\n    return tf.tidy(function () {\n      var inputs = sequence;\n\n      for (var level = 0; level < _this.baseEncoders.length; ++level) {\n        var levelSteps = _this.numSteps[level];\n        var splitInputs = tf.split(inputs, levelSteps, 1);\n        var embeddings = [];\n\n        for (var step = 0; step < levelSteps; ++step) {\n          embeddings.push(_this.baseEncoders[level].encode(level === 0 && segmentLengths ? tf.slice3d(splitInputs[step], [0, 0, 0], [1, segmentLengths[step], -1]) : splitInputs[step]));\n        }\n\n        inputs = tf.stack(embeddings, 1);\n      }\n\n      return dense(_this.muVars, inputs.squeeze([1]));\n    });\n  };\n\n  return HierarchicalEncoder;\n}(Encoder);\n\nfunction initLstmCells(z, lstmCellVars, zToInitStateVars) {\n  var lstmCells = [];\n  var c = [];\n  var h = [];\n  var initialStates = tf.split(dense(zToInitStateVars, z).tanh(), 2 * lstmCellVars.length, 1);\n\n  var _loop_1 = function _loop_1(i) {\n    var lv = lstmCellVars[i];\n    var forgetBias = tf.scalar(1.0);\n    lstmCells.push(function (data, c, h) {\n      return tf.basicLSTMCell(forgetBias, lv.kernel, lv.bias, data, c, h);\n    });\n    c.push(initialStates[i * 2]);\n    h.push(initialStates[i * 2 + 1]);\n  };\n\n  for (var i = 0; i < lstmCellVars.length; ++i) {\n    _loop_1(i);\n  }\n\n  return {\n    'cell': lstmCells,\n    'c': c,\n    'h': h\n  };\n}\n\nvar Decoder = function () {\n  function Decoder() {}\n\n  return Decoder;\n}();\n\nexports.Decoder = Decoder;\n\nvar BaseDecoder = function (_super) {\n  __extends(BaseDecoder, _super);\n\n  function BaseDecoder(lstmCellVars, zToInitStateVars, outputProjectVars, outputDims) {\n    var _this = _super.call(this) || this;\n\n    _this.lstmCellVars = lstmCellVars;\n    _this.zToInitStateVars = zToInitStateVars;\n    _this.outputProjectVars = outputProjectVars;\n    _this.zDims = _this.zToInitStateVars.kernel.shape[0];\n    _this.outputDims = outputDims || outputProjectVars.bias.shape[0];\n    return _this;\n  }\n\n  BaseDecoder.prototype.decode = function (z, length, initialInput, temperature, controls) {\n    var _this = this;\n\n    var batchSize = z.shape[0];\n    return tf.tidy(function () {\n      var _a;\n\n      var lstmCell = initLstmCells(z, _this.lstmCellVars, _this.zToInitStateVars);\n      var samples = [];\n      var nextInput = initialInput ? initialInput : tf.zeros([batchSize, _this.outputDims]);\n      var splitControls = controls ? tf.split(tf.tile(controls, [batchSize, 1]), controls.shape[0]) : undefined;\n\n      for (var i = 0; i < length; ++i) {\n        var toConcat = splitControls ? [nextInput, z, splitControls[i]] : [nextInput, z];\n        _a = tf.multiRNNCell(lstmCell.cell, tf.concat(toConcat, 1), lstmCell.c, lstmCell.h), lstmCell.c = _a[0], lstmCell.h = _a[1];\n        var lstmOutput = dense(_this.outputProjectVars, lstmCell.h[lstmCell.h.length - 1]);\n        nextInput = _this.sample(lstmOutput, temperature);\n        samples.push(nextInput);\n      }\n\n      return tf.stack(samples, 1);\n    });\n  };\n\n  return BaseDecoder;\n}(Decoder);\n\nvar CategoricalDecoder = function (_super) {\n  __extends(CategoricalDecoder, _super);\n\n  function CategoricalDecoder() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  CategoricalDecoder.prototype.sample = function (lstmOutput, temperature) {\n    var logits = lstmOutput;\n    var timeLabels = temperature ? tf.multinomial(logits.div(tf.scalar(temperature)), 1).as1D() : logits.argMax(1).as1D();\n    return tf.oneHot(timeLabels, this.outputDims).toFloat();\n  };\n\n  return CategoricalDecoder;\n}(BaseDecoder);\n\nvar NadeDecoder = function (_super) {\n  __extends(NadeDecoder, _super);\n\n  function NadeDecoder(lstmCellVars, zToInitStateVars, outputProjectVars, nade) {\n    var _this = _super.call(this, lstmCellVars, zToInitStateVars, outputProjectVars, nade.numDims) || this;\n\n    _this.nade = nade;\n    return _this;\n  }\n\n  NadeDecoder.prototype.sample = function (lstmOutput, temperature) {\n    var _a = tf.split(lstmOutput, [this.nade.numHidden, this.nade.numDims], 1),\n        encBias = _a[0],\n        decBias = _a[1];\n\n    return this.nade.sample(encBias, decBias);\n  };\n\n  return NadeDecoder;\n}(BaseDecoder);\n\nvar GrooveDecoder = function (_super) {\n  __extends(GrooveDecoder, _super);\n\n  function GrooveDecoder() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  GrooveDecoder.prototype.sample = function (lstmOutput, temperature) {\n    var _a = tf.split(lstmOutput, 3, 1),\n        hits = _a[0],\n        velocities = _a[1],\n        offsets = _a[2];\n\n    velocities = tf.sigmoid(velocities);\n    offsets = tf.tanh(offsets);\n\n    if (temperature) {\n      hits = tf.sigmoid(hits.div(tf.scalar(temperature)));\n      var threshold = tf.randomUniform(hits.shape, 0, 1);\n      hits = tf.greater(hits, threshold).toFloat();\n    } else {\n      hits = tf.greater(tf.sigmoid(hits), 0.5).toFloat();\n    }\n\n    return tf.concat([hits, velocities, offsets], 1);\n  };\n\n  return GrooveDecoder;\n}(BaseDecoder);\n\nvar ConductorDecoder = function (_super) {\n  __extends(ConductorDecoder, _super);\n\n  function ConductorDecoder(coreDecoders, lstmCellVars, zToInitStateVars, numSteps) {\n    var _this = _super.call(this) || this;\n\n    _this.coreDecoders = coreDecoders;\n    _this.lstmCellVars = lstmCellVars;\n    _this.zToInitStateVars = zToInitStateVars;\n    _this.numSteps = numSteps;\n    _this.zDims = _this.zToInitStateVars.kernel.shape[0];\n    _this.outputDims = _this.coreDecoders.reduce(function (dims, dec) {\n      return dims + dec.outputDims;\n    }, 0);\n    return _this;\n  }\n\n  ConductorDecoder.prototype.decode = function (z, length, initialInput, temperature, controls) {\n    var _this = this;\n\n    var batchSize = z.shape[0];\n    return tf.tidy(function () {\n      var _a;\n\n      var lstmCell = initLstmCells(z, _this.lstmCellVars, _this.zToInitStateVars);\n      var samples = [];\n\n      var initialInput = _this.coreDecoders.map(function (_) {\n        return undefined;\n      });\n\n      var dummyInput = tf.zeros([batchSize, 1]);\n      var splitControls = controls ? tf.split(controls, _this.numSteps) : undefined;\n\n      for (var i = 0; i < _this.numSteps; ++i) {\n        _a = tf.multiRNNCell(lstmCell.cell, dummyInput, lstmCell.c, lstmCell.h), lstmCell.c = _a[0], lstmCell.h = _a[1];\n        var currSamples = [];\n\n        for (var j = 0; j < _this.coreDecoders.length; ++j) {\n          currSamples.push(_this.coreDecoders[j].decode(lstmCell.h[lstmCell.h.length - 1], length / _this.numSteps, initialInput[j], temperature, splitControls ? splitControls[i] : undefined));\n        }\n\n        samples.push(tf.concat(currSamples, -1));\n        initialInput = currSamples.map(function (s) {\n          return s.slice([0, -1, 0], [batchSize, 1, s.shape[s.rank - 1]]).squeeze([1]).toFloat();\n        });\n      }\n\n      return tf.concat(samples, 1);\n    });\n  };\n\n  return ConductorDecoder;\n}(Decoder);\n\nvar Nade = function () {\n  function Nade(encWeights, decWeightsT) {\n    this.numDims = encWeights.shape[0];\n    this.numHidden = encWeights.shape[2];\n    this.encWeights = encWeights.as2D(this.numDims, this.numHidden);\n    this.decWeightsT = decWeightsT.as2D(this.numDims, this.numHidden);\n  }\n\n  Nade.prototype.sample = function (encBias, decBias) {\n    var _this = this;\n\n    var batchSize = encBias.shape[0];\n    return tf.tidy(function () {\n      var samples = [];\n      var a = encBias.clone();\n\n      for (var i = 0; i < _this.numDims; i++) {\n        var h = tf.sigmoid(a);\n\n        var encWeightsI = _this.encWeights.slice([i, 0], [1, _this.numHidden]).as1D();\n\n        var decWeightsTI = _this.decWeightsT.slice([i, 0], [1, _this.numHidden]);\n\n        var decBiasI = decBias.slice([0, i], [batchSize, 1]);\n        var contfogitsI = decBiasI.add(tf.matMul(h, decWeightsTI, false, true));\n        var condProbsI = contfogitsI.sigmoid();\n        var samplesI = condProbsI.greaterEqual(tf.scalar(0.5)).toFloat().as1D();\n\n        if (i < _this.numDims - 1) {\n          a = a.add(tf.outerProduct(samplesI.toFloat(), encWeightsI));\n        }\n\n        samples.push(samplesI);\n      }\n\n      return tf.stack(samples, 1);\n    });\n  };\n\n  return Nade;\n}();\n\nexports.Nade = Nade;\n\nvar MusicVAE = function () {\n  function MusicVAE(checkpointURL, spec) {\n    this.initialized = false;\n    this.checkpointURL = checkpointURL;\n    this.spec = spec;\n  }\n\n  MusicVAE.prototype.instantiateFromSpec = function () {\n    this.dataConverter = data.converterFromSpec(this.spec.dataConverter);\n    this.chordEncoder = this.spec.chordEncoder ? chords.chordEncoderFromType(this.spec.chordEncoder) : undefined;\n  };\n\n  MusicVAE.prototype.dispose = function () {\n    var _this = this;\n\n    if (this.rawVars !== undefined) {\n      Object.keys(this.rawVars).forEach(function (name) {\n        return _this.rawVars[name].dispose();\n      });\n    }\n\n    this.encoder = undefined;\n    this.decoder = undefined;\n    this.initialized = false;\n  };\n\n  MusicVAE.prototype.getLstmLayers = function (cellFormat, vars) {\n    var lstmLayers = [];\n    var l = 0;\n\n    while (true) {\n      var cellPrefix = cellFormat.replace('%d', l.toString());\n\n      if (!(cellPrefix + 'kernel' in vars)) {\n        break;\n      }\n\n      lstmLayers.push(new LayerVars(vars[cellPrefix + 'kernel'], vars[cellPrefix + 'bias']));\n      ++l;\n    }\n\n    return lstmLayers;\n  };\n\n  MusicVAE.prototype.initialize = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var startTime, LSTM_CELL_FORMAT, MUTLI_LSTM_CELL_FORMAT, CONDUCTOR_PREFIX, BIDI_LSTM_CELL, ENCODER_FORMAT, HIER_ENCODER_FORMAT, vars, encMu, fwLayers_1, bwLayers_1, baseEncoders, fwLayers, bwLayers, decVarPrefix, decVarPrefixes, i, baseDecoders, condLstmLayers, condZtoInitState;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.dispose();\n            startTime = performance.now();\n            if (!!this.spec) return [3, 2];\n            return [4, fetch(this.checkpointURL + \"/config.json\").then(function (response) {\n              return response.json();\n            }).then(function (spec) {\n              if (spec.type !== 'MusicVAE') {\n                throw new Error(\"Attempted to instantiate MusicVAE model with incorrect type:\\n                  \" + spec.type);\n              }\n\n              _this.spec = spec;\n            })];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            this.instantiateFromSpec();\n            LSTM_CELL_FORMAT = 'cell_%d/lstm_cell/';\n            MUTLI_LSTM_CELL_FORMAT = \"multi_rnn_cell/\" + LSTM_CELL_FORMAT;\n            CONDUCTOR_PREFIX = 'decoder/hierarchical_level_0/';\n            BIDI_LSTM_CELL = 'cell_%d/bidirectional_rnn/%s/multi_rnn_cell/cell_0/lstm_cell/';\n            ENCODER_FORMAT = \"encoder/\" + BIDI_LSTM_CELL;\n            HIER_ENCODER_FORMAT = \"encoder/hierarchical_level_%d/\" + BIDI_LSTM_CELL.replace('%d', '0');\n            return [4, fetch(this.checkpointURL + \"/weights_manifest.json\").then(function (response) {\n              return response.json();\n            }).then(function (manifest) {\n              return tf.io.loadWeights(manifest, _this.checkpointURL);\n            })];\n\n          case 3:\n            vars = _a.sent();\n            this.rawVars = vars;\n            encMu = new LayerVars(vars['encoder/mu/kernel'], vars['encoder/mu/bias']);\n\n            if (this.dataConverter.numSegments) {\n              fwLayers_1 = this.getLstmLayers(HIER_ENCODER_FORMAT.replace('%s', 'fw'), vars);\n              bwLayers_1 = this.getLstmLayers(HIER_ENCODER_FORMAT.replace('%s', 'bw'), vars);\n\n              if (fwLayers_1.length !== bwLayers_1.length || fwLayers_1.length !== 2) {\n                throw Error('Only 2 hierarchical encoder levels are supported. ' + (\"Got \" + fwLayers_1.length + \" forward and \" + bwLayers_1.length + \" \") + 'backward.');\n              }\n\n              baseEncoders = [0, 1].map(function (l) {\n                return new BidirectionalLstmEncoder(fwLayers_1[l], bwLayers_1[l]);\n              });\n              this.encoder = new HierarchicalEncoder(baseEncoders, [this.dataConverter.numSegments, 1], encMu);\n            } else {\n              fwLayers = this.getLstmLayers(ENCODER_FORMAT.replace('%s', 'fw'), vars);\n              bwLayers = this.getLstmLayers(ENCODER_FORMAT.replace('%s', 'bw'), vars);\n\n              if (fwLayers.length !== bwLayers.length || fwLayers.length !== 1) {\n                throw Error('Only single-layer bidirectional encoders are supported. ' + (\"Got \" + fwLayers.length + \" forward and \" + bwLayers.length + \" \") + 'backward.');\n              }\n\n              this.encoder = new BidirectionalLstmEncoder(fwLayers[0], bwLayers[0], encMu);\n            }\n\n            decVarPrefix = this.dataConverter.numSegments ? 'core_decoder/' : '';\n            decVarPrefixes = [];\n\n            if (this.dataConverter.NUM_SPLITS) {\n              for (i = 0; i < this.dataConverter.NUM_SPLITS; ++i) {\n                decVarPrefixes.push(decVarPrefix + \"core_decoder_\" + i + \"/decoder/\");\n              }\n            } else {\n              decVarPrefixes.push(decVarPrefix + \"decoder/\");\n            }\n\n            baseDecoders = decVarPrefixes.map(function (varPrefix) {\n              var decLstmLayers = _this.getLstmLayers(varPrefix + MUTLI_LSTM_CELL_FORMAT, vars);\n\n              var decZtoInitState = new LayerVars(vars[varPrefix + \"z_to_initial_state/kernel\"], vars[varPrefix + \"z_to_initial_state/bias\"]);\n              var decOutputProjection = new LayerVars(vars[varPrefix + \"output_projection/kernel\"], vars[varPrefix + \"output_projection/bias\"]);\n\n              if (varPrefix + \"nade/w_enc\" in vars) {\n                return new NadeDecoder(decLstmLayers, decZtoInitState, decOutputProjection, new Nade(vars[varPrefix + \"nade/w_enc\"], vars[varPrefix + \"nade/w_dec_t\"]));\n              } else if (_this.spec.dataConverter.type === 'GrooveConverter') {\n                return new GrooveDecoder(decLstmLayers, decZtoInitState, decOutputProjection);\n              } else {\n                return new CategoricalDecoder(decLstmLayers, decZtoInitState, decOutputProjection);\n              }\n            });\n\n            if (this.dataConverter.numSegments) {\n              condLstmLayers = this.getLstmLayers(CONDUCTOR_PREFIX + LSTM_CELL_FORMAT, vars);\n              condZtoInitState = new LayerVars(vars[CONDUCTOR_PREFIX + \"initial_state/kernel\"], vars[CONDUCTOR_PREFIX + \"initial_state/bias\"]);\n              this.decoder = new ConductorDecoder(baseDecoders, condLstmLayers, condZtoInitState, this.dataConverter.numSegments);\n            } else if (baseDecoders.length === 1) {\n              this.decoder = baseDecoders[0];\n            } else {\n              throw Error('Unexpected number of base decoders without conductor: ' + (\"\" + baseDecoders.length));\n            }\n\n            this.initialized = true;\n            logging.logWithDuration('Initialized model', startTime, 'MusicVAE');\n            return [2];\n        }\n      });\n    });\n  };\n\n  MusicVAE.prototype.isInitialized = function () {\n    return this.initialized;\n  };\n\n  MusicVAE.prototype.interpolate = function (inputSequences, numInterps, temperature, chordProgression) {\n    return __awaiter(this, void 0, void 0, function () {\n      var startTime, inputZs, interpZs, outputSequenes;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this.chordEncoder && !chordProgression) {\n              throw new Error('Chord progression expected but not provided.');\n            }\n\n            if (!this.chordEncoder && chordProgression) {\n              throw new Error('Unexpected chord progression provided.');\n            }\n\n            if (!!this.initialized) return [3, 2];\n            return [4, this.initialize()];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            startTime = 0;\n            return [4, this.encode(inputSequences, chordProgression)];\n\n          case 3:\n            inputZs = _a.sent();\n            interpZs = tf.tidy(function () {\n              return _this.getInterpolatedZs(inputZs, numInterps);\n            });\n            inputZs.dispose();\n            outputSequenes = this.decode(interpZs, temperature, chordProgression);\n            interpZs.dispose();\n            outputSequenes.then(function () {\n              return logging.logWithDuration('Interpolation completed', startTime, 'MusicVAE', 20);\n            });\n            return [2, outputSequenes];\n        }\n      });\n    });\n  };\n\n  MusicVAE.prototype.getSegmentLengths = function (inputTensors) {\n    return __awaiter(this, void 0, void 0, function () {\n      var numSteps, numSegments, isEndTensor, isEndArray, maxSegmentLength, segmentLengths, offset, fromIndex;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (inputTensors.shape[0] > 1) {\n              throw new Error('Variable-length segments not supported for batch size > 1.');\n            }\n\n            numSteps = this.dataConverter.numSteps;\n            numSegments = this.dataConverter.numSegments;\n            isEndTensor = tf.tidy(function () {\n              return tf.min(tf.equal(inputTensors.squeeze([0]), _this.dataConverter.endTensor.expandDims(0)), 1);\n            });\n            return [4, isEndTensor.data()];\n\n          case 1:\n            isEndArray = _a.sent();\n            isEndTensor.dispose();\n            maxSegmentLength = numSteps / numSegments;\n            segmentLengths = [];\n            offset = 0;\n            fromIndex = isEndArray.indexOf(1);\n\n            while (fromIndex !== -1) {\n              segmentLengths.push(fromIndex - offset + 1);\n              offset += maxSegmentLength;\n              fromIndex = isEndArray.indexOf(1, offset);\n            }\n\n            if (segmentLengths.length !== numSegments) {\n              throw new Error(\"Incorrect number of segments: \" + segmentLengths.length + \" != \" + numSegments);\n            }\n\n            return [2, segmentLengths];\n        }\n      });\n    });\n  };\n\n  MusicVAE.prototype.encodeChordProgression = function (chordProgression) {\n    var numSteps = this.dataConverter.numSteps;\n    var numSegments = this.dataConverter.numSegments;\n    var numChordSteps = this.dataConverter.SEGMENTED_BY_TRACK ? numSteps / numSegments : numSteps;\n    var encodedChordProgression = this.dataConverter.SEGMENTED_BY_TRACK ? tf.concat2d([this.chordEncoder.encode(constants.NO_CHORD).expandDims(0), this.chordEncoder.encodeProgression(chordProgression, numChordSteps - 1)], 0) : this.chordEncoder.encodeProgression(chordProgression, numChordSteps);\n    return this.dataConverter.SEGMENTED_BY_TRACK ? tf.tile(encodedChordProgression, [numSegments, 1]) : encodedChordProgression;\n  };\n\n  MusicVAE.prototype.encode = function (inputSequences, chordProgression) {\n    return __awaiter(this, void 0, void 0, function () {\n      var startTime, inputTensors, segmentLengths, _a, newInputTensors, z;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (this.chordEncoder && !chordProgression) {\n              throw new Error('Chord progression expected but not provided.');\n            }\n\n            if (!this.chordEncoder && chordProgression) {\n              throw new Error('Unexpected chord progression provided.');\n            }\n\n            if (this.chordEncoder && this.dataConverter.endTensor && chordProgression.length > 1) {\n              throw new Error('Multiple chords not supported when using variable-length segments.');\n            }\n\n            if (!!this.initialized) return [3, 2];\n            return [4, this.initialize()];\n\n          case 1:\n            _b.sent();\n\n            _b.label = 2;\n\n          case 2:\n            startTime = performance.now();\n            inputTensors = tf.tidy(function () {\n              return tf.stack(inputSequences.map(function (t) {\n                return _this.dataConverter.toTensor(t);\n              }));\n            });\n            if (!this.dataConverter.endTensor) return [3, 4];\n            return [4, this.getSegmentLengths(inputTensors)];\n\n          case 3:\n            _a = _b.sent();\n            return [3, 5];\n\n          case 4:\n            _a = undefined;\n            _b.label = 5;\n\n          case 5:\n            segmentLengths = _a;\n\n            if (this.chordEncoder) {\n              newInputTensors = tf.tidy(function () {\n                var encodedChords = _this.encodeChordProgression(chordProgression);\n\n                var controls = tf.tile(tf.expandDims(encodedChords, 0), [inputSequences.length, 1, 1]);\n                return inputTensors.concat(controls, 2);\n              });\n              inputTensors.dispose();\n              inputTensors = newInputTensors;\n            }\n\n            z = this.encoder.encode(inputTensors, segmentLengths);\n            inputTensors.dispose();\n            logging.logWithDuration('Encoding completed', startTime, 'MusicVAE', 20);\n            return [2, z];\n        }\n      });\n    });\n  };\n\n  MusicVAE.prototype.decode = function (z, temperature, chordProgression, stepsPerQuarter, qpm) {\n    if (stepsPerQuarter === void 0) {\n      stepsPerQuarter = constants.DEFAULT_STEPS_PER_QUARTER;\n    }\n\n    if (qpm === void 0) {\n      qpm = constants.DEFAULT_QUARTERS_PER_MINUTE;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var startTime, numSteps, ohSeqs, outputSequences, _i, ohSeqs_1, oh, _a, _b;\n\n      var _this = this;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            if (this.chordEncoder && !chordProgression) {\n              throw new Error('Chord progression expected but not provided.');\n            }\n\n            if (!this.chordEncoder && chordProgression) {\n              throw new Error('Unexpected chord progression provided.');\n            }\n\n            if (this.chordEncoder && this.dataConverter.endTensor && chordProgression.length > 1) {\n              throw new Error('Multiple chords not supported when using variable-length segments.');\n            }\n\n            if (!!this.initialized) return [3, 2];\n            return [4, this.initialize()];\n\n          case 1:\n            _c.sent();\n\n            _c.label = 2;\n\n          case 2:\n            startTime = performance.now();\n            numSteps = this.dataConverter.numSteps;\n            ohSeqs = tf.tidy(function () {\n              var controls = _this.chordEncoder ? _this.encodeChordProgression(chordProgression) : undefined;\n\n              var ohSeqs = _this.decoder.decode(z, numSteps, undefined, temperature, controls);\n\n              return tf.split(ohSeqs, ohSeqs.shape[0]).map(function (oh) {\n                return oh.squeeze([0]);\n              });\n            });\n            outputSequences = [];\n            _i = 0, ohSeqs_1 = ohSeqs;\n            _c.label = 3;\n\n          case 3:\n            if (!(_i < ohSeqs_1.length)) return [3, 6];\n            oh = ohSeqs_1[_i];\n            _b = (_a = outputSequences).push;\n            return [4, this.dataConverter.toNoteSequence(oh, stepsPerQuarter, qpm)];\n\n          case 4:\n            _b.apply(_a, [_c.sent()]);\n\n            oh.dispose();\n            _c.label = 5;\n\n          case 5:\n            _i++;\n            return [3, 3];\n\n          case 6:\n            logging.logWithDuration('Decoding completed', startTime, 'MusicVAE', 20);\n            return [2, outputSequences];\n        }\n      });\n    });\n  };\n\n  MusicVAE.prototype.getInterpolatedZs = function (z, numInterps) {\n    if (typeof numInterps === 'number') {\n      numInterps = [numInterps];\n    }\n\n    if (z.shape[0] !== 2 && z.shape[0] !== 4) {\n      throw new Error('Invalid number of input sequences. Requires length 2, or 4');\n    }\n\n    if (numInterps.length !== 1 && numInterps.length !== 2) {\n      throw new Error('Invalid number of dimensions. Requires length 1, or 2.');\n    }\n\n    var w = numInterps[0];\n    var h = numInterps.length === 2 ? numInterps[1] : w;\n    var interpolatedZs = tf.tidy(function () {\n      var rangeX = tf.linspace(0.0, 1.0, w);\n      var z0 = z.slice([0, 0], [1, z.shape[1]]).as1D();\n      var z1 = z.slice([1, 0], [1, z.shape[1]]).as1D();\n\n      if (z.shape[0] === 2) {\n        var zDiff = z1.sub(z0);\n        return tf.outerProduct(rangeX, zDiff).add(z0);\n      } else if (z.shape[0] === 4) {\n        var rangeY = tf.linspace(0.0, 1.0, h);\n        var z2 = z.slice([2, 0], [1, z.shape[1]]).as1D();\n        var z3 = z.slice([3, 0], [1, z.shape[1]]).as1D();\n        var revRangeX = tf.scalar(1.0).sub(rangeX);\n        var revRangeY = tf.scalar(1.0).sub(rangeY);\n        var finalZs = z0.mul(tf.outerProduct(revRangeY, revRangeX).as3D(h, w, 1));\n        finalZs = tf.addStrict(finalZs, z1.mul(tf.outerProduct(rangeY, revRangeX).as3D(h, w, 1)));\n        finalZs = tf.addStrict(finalZs, z2.mul(tf.outerProduct(revRangeY, rangeX).as3D(h, w, 1)));\n        finalZs = tf.addStrict(finalZs, z3.mul(tf.outerProduct(rangeY, rangeX).as3D(h, w, 1)));\n        return finalZs.as2D(w * h, z.shape[1]);\n      } else {\n        throw new Error('Invalid number of note sequences. Requires length 2, or 4');\n      }\n    });\n    return interpolatedZs;\n  };\n\n  MusicVAE.prototype.sample = function (numSamples, temperature, chordProgression, stepsPerQuarter, qpm) {\n    if (temperature === void 0) {\n      temperature = 0.5;\n    }\n\n    if (stepsPerQuarter === void 0) {\n      stepsPerQuarter = constants.DEFAULT_STEPS_PER_QUARTER;\n    }\n\n    if (qpm === void 0) {\n      qpm = constants.DEFAULT_QUARTERS_PER_MINUTE;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var startTime, randZs, outputSequences;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this.chordEncoder && !chordProgression) {\n              throw new Error('Chord progression expected but not provided.');\n            }\n\n            if (!this.chordEncoder && chordProgression) {\n              throw new Error('Unexpected chord progression provided.');\n            }\n\n            if (!!this.initialized) return [3, 2];\n            return [4, this.initialize()];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            startTime = performance.now();\n            randZs = tf.tidy(function () {\n              return tf.randomNormal([numSamples, _this.decoder.zDims]);\n            });\n            outputSequences = this.decode(randZs, temperature, chordProgression, stepsPerQuarter);\n            randZs.dispose();\n            outputSequences.then(function () {\n              return logging.logWithDuration('Sampling completed', startTime, 'MusicVAE', 20);\n            });\n            return [2, outputSequences];\n        }\n      });\n    });\n  };\n\n  return MusicVAE;\n}();\n\nexports.MusicVAE = MusicVAE;","map":null,"metadata":{},"sourceType":"script"}