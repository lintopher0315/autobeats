{"ast":null,"code":"/**\n * [![npm version](https://img.shields.io/npm/v/tonal-dictionary.svg)](https://www.npmjs.com/package/tonal-dictionary)\n *\n * `tonal-dictionary` contains a dictionary of musical scales and chords\n *\n * This is part of [tonal](https://www.npmjs.com/package/tonal) music theory library.\n *\n * @example\n * // es6\n * import * as Dictionary from \"tonal-dictionary\"\n * // es5\n * const Dictionary = require(\"tonal-dictionary\")\n *\n * @example\n * Dictionary.chord(\"Maj7\") // => [\"1P\", \"3M\", \"5P\", \"7M\"]\n *\n * @module Dictionary\n */\nimport sdata from \"./data/scales.json\";\nimport cdata from \"./data/chords.json\";\nimport { chroma } from \"tonal-pcset\";\nexport var dictionary = function dictionary(raw) {\n  var keys = Object.keys(raw).sort();\n  var data = [];\n  var index = [];\n\n  var add = function add(name, ivls, chroma) {\n    data[name] = ivls;\n    index[chroma] = index[chroma] || [];\n    index[chroma].push(name);\n  };\n\n  keys.forEach(function (key) {\n    var ivls = raw[key][0].split(\" \");\n    var alias = raw[key][1];\n    var chr = chroma(ivls);\n    add(key, ivls, chr);\n\n    if (alias) {\n      alias.forEach(function (a) {\n        return add(a, ivls, chr);\n      });\n    }\n  });\n  var allKeys = Object.keys(data).sort();\n\n  var dict = function dict(name) {\n    return data[name];\n  };\n\n  dict.names = function (p) {\n    if (typeof p === \"string\") {\n      return (index[p] || []).slice();\n    } else {\n      return (p === true ? allKeys : keys).slice();\n    }\n  };\n\n  return dict;\n};\nexport var combine = function combine(a, b) {\n  var dict = function dict(name) {\n    return a(name) || b(name);\n  };\n\n  dict.names = function (p) {\n    return a.names(p).concat(b.names(p));\n  };\n\n  return dict;\n};\n/**\n * A dictionary of scales: a function that given a scale name (without tonic)\n * returns an array of intervals\n *\n * @function\n * @param {string} name\n * @return {Array} intervals\n * @example\n * import { scale } from \"tonal-dictionary\"\n * scale(\"major\") // => [\"1P\", \"2M\", ...]\n * scale.names(); // => [\"major\", ...]\n */\n\nexport var scale = dictionary(sdata);\n/**\n * A dictionary of chords: a function that given a chord type\n * returns an array of intervals\n *\n * @function\n * @param {string} type\n * @return {Array} intervals\n * @example\n * import { chord } from \"tonal-dictionary\"\n * chord(\"Maj7\") // => [\"1P\", \"3M\", ...]\n * chord.names(); // => [\"Maj3\", ...]\n */\n\nexport var chord = dictionary(cdata);\nexport var pcset = combine(scale, chord);","map":null,"metadata":{},"sourceType":"module"}