{"ast":null,"code":"'use strict';\n\nvar bits = require('bit-twiddle');\n\nvar dup = require('dup'); //Legacy pool support\n\n\nif (!global.__TYPEDARRAY_POOL) {\n  global.__TYPEDARRAY_POOL = {\n    UINT8: dup([32, 0]),\n    UINT16: dup([32, 0]),\n    UINT32: dup([32, 0]),\n    INT8: dup([32, 0]),\n    INT16: dup([32, 0]),\n    INT32: dup([32, 0]),\n    FLOAT: dup([32, 0]),\n    DOUBLE: dup([32, 0]),\n    DATA: dup([32, 0]),\n    UINT8C: dup([32, 0]),\n    BUFFER: dup([32, 0])\n  };\n}\n\nvar hasUint8C = typeof Uint8ClampedArray !== 'undefined';\nvar POOL = global.__TYPEDARRAY_POOL; //Upgrade pool\n\nif (!POOL.UINT8C) {\n  POOL.UINT8C = dup([32, 0]);\n}\n\nif (!POOL.BUFFER) {\n  POOL.BUFFER = dup([32, 0]);\n} //New technique: Only allocate from ArrayBufferView and Buffer\n\n\nvar DATA = POOL.DATA,\n    BUFFER = POOL.BUFFER;\n\nexports.free = function free(array) {\n  if (Buffer.isBuffer(array)) {\n    BUFFER[bits.log2(array.length)].push(array);\n  } else {\n    if (Object.prototype.toString.call(array) !== '[object ArrayBuffer]') {\n      array = array.buffer;\n    }\n\n    if (!array) {\n      return;\n    }\n\n    var n = array.length || array.byteLength;\n    var log_n = bits.log2(n) | 0;\n    DATA[log_n].push(array);\n  }\n};\n\nfunction freeArrayBuffer(buffer) {\n  if (!buffer) {\n    return;\n  }\n\n  var n = buffer.length || buffer.byteLength;\n  var log_n = bits.log2(n);\n  DATA[log_n].push(buffer);\n}\n\nfunction freeTypedArray(array) {\n  freeArrayBuffer(array.buffer);\n}\n\nexports.freeUint8 = exports.freeUint16 = exports.freeUint32 = exports.freeInt8 = exports.freeInt16 = exports.freeInt32 = exports.freeFloat32 = exports.freeFloat = exports.freeFloat64 = exports.freeDouble = exports.freeUint8Clamped = exports.freeDataView = freeTypedArray;\nexports.freeArrayBuffer = freeArrayBuffer;\n\nexports.freeBuffer = function freeBuffer(array) {\n  BUFFER[bits.log2(array.length)].push(array);\n};\n\nexports.malloc = function malloc(n, dtype) {\n  if (dtype === undefined || dtype === 'arraybuffer') {\n    return mallocArrayBuffer(n);\n  } else {\n    switch (dtype) {\n      case 'uint8':\n        return mallocUint8(n);\n\n      case 'uint16':\n        return mallocUint16(n);\n\n      case 'uint32':\n        return mallocUint32(n);\n\n      case 'int8':\n        return mallocInt8(n);\n\n      case 'int16':\n        return mallocInt16(n);\n\n      case 'int32':\n        return mallocInt32(n);\n\n      case 'float':\n      case 'float32':\n        return mallocFloat(n);\n\n      case 'double':\n      case 'float64':\n        return mallocDouble(n);\n\n      case 'uint8_clamped':\n        return mallocUint8Clamped(n);\n\n      case 'buffer':\n        return mallocBuffer(n);\n\n      case 'data':\n      case 'dataview':\n        return mallocDataView(n);\n\n      default:\n        return null;\n    }\n  }\n\n  return null;\n};\n\nfunction mallocArrayBuffer(n) {\n  var n = bits.nextPow2(n);\n  var log_n = bits.log2(n);\n  var d = DATA[log_n];\n\n  if (d.length > 0) {\n    return d.pop();\n  }\n\n  return new ArrayBuffer(n);\n}\n\nexports.mallocArrayBuffer = mallocArrayBuffer;\n\nfunction mallocUint8(n) {\n  return new Uint8Array(mallocArrayBuffer(n), 0, n);\n}\n\nexports.mallocUint8 = mallocUint8;\n\nfunction mallocUint16(n) {\n  return new Uint16Array(mallocArrayBuffer(2 * n), 0, n);\n}\n\nexports.mallocUint16 = mallocUint16;\n\nfunction mallocUint32(n) {\n  return new Uint32Array(mallocArrayBuffer(4 * n), 0, n);\n}\n\nexports.mallocUint32 = mallocUint32;\n\nfunction mallocInt8(n) {\n  return new Int8Array(mallocArrayBuffer(n), 0, n);\n}\n\nexports.mallocInt8 = mallocInt8;\n\nfunction mallocInt16(n) {\n  return new Int16Array(mallocArrayBuffer(2 * n), 0, n);\n}\n\nexports.mallocInt16 = mallocInt16;\n\nfunction mallocInt32(n) {\n  return new Int32Array(mallocArrayBuffer(4 * n), 0, n);\n}\n\nexports.mallocInt32 = mallocInt32;\n\nfunction mallocFloat(n) {\n  return new Float32Array(mallocArrayBuffer(4 * n), 0, n);\n}\n\nexports.mallocFloat32 = exports.mallocFloat = mallocFloat;\n\nfunction mallocDouble(n) {\n  return new Float64Array(mallocArrayBuffer(8 * n), 0, n);\n}\n\nexports.mallocFloat64 = exports.mallocDouble = mallocDouble;\n\nfunction mallocUint8Clamped(n) {\n  if (hasUint8C) {\n    return new Uint8ClampedArray(mallocArrayBuffer(n), 0, n);\n  } else {\n    return mallocUint8(n);\n  }\n}\n\nexports.mallocUint8Clamped = mallocUint8Clamped;\n\nfunction mallocDataView(n) {\n  return new DataView(mallocArrayBuffer(n), 0, n);\n}\n\nexports.mallocDataView = mallocDataView;\n\nfunction mallocBuffer(n) {\n  n = bits.nextPow2(n);\n  var log_n = bits.log2(n);\n  var cache = BUFFER[log_n];\n\n  if (cache.length > 0) {\n    return cache.pop();\n  }\n\n  return new Buffer(n);\n}\n\nexports.mallocBuffer = mallocBuffer;\n\nexports.clearCache = function clearCache() {\n  for (var i = 0; i < 32; ++i) {\n    POOL.UINT8[i].length = 0;\n    POOL.UINT16[i].length = 0;\n    POOL.UINT32[i].length = 0;\n    POOL.INT8[i].length = 0;\n    POOL.INT16[i].length = 0;\n    POOL.INT32[i].length = 0;\n    POOL.FLOAT[i].length = 0;\n    POOL.DOUBLE[i].length = 0;\n    POOL.UINT8C[i].length = 0;\n    DATA[i].length = 0;\n    BUFFER[i].length = 0;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}