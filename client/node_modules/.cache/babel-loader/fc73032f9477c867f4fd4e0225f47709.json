{"ast":null,"code":"/**\n * [![npm version](https://img.shields.io/npm/v/tonal-array.svg?style=flat-square)](https://www.npmjs.com/package/tonal-array)\n *\n * Tonal array utilities. Create ranges, sort notes, ...\n *\n * @example\n * import * as Array;\n * Array.sort([\"f\", \"a\", \"c\"]) // => [\"C\", \"F\", \"A\"]\n *\n * @example\n * const Array = require(\"tonal-array\")\n * Array.range(1, 4) // => [1, 2, 3, 4]\n *\n * @module Array\n */\nimport { props, name } from \"tonal-note\"; // ascending range\n\nfunction ascR(b, n) {\n  for (var a = []; n--; a[n] = n + b) {\n    ;\n  }\n\n  return a;\n} // descending range\n\n\nfunction descR(b, n) {\n  for (var a = []; n--; a[n] = b - n) {\n    ;\n  }\n\n  return a;\n}\n/**\n * Create a numeric range\n *\n * @param {Number} from\n * @param {Number} to\n * @return {Array}\n *\n * @example\n * Array.range(-2, 2) // => [-2, -1, 0, 1, 2]\n * Array.range(2, -2) // => [2, 1, 0, -1, -2]\n */\n\n\nexport function range(a, b) {\n  return a === null || b === null ? [] : a < b ? ascR(a, b - a + 1) : descR(a, a - b + 1);\n}\n/**\n *\n * Rotates a list a number of times. It\"s completly agnostic about the\n * contents of the list.\n *\n * @param {Integer} times - the number of rotations\n * @param {Array} array\n * @return {Array} the rotated array\n * @example\n * Array.rotate(1, [1, 2, 3]) // => [2, 3, 1]\n */\n\nexport function rotate(times, arr) {\n  var len = arr.length;\n  var n = (times % len + len) % len;\n  return arr.slice(n, len).concat(arr.slice(0, n));\n}\n/**\n * Return a copy of the array with the null values removed\n * @function\n * @param {Array} array\n * @return {Array}\n *\n * @example\n * Array.compact([\"a\", \"b\", null, \"c\"]) // => [\"a\", \"b\", \"c\"]\n */\n\nexport var compact = function compact(arr) {\n  return arr.filter(function (n) {\n    return n === 0 || n;\n  });\n}; // a function that get note heights (with negative number for pitch classes)\n\nvar height = function height(name) {\n  var m = props(name).midi;\n  return m !== null ? m : props(name + \"-100\").midi;\n};\n/**\n * Sort an array of notes in ascending order\n *\n * @param {String|Array} notes\n * @return {Array} sorted array of notes\n */\n\n\nexport function sort(src) {\n  return compact(src.map(name)).sort(function (a, b) {\n    return height(a) > height(b);\n  });\n}\n/**\n * Get sorted notes with duplicates removed\n *\n * @function\n * @param {Array} notes\n */\n\nexport function unique(arr) {\n  return sort(arr).filter(function (n, i, a) {\n    return i === 0 || n !== a[i - 1];\n  });\n}\n/**\n * Randomizes the order of the specified array in-place, using the Fisherâ€“Yates shuffle.\n *\n * @private\n * @function\n * @param {Array|String} arr - the array\n * @return {Array} the shuffled array\n *\n * @example\n * Array.shuffle([\"C\", \"D\", \"E\", \"F\"])\n */\n\nexport var shuffle = function shuffle(arr, rnd) {\n  if (rnd === void 0) rnd = Math.random;\n  var i, t;\n  var m = arr.length;\n\n  while (m) {\n    i = rnd() * m-- | 0;\n    t = arr[m];\n    arr[m] = arr[i];\n    arr[i] = t;\n  }\n\n  return arr;\n};\n/**\n * Get all permutations of an array\n * http://stackoverflow.com/questions/9960908/permutations-in-javascript\n *\n * @param {Array} array - the array\n * @return {Array<Array>} an array with all the permutations\n */\n\nexport var permutations = function permutations(arr) {\n  if (arr.length === 0) {\n    return [[]];\n  }\n\n  return permutations(arr.slice(1)).reduce(function (acc, perm) {\n    return acc.concat(arr.map(function (e, pos) {\n      var newPerm = perm.slice();\n      newPerm.splice(pos, 0, arr[0]);\n      return newPerm;\n    }));\n  }, []);\n};","map":null,"metadata":{},"sourceType":"module"}