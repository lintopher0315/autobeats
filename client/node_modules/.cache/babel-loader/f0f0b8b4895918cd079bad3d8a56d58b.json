{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tf = require(\"@tensorflow/tfjs\");\n\nvar DATA_TIME_QUANTIZE_RATE = 31.25;\nvar DATA_MAX_DISCRETE_TIMES = 32;\nvar RNN_NLAYERS = 2;\nvar RNN_NUNITS = 128;\nvar NUM_BUTTONS = 8;\nvar NUM_PIANOKEYS = 88;\n\nfunction createZeroState() {\n  var state = {\n    c: [],\n    h: []\n  };\n\n  for (var i = 0; i < RNN_NLAYERS; ++i) {\n    state.c.push(tf.zeros([1, RNN_NUNITS], 'float32'));\n    state.h.push(tf.zeros([1, RNN_NUNITS], 'float32'));\n  }\n\n  return state;\n}\n\nfunction disposeState(state) {\n  for (var i = 0; i < RNN_NLAYERS; ++i) {\n    state.c[i].dispose();\n    state.h[i].dispose();\n  }\n}\n\nfunction sampleLogits(logits, temperature, seed) {\n  temperature = temperature !== undefined ? temperature : 1.;\n\n  if (temperature < 0. || temperature > 1.) {\n    throw new Error('Invalid temperature specified');\n  }\n\n  var result;\n\n  if (temperature === 0) {\n    result = tf.argMax(logits, 0);\n  } else {\n    if (temperature < 1) {\n      logits = tf.div(logits, tf.scalar(temperature, 'float32'));\n    }\n\n    var scores = tf.reshape(tf.softmax(logits, 0), [1, -1]);\n    var sample = tf.multinomial(scores, 1, seed, true);\n    result = tf.reshape(sample, []);\n  }\n\n  return result;\n}\n\nvar PianoGenie = function () {\n  function PianoGenie(checkpointURL) {\n    this.checkpointURL = checkpointURL;\n    this.initialized = false;\n  }\n\n  PianoGenie.prototype.isInitialized = function () {\n    return this.initialized;\n  };\n\n  PianoGenie.prototype.initialize = function (staticVars) {\n    return __awaiter(this, void 0, void 0, function () {\n      var vars, _loop_1, this_1, i;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this.initialized) {\n              this.dispose();\n            }\n\n            if (this.checkpointURL === undefined && staticVars === undefined) {\n              throw new Error('Need to specify either URI or static variables');\n            }\n\n            if (!(staticVars === undefined)) return [3, 2];\n            return [4, fetch(this.checkpointURL + \"/weights_manifest.json\").then(function (response) {\n              return response.json();\n            }).then(function (manifest) {\n              return tf.io.loadWeights(manifest, _this.checkpointURL);\n            })];\n\n          case 1:\n            vars = _a.sent();\n            this.modelVars = vars;\n            return [3, 3];\n\n          case 2:\n            this.modelVars = staticVars;\n            _a.label = 3;\n\n          case 3:\n            this.decLSTMCells = [];\n            this.decForgetBias = tf.scalar(1, 'float32');\n\n            _loop_1 = function _loop_1(i) {\n              var cellPrefix = \"phero_model/decoder/rnn/rnn/multi_rnn_cell/cell_\" + i + \"/lstm_cell/\";\n              this_1.decLSTMCells.push(function (data, c, h) {\n                return tf.basicLSTMCell(_this.decForgetBias, _this.modelVars[cellPrefix + 'kernel'], _this.modelVars[cellPrefix + 'bias'], data, c, h);\n              });\n            };\n\n            this_1 = this;\n\n            for (i = 0; i < RNN_NLAYERS; ++i) {\n              _loop_1(i);\n            }\n\n            this.resetState();\n            this.initialized = true;\n            this.next(0);\n            this.resetState();\n            return [2];\n        }\n      });\n    });\n  };\n\n  PianoGenie.prototype.next = function (button, temperature, seed) {\n    var sampleFunc = function sampleFunc(logits) {\n      return sampleLogits(logits, temperature, seed);\n    };\n\n    return this.nextWithCustomSamplingFunction(button, sampleFunc);\n  };\n\n  PianoGenie.prototype.nextFromKeyWhitelist = function (button, keyWhitelist, temperature, seed) {\n    var sampleFunc = function sampleFunc(logits) {\n      var keySubsetTensor = tf.tensor1d(keyWhitelist, 'int32');\n      logits = tf.gather(logits, keySubsetTensor);\n      var result = sampleLogits(logits, temperature, seed);\n      var result1d = tf.gather(keySubsetTensor, tf.reshape(result, [1]));\n      result = tf.reshape(result1d, []);\n      return result;\n    };\n\n    return this.nextWithCustomSamplingFunction(button, sampleFunc);\n  };\n\n  PianoGenie.prototype.nextWithCustomSamplingFunction = function (button, sampleFunc) {\n    var lastState = this.lastState;\n    var lastOutput = this.lastOutput;\n    var lastTime = this.lastTime;\n    var time = new Date();\n    var deltaTime;\n\n    if (this.deltaTimeOverride === undefined) {\n      deltaTime = (time.getTime() - lastTime.getTime()) / 1000;\n    } else {\n      deltaTime = this.deltaTimeOverride;\n      this.deltaTimeOverride = undefined;\n    }\n\n    var _a = this.evaluateModelAndSample(button, lastState, lastOutput, deltaTime, sampleFunc),\n        state = _a[0],\n        output = _a[1];\n\n    disposeState(this.lastState);\n    this.lastState = state;\n    this.lastOutput = output;\n    this.lastTime = time;\n    return output;\n  };\n\n  PianoGenie.prototype.resetState = function () {\n    if (this.lastState !== undefined) {\n      disposeState(this.lastState);\n    }\n\n    this.lastState = createZeroState();\n    this.lastOutput = -1;\n    this.lastTime = new Date();\n    this.lastTime.setSeconds(this.lastTime.getSeconds() - 100000);\n  };\n\n  PianoGenie.prototype.dispose = function () {\n    var _this = this;\n\n    if (!this.initialized) {\n      return;\n    }\n\n    Object.keys(this.modelVars).forEach(function (name) {\n      return _this.modelVars[name].dispose();\n    });\n    this.decForgetBias.dispose();\n    disposeState(this.lastState);\n    this.initialized = false;\n  };\n\n  PianoGenie.prototype.overrideLastOutput = function (lastOutput) {\n    this.lastOutput = lastOutput;\n  };\n\n  PianoGenie.prototype.overrideDeltaTime = function (deltaTime) {\n    this.deltaTimeOverride = deltaTime;\n  };\n\n  PianoGenie.prototype.evaluateModelAndSample = function (button, lastState, lastOutput, deltaTime, sampleFunc) {\n    var _this = this;\n\n    if (button < 0 || button >= NUM_BUTTONS) {\n      throw new Error('Invalid button specified.');\n    }\n\n    if (!this.initialized) {\n      throw new Error('Model is not initialized.');\n    }\n\n    var _a = tf.tidy(function () {\n      var decFeatsArr = [];\n      var buttonTensor = tf.tensor2d([button], [1, 1], 'float32');\n      var buttonScaled = tf.sub(tf.mul(2., tf.div(buttonTensor, NUM_BUTTONS - 1)), 1);\n      decFeatsArr.push(buttonScaled);\n      var lastOutputTensor = tf.tensor1d([lastOutput], 'int32');\n      var lastOutputInc = tf.add(lastOutputTensor, tf.scalar(1, 'int32'));\n      var lastOutputOh = tf.cast(tf.oneHot(lastOutputInc, NUM_PIANOKEYS + 1), 'float32');\n      decFeatsArr.push(lastOutputOh);\n      var deltaTimeTensor = tf.tensor1d([deltaTime], 'float32');\n      var deltaTimeBin = tf.round(tf.mul(deltaTimeTensor, DATA_TIME_QUANTIZE_RATE));\n      var deltaTimeTrunc = tf.minimum(deltaTimeBin, DATA_MAX_DISCRETE_TIMES);\n      var deltaTimeInt = tf.cast(tf.add(deltaTimeTrunc, 1e-4), 'int32');\n      var deltaTimeOh = tf.oneHot(deltaTimeInt, DATA_MAX_DISCRETE_TIMES + 1);\n      var deltaTimeOhFloat = tf.cast(deltaTimeOh, 'float32');\n      decFeatsArr.push(deltaTimeOhFloat);\n      var rnnInput = tf.concat(decFeatsArr, 1);\n      rnnInput = tf.matMul(rnnInput, _this.modelVars['phero_model/decoder/rnn_input/dense/kernel']);\n      rnnInput = tf.add(rnnInput, _this.modelVars['phero_model/decoder/rnn_input/dense/bias']);\n\n      var _a = tf.multiRNNCell(_this.decLSTMCells, rnnInput, lastState.c, lastState.h),\n          c = _a[0],\n          h = _a[1];\n\n      var state = {\n        c: c,\n        h: h\n      };\n      var logits = tf.matMul(h[RNN_NLAYERS - 1], _this.modelVars['phero_model/decoder/pitches/dense/kernel']);\n      logits = tf.add(logits, _this.modelVars['phero_model/decoder/pitches/dense/bias']);\n      var logits1D = tf.reshape(logits, [NUM_PIANOKEYS]);\n      var sample = sampleFunc(logits1D);\n      var output = sample.dataSync()[0];\n      return [state, output];\n    }),\n        state = _a[0],\n        output = _a[1];\n\n    return [state, output];\n  };\n\n  return PianoGenie;\n}();\n\nexports.PianoGenie = PianoGenie;","map":null,"metadata":{},"sourceType":"script"}