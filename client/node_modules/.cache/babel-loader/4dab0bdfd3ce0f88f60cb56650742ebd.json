{"ast":null,"code":"/**\n * Return the index of the element at or before the given time\n */\nfunction findElement(array, time) {\n  var beginning = 0;\n  var len = array.length;\n  var end = len;\n\n  if (len > 0 && array[len - 1].time <= time) {\n    return len - 1;\n  }\n\n  while (beginning < end) {\n    // calculate the midpoint for roughly equal partition\n    var midPoint = Math.floor(beginning + (end - beginning) / 2);\n    var event = array[midPoint];\n    var nextEvent = array[midPoint + 1];\n\n    if (event.time === time) {\n      //choose the last one that has the same time\n      for (var i = midPoint; i < array.length; i++) {\n        var testEvent = array[i];\n\n        if (testEvent.time === time) {\n          midPoint = i;\n        }\n      }\n\n      return midPoint;\n    } else if (event.time < time && nextEvent.time > time) {\n      return midPoint;\n    } else if (event.time > time) {\n      //search lower\n      end = midPoint;\n    } else if (event.time < time) {\n      //search upper\n      beginning = midPoint + 1;\n    }\n  }\n\n  return -1;\n}\n/**\n * Does a binary search to insert the note\n * in the correct spot in the array\n * @param  {Array} array\n * @param  {Object} event\n * @param  {Number=} offset\n */\n\n\nfunction BinaryInsert(array, event) {\n  if (array.length) {\n    var index = findElement(array, event.time);\n    array.splice(index + 1, 0, event);\n  } else {\n    array.push(event);\n  }\n}\n\nexport { BinaryInsert };","map":null,"metadata":{},"sourceType":"module"}