{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Tone = require(\"tone\");\n\nvar protobuf_1 = require(\"../protobuf\");\n\nvar _1 = require(\".\");\n\nvar constants = require(\"./constants\");\n\nvar data_1 = require(\"./data\");\n\nvar soundfont = require(\"./soundfont\");\n\nfunction compareQuantizedNotes(a, b) {\n  if (a.quantizedStartStep < b.quantizedStartStep) {\n    return -1;\n  }\n\n  if (a.quantizedStartStep > b.quantizedStartStep) {\n    return 1;\n  }\n\n  if (a.pitch < b.pitch) {\n    return -1;\n  }\n\n  return 1;\n}\n\nvar BasePlayerCallback = function () {\n  function BasePlayerCallback() {}\n\n  return BasePlayerCallback;\n}();\n\nexports.BasePlayerCallback = BasePlayerCallback;\n\nvar BasePlayer = function () {\n  function BasePlayer(playClick, callbackObject) {\n    if (playClick === void 0) {\n      playClick = false;\n    }\n\n    this.playClick = playClick;\n    this.callbackObject = callbackObject;\n    this.desiredQPM = undefined;\n  }\n\n  BasePlayer.prototype.setTempo = function (qpm) {\n    this.desiredQPM = qpm;\n\n    if (Tone.Transport.state === 'started') {\n      Tone.Transport.bpm.value = qpm;\n    }\n  };\n\n  BasePlayer.prototype.makeClickSequence = function (seq) {\n    var clickSeq = _1.sequences.clone(seq);\n\n    var sixteenthEnds = clickSeq.notes.map(function (n) {\n      return n.quantizedEndStep;\n    });\n    var lastSixteenth = Math.max.apply(Math, sixteenthEnds);\n\n    for (var i = 0; i < lastSixteenth; i += 4) {\n      var click = {\n        pitch: i % 16 === 0 ? constants.LO_CLICK_PITCH : constants.HI_CLICK_PITCH,\n        quantizedStartStep: i,\n        isDrum: true,\n        quantizedEndStep: i + 1\n      };\n      clickSeq.notes.push(click);\n    }\n\n    clickSeq.notes.sort(compareQuantizedNotes);\n    return clickSeq;\n  };\n\n  BasePlayer.prototype.resumeContext = function () {\n    Tone.context.resume();\n  };\n\n  BasePlayer.prototype.start = function (seq, qpm) {\n    var _this = this;\n\n    this.resumeContext();\n\n    var isQuantized = _1.sequences.isQuantizedSequence(seq);\n\n    if (this.playClick && isQuantized) {\n      seq = this.makeClickSequence(seq);\n    }\n\n    if (qpm) {\n      Tone.Transport.bpm.value = qpm;\n    } else if (seq.tempos && seq.tempos.length > 0 && seq.tempos[0].qpm > 0) {\n      Tone.Transport.bpm.value = seq.tempos[0].qpm;\n    } else {\n      Tone.Transport.bpm.value = constants.DEFAULT_QUARTERS_PER_MINUTE;\n    }\n\n    if (isQuantized) {\n      seq = _1.sequences.unquantizeSequence(seq, qpm);\n    } else if (qpm) {\n      throw new Error('Cannot specify a `qpm` for a non-quantized sequence.');\n    }\n\n    this.currentPart = new Tone.Part(function (t, n) {\n      if (_this.playClick || n.pitch !== constants.LO_CLICK_PITCH && n.pitch !== constants.HI_CLICK_PITCH) {\n        _this.playNote(t, n);\n      }\n\n      if (_this.callbackObject) {\n        Tone.Draw.schedule(function () {\n          _this.callbackObject.run(n, t);\n        }, t);\n      }\n    }, seq.notes.map(function (n) {\n      return [n.startTime, n];\n    }));\n\n    if (this.desiredQPM) {\n      Tone.Transport.bpm.value = this.desiredQPM;\n    }\n\n    this.currentPart.start();\n\n    if (Tone.Transport.state !== 'started') {\n      Tone.Transport.start();\n    }\n\n    return new Promise(function (resolve) {\n      _this.scheduledStop = Tone.Transport.schedule(function () {\n        _this.stop();\n\n        resolve();\n\n        if (_this.callbackObject) {\n          _this.callbackObject.stop();\n        }\n      }, \"+\" + seq.totalTime);\n    });\n  };\n\n  BasePlayer.prototype.stop = function () {\n    if (this.currentPart) {\n      this.currentPart.stop();\n      Tone.Transport.stop();\n      this.currentPart = null;\n    }\n\n    Tone.Transport.clear(this.scheduledStop);\n    this.scheduledStop = undefined;\n    this.desiredQPM = undefined;\n  };\n\n  BasePlayer.prototype.pause = function () {\n    Tone.Transport.pause();\n  };\n\n  BasePlayer.prototype.resume = function () {\n    Tone.Transport.start();\n  };\n\n  BasePlayer.prototype.isPlaying = function () {\n    return !!this.currentPart;\n  };\n\n  BasePlayer.prototype.getPlayState = function () {\n    return Tone.Transport.state;\n  };\n\n  return BasePlayer;\n}();\n\nexports.BasePlayer = BasePlayer;\n\nvar DrumKit = function () {\n  function DrumKit() {\n    var _this = this;\n\n    this.DRUM_PITCH_TO_CLASS = new Map();\n    this.kick = new Tone.MembraneSynth().toMaster();\n    this.tomLow = new Tone.MembraneSynth({\n      pitchDecay: 0.008,\n      envelope: {\n        attack: 0.01,\n        decay: 0.5,\n        sustain: 0\n      }\n    }).toMaster();\n    this.tomMid = new Tone.MembraneSynth({\n      pitchDecay: 0.008,\n      envelope: {\n        attack: 0.01,\n        decay: 0.5,\n        sustain: 0\n      }\n    }).toMaster();\n    this.tomHigh = new Tone.MembraneSynth({\n      pitchDecay: 0.008,\n      envelope: {\n        attack: 0.01,\n        decay: 0.5,\n        sustain: 0\n      }\n    }).toMaster();\n    this.closedHihat = new Tone.MetalSynth({\n      frequency: 400,\n      envelope: {\n        attack: 0.001,\n        decay: 0.1,\n        release: 0.8\n      },\n      harmonicity: 5.1,\n      modulationIndex: 32,\n      resonance: 4000,\n      octaves: 1\n    }).toMaster();\n    this.openHihat = new Tone.MetalSynth({\n      frequency: 400,\n      envelope: {\n        attack: 0.001,\n        decay: 0.5,\n        release: 0.8,\n        sustain: 1\n      },\n      harmonicity: 5.1,\n      modulationIndex: 32,\n      resonance: 4000,\n      octaves: 1\n    }).toMaster();\n    this.ride = new Tone.MetalSynth().toMaster();\n    this.crash = new Tone.MetalSynth({\n      frequency: 300,\n      envelope: {\n        attack: 0.001,\n        decay: 1,\n        release: 3\n      },\n      harmonicity: 5.1,\n      modulationIndex: 64,\n      resonance: 4000,\n      octaves: 1.5\n    }).toMaster();\n    this.snare = new Tone.NoiseSynth({\n      noise: {\n        type: 'white'\n      },\n      envelope: {\n        attack: 0.005,\n        decay: 0.05,\n        sustain: 0.1,\n        release: 0.4\n      }\n    }).toMaster();\n    this.loClick = new Tone.MembraneSynth({\n      pitchDecay: 0.008,\n      envelope: {\n        attack: 0.001,\n        decay: 0.3,\n        sustain: 0\n      }\n    }).toMaster();\n    this.hiClick = new Tone.MembraneSynth({\n      pitchDecay: 0.008,\n      envelope: {\n        attack: 0.001,\n        decay: 0.3,\n        sustain: 0\n      }\n    }).toMaster();\n    this.pitchPlayers = [function (time, velocity) {\n      if (velocity === void 0) {\n        velocity = 1;\n      }\n\n      return _this.kick.triggerAttackRelease('C2', '8n', time, velocity);\n    }, function (time, velocity) {\n      if (velocity === void 0) {\n        velocity = 1;\n      }\n\n      return _this.snare.triggerAttackRelease('16n', time, velocity);\n    }, function (time, velocity) {\n      if (velocity === void 0) {\n        velocity = 1;\n      }\n\n      return _this.closedHihat.triggerAttack(time, 0.3, velocity);\n    }, function (time, velocity) {\n      if (velocity === void 0) {\n        velocity = 1;\n      }\n\n      return _this.openHihat.triggerAttack(time, 0.3, velocity);\n    }, function (time, velocity) {\n      if (velocity === void 0) {\n        velocity = 0.5;\n      }\n\n      return _this.tomLow.triggerAttack('G3', time, velocity);\n    }, function (time, velocity) {\n      if (velocity === void 0) {\n        velocity = 0.5;\n      }\n\n      return _this.tomMid.triggerAttack('C4', time, velocity);\n    }, function (time, velocity) {\n      if (velocity === void 0) {\n        velocity = 0.5;\n      }\n\n      return _this.tomHigh.triggerAttack('F4', time, velocity);\n    }, function (time, velocity) {\n      if (velocity === void 0) {\n        velocity = 1;\n      }\n\n      return _this.crash.triggerAttack(time, 1.0, velocity);\n    }, function (time, velocity) {\n      if (velocity === void 0) {\n        velocity = 1;\n      }\n\n      return _this.ride.triggerAttack(time, 0.5, velocity);\n    }, function (time, velocity) {\n      if (velocity === void 0) {\n        velocity = 0.5;\n      }\n\n      return _this.loClick.triggerAttack('G5', time, velocity);\n    }, function (time, velocity) {\n      if (velocity === void 0) {\n        velocity = 0.5;\n      }\n\n      return _this.hiClick.triggerAttack('C6', time, velocity);\n    }];\n\n    var _loop_1 = function _loop_1(c) {\n      data_1.DEFAULT_DRUM_PITCH_CLASSES[c].forEach(function (p) {\n        _this.DRUM_PITCH_TO_CLASS.set(p, c);\n      });\n    };\n\n    for (var c = 0; c < data_1.DEFAULT_DRUM_PITCH_CLASSES.length; ++c) {\n      _loop_1(c);\n    }\n\n    this.DRUM_PITCH_TO_CLASS.set(constants.LO_CLICK_PITCH, constants.LO_CLICK_CLASS);\n    this.DRUM_PITCH_TO_CLASS.set(constants.HI_CLICK_PITCH, constants.HI_CLICK_CLASS);\n  }\n\n  DrumKit.getInstance = function () {\n    if (!DrumKit.instance) {\n      DrumKit.instance = new DrumKit();\n    }\n\n    return DrumKit.instance;\n  };\n\n  DrumKit.prototype.playNote = function (pitch, time, velocity) {\n    this.pitchPlayers[this.DRUM_PITCH_TO_CLASS.get(pitch)](time, velocity);\n  };\n\n  return DrumKit;\n}();\n\nvar Player = function (_super) {\n  __extends(Player, _super);\n\n  function Player() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.synths = new Map();\n    _this.drumKit = DrumKit.getInstance();\n    return _this;\n  }\n\n  Player.prototype.playNote = function (time, note) {\n    var velocity = note.hasOwnProperty('velocity') ? note.velocity / constants.MAX_MIDI_VELOCITY : undefined;\n\n    if (note.isDrum) {\n      this.drumKit.playNote(note.pitch, time, velocity);\n    } else {\n      var freq = new Tone.Frequency(note.pitch, 'midi');\n      var dur = note.endTime - note.startTime;\n      this.getSynth(note.instrument, note.program).triggerAttackRelease(freq, dur, time, velocity);\n    }\n  };\n\n  Player.prototype.getSynth = function (instrument, program) {\n    if (this.synths.has(instrument)) {\n      return this.synths.get(instrument);\n    } else if (program !== undefined && program >= 32 && program <= 39) {\n      var bass = new Tone.Synth({\n        oscillator: {\n          type: 'triangle'\n        }\n      }).toMaster();\n      bass.volume.value = 5;\n      this.synths.set(instrument, bass);\n    } else {\n      this.synths.set(instrument, new Tone.PolySynth(10).toMaster());\n    }\n\n    return this.synths.get(instrument);\n  };\n\n  Player.tone = Tone;\n  return Player;\n}(BasePlayer);\n\nexports.Player = Player;\n\nvar SoundFontPlayer = function (_super) {\n  __extends(SoundFontPlayer, _super);\n\n  function SoundFontPlayer(soundFontURL, output, programOutputs, drumOutputs, callbackObject) {\n    if (output === void 0) {\n      output = Tone.Master;\n    }\n\n    var _this = _super.call(this, false, callbackObject) || this;\n\n    _this.soundFont = new soundfont.SoundFont(soundFontURL);\n    _this.output = output;\n    _this.programOutputs = programOutputs;\n    _this.drumOutputs = drumOutputs;\n    return _this;\n  }\n\n  SoundFontPlayer.prototype.loadSamples = function (seq) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4, this.soundFont.loadSamples(seq.notes.map(function (note) {\n              return {\n                pitch: note.pitch,\n                velocity: note.velocity,\n                program: note.program || 0,\n                isDrum: note.isDrum || false\n              };\n            }))];\n\n          case 1:\n            _a.sent();\n\n            return [2];\n        }\n      });\n    });\n  };\n\n  SoundFontPlayer.prototype.loadAllSamples = function (program, isDrum) {\n    if (program === void 0) {\n      program = 0;\n    }\n\n    if (isDrum === void 0) {\n      isDrum = false;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var ns, min, max, i, j;\n      return __generator(this, function (_a) {\n        ns = protobuf_1.NoteSequence.create();\n        min = isDrum ? constants.MIN_DRUM_PITCH : constants.MIN_PIANO_PITCH;\n        max = isDrum ? constants.MAX_DRUM_PITCH : constants.MAX_PIANO_PITCH;\n\n        for (i = min; i <= max; i++) {\n          for (j = constants.MIN_MIDI_VELOCITY; j < constants.MAX_MIDI_VELOCITY; j++) {\n            ns.notes.push({\n              pitch: i,\n              velocity: j,\n              program: program,\n              isDrum: isDrum\n            });\n          }\n        }\n\n        return [2, this.loadSamples(ns)];\n      });\n    });\n  };\n\n  SoundFontPlayer.prototype.resumeContext = function () {\n    Tone.context.resume();\n  };\n\n  SoundFontPlayer.prototype.start = function (seq, qpm) {\n    var _this = this;\n\n    this.resumeContext();\n    return this.loadSamples(seq).then(function () {\n      return _super.prototype.start.call(_this, seq, qpm);\n    });\n  };\n\n  SoundFontPlayer.prototype.playNote = function (time, note) {\n    this.soundFont.playNote(note.pitch, note.velocity, time, note.endTime - note.startTime, note.program, note.isDrum, this.getAudioNodeOutput(note));\n  };\n\n  SoundFontPlayer.prototype.playNoteDown = function (note) {\n    this.soundFont.playNoteDown(note.pitch, note.velocity, note.program, note.isDrum, this.getAudioNodeOutput(note));\n  };\n\n  SoundFontPlayer.prototype.playNoteUp = function (note) {\n    this.soundFont.playNoteUp(note.pitch, note.velocity, note.program, note.isDrum, this.getAudioNodeOutput(note));\n  };\n\n  SoundFontPlayer.prototype.getAudioNodeOutput = function (note) {\n    var output = this.output;\n\n    if (this.programOutputs && !note.isDrum) {\n      if (this.programOutputs.has(note.program)) {\n        output = this.programOutputs.get(note.program);\n      }\n    } else if (this.drumOutputs && note.isDrum) {\n      if (this.drumOutputs.has(note.pitch)) {\n        output = this.drumOutputs.get(note.pitch);\n      }\n    }\n\n    return output;\n  };\n\n  return SoundFontPlayer;\n}(BasePlayer);\n\nexports.SoundFontPlayer = SoundFontPlayer;\n\nvar PlayerWithClick = function (_super) {\n  __extends(PlayerWithClick, _super);\n\n  function PlayerWithClick(callbackObject) {\n    return _super.call(this, true, callbackObject) || this;\n  }\n\n  return PlayerWithClick;\n}(Player);\n\nexports.PlayerWithClick = PlayerWithClick;\n\nvar MIDIPlayer = function (_super) {\n  __extends(MIDIPlayer, _super);\n\n  function MIDIPlayer(callbackObject) {\n    var _this = _super.call(this, false, callbackObject) || this;\n\n    _this.outputs = [];\n    _this.availableOutputs = [];\n    _this.NOTE_ON = 0x90;\n    _this.NOTE_OFF = 0x80;\n    return _this;\n  }\n\n  MIDIPlayer.prototype.requestMIDIAccess = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        if (navigator.requestMIDIAccess) {\n          return [2, new Promise(function (resolve, reject) {\n            navigator.requestMIDIAccess().then(function (midi) {\n              midi.addEventListener('statechange', function (event) {\n                return _this.initOutputs(midi);\n              });\n              resolve(_this.initOutputs(midi));\n            }, function (err) {\n              return console.log('Something went wrong', reject(err));\n            });\n          })];\n        } else {\n          return [2, null];\n        }\n\n        return [2];\n      });\n    });\n  };\n\n  MIDIPlayer.prototype.initOutputs = function (midi) {\n    var outputs = midi.outputs.values();\n\n    for (var output = outputs.next(); output && !output.done; output = outputs.next()) {\n      this.availableOutputs.push(output.value);\n    }\n\n    return this.availableOutputs;\n  };\n\n  MIDIPlayer.prototype.playNote = function (time, note) {\n    var velocity = note.velocity || 100;\n    var length = (note.endTime - note.startTime) * 1000;\n    var msgOn = [this.NOTE_ON, note.pitch, velocity];\n    var msgOff = [this.NOTE_OFF, note.pitch, velocity];\n    var outputs = this.outputs ? this.outputs : this.availableOutputs;\n\n    for (var i = 0; i < outputs.length; i++) {\n      this.sendMessageToOutput(outputs[i], msgOn);\n      this.sendMessageToOutput(outputs[i], msgOff, window.performance.now() + length);\n    }\n  };\n\n  MIDIPlayer.prototype.sendMessageToOutput = function (output, message, time) {\n    if (output) {\n      output.send(message, time);\n    }\n  };\n\n  MIDIPlayer.prototype.playNoteDown = function (note) {\n    var msgOn = [this.NOTE_ON, note.pitch, note.velocity];\n    var outputs = this.outputs ? this.outputs : this.availableOutputs;\n\n    for (var i = 0; i < outputs.length; i++) {\n      this.sendMessageToOutput(outputs[i], msgOn);\n    }\n  };\n\n  MIDIPlayer.prototype.playNoteUp = function (note) {\n    var msgOff = [this.NOTE_OFF, note.pitch, note.velocity];\n    var outputs = this.outputs ? this.outputs : this.availableOutputs;\n\n    for (var i = 0; i < outputs.length; i++) {\n      this.sendMessageToOutput(outputs[i], msgOff, note.endTime - note.startTime);\n    }\n  };\n\n  return MIDIPlayer;\n}(BasePlayer);\n\nexports.MIDIPlayer = MIDIPlayer;","map":null,"metadata":{},"sourceType":"script"}