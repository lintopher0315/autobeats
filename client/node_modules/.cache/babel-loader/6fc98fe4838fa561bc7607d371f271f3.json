{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Tone = require(\"tone\");\n\nvar constants = require(\"./constants\");\n\nvar Instrument = function () {\n  function Instrument(baseURL) {\n    this.FADE_SECONDS = 0.1;\n    this.baseURL = baseURL;\n    this.buffers = new Tone.Buffers([]);\n    this.sourceMap = new Map();\n    this.initialized = false;\n  }\n\n  Instrument.prototype.initialize = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4, fetch(this.baseURL + \"/instrument.json\").then(function (response) {\n              return response.json();\n            }).then(function (spec) {\n              _this.name = spec.name;\n              _this.minPitch = spec.minPitch;\n              _this.maxPitch = spec.maxPitch;\n              _this.durationSeconds = spec.durationSeconds;\n              _this.releaseSeconds = spec.releaseSeconds;\n              _this.percussive = spec.percussive;\n              _this.velocities = spec.velocities;\n              _this.initialized = true;\n            })];\n\n          case 1:\n            _a.sent();\n\n            return [2];\n        }\n      });\n    });\n  };\n\n  Instrument.prototype.sampleInfoToName = function (sampleInfo) {\n    if (this.velocities) {\n      return \"p\" + sampleInfo.pitch + \"_v\" + sampleInfo.velocity;\n    } else {\n      return \"p\" + sampleInfo.pitch;\n    }\n  };\n\n  Instrument.prototype.sampleNameToURL = function (name) {\n    return this.baseURL + \"/\" + name + \".mp3\";\n  };\n\n  Instrument.prototype.nearestVelocity = function (velocity) {\n    if (!this.velocities) {\n      return velocity;\n    }\n\n    if (!velocity) {\n      velocity = constants.DEFAULT_VELOCITY;\n    }\n\n    var bestVelocity = undefined;\n    var bestDistance = constants.MIDI_VELOCITIES;\n    this.velocities.forEach(function (v) {\n      var d = Math.abs(v - velocity);\n\n      if (d < bestDistance) {\n        bestVelocity = v;\n        bestDistance = d;\n      }\n    });\n    return bestVelocity;\n  };\n\n  Instrument.prototype.loadSamples = function (samples) {\n    return __awaiter(this, void 0, void 0, function () {\n      var nearestSampleNames, uniqueSampleNames, sampleNamesAndURLs;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!!this.initialized) return [3, 2];\n            return [4, this.initialize()];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            nearestSampleNames = samples.filter(function (info) {\n              if (info.pitch < _this.minPitch || info.pitch > _this.maxPitch) {\n                console.log(\"Pitch \" + info.pitch + \" is outside the valid range for \" + _this.name + \", ignoring.\");\n                return false;\n              } else {\n                return true;\n              }\n            }).map(function (info) {\n              return _this.sampleInfoToName({\n                pitch: info.pitch,\n                velocity: _this.nearestVelocity(info.velocity)\n              });\n            });\n            uniqueSampleNames = Array.from(new Set(nearestSampleNames)).filter(function (name) {\n              return !_this.buffers.has(name);\n            });\n            sampleNamesAndURLs = uniqueSampleNames.map(function (name) {\n              return {\n                name: name,\n                url: _this.sampleNameToURL(name)\n              };\n            });\n            if (!(sampleNamesAndURLs.length > 0)) return [3, 4];\n            sampleNamesAndURLs.forEach(function (nameAndURL) {\n              return _this.buffers.add(nameAndURL.name, nameAndURL.url);\n            });\n            return [4, new Promise(function (resolve) {\n              return Tone.Buffer.on('load', resolve);\n            })];\n\n          case 3:\n            _a.sent();\n\n            console.log(\"Loaded samples for \" + this.name + \".\");\n            _a.label = 4;\n\n          case 4:\n            return [2];\n        }\n      });\n    });\n  };\n\n  Instrument.prototype.playNote = function (pitch, velocity, startTime, duration, output) {\n    var buffer = this.getBuffer(pitch, velocity);\n\n    if (duration > this.durationSeconds) {\n      console.log(\"Requested note duration longer than sample duration: \" + duration + \" > \" + this.durationSeconds);\n    }\n\n    var source = new Tone.BufferSource(buffer).connect(output);\n    source.start(startTime, 0, undefined, 1, 0);\n\n    if (!this.percussive && duration < this.durationSeconds) {\n      var releaseSource = new Tone.BufferSource(buffer).connect(output);\n      source.stop(startTime + duration + this.FADE_SECONDS, this.FADE_SECONDS);\n      releaseSource.start(startTime + duration, this.durationSeconds, undefined, 1, this.FADE_SECONDS);\n    }\n  };\n\n  Instrument.prototype.playNoteDown = function (pitch, velocity, output) {\n    var buffer = this.getBuffer(pitch, velocity);\n    var source = new Tone.BufferSource(buffer).connect(output);\n    source.start(0, 0, undefined, 1, 0);\n\n    if (this.sourceMap.has(pitch)) {\n      this.sourceMap.get(pitch).stop(Tone.now() + this.FADE_SECONDS, this.FADE_SECONDS);\n    }\n\n    this.sourceMap.set(pitch, source);\n  };\n\n  Instrument.prototype.playNoteUp = function (pitch, velocity, output) {\n    if (!this.sourceMap.has(pitch)) {\n      return;\n    }\n\n    var buffer = this.getBuffer(pitch, velocity);\n    var releaseSource = new Tone.BufferSource(buffer).connect(output);\n    releaseSource.start(0, this.durationSeconds, undefined, 1, this.FADE_SECONDS);\n    this.sourceMap.get(pitch).stop(Tone.now() + this.FADE_SECONDS, this.FADE_SECONDS);\n    this.sourceMap.delete(pitch);\n  };\n\n  Instrument.prototype.getBuffer = function (pitch, velocity) {\n    if (!this.initialized) {\n      throw new Error('Instrument is not initialized.');\n    }\n\n    if (pitch < this.minPitch || pitch > this.maxPitch) {\n      console.log(\"Pitch \" + pitch + \" is outside the valid range for \" + this.name + \" (\" + this.minPitch + \"-\" + this.maxPitch + \")\");\n      return;\n    }\n\n    var name = this.sampleInfoToName({\n      pitch: pitch,\n      velocity: this.nearestVelocity(velocity)\n    });\n\n    if (!this.buffers.has(name)) {\n      throw new Error(\"Buffer not found for \" + this.name + \": \" + name);\n    }\n\n    var buffer = this.buffers.get(name);\n\n    if (!buffer.loaded) {\n      throw new Error(\"Buffer not loaded for \" + this.name + \": \" + name);\n    }\n\n    return buffer;\n  };\n\n  return Instrument;\n}();\n\nexports.Instrument = Instrument;\n\nvar SoundFont = function () {\n  function SoundFont(baseURL) {\n    this.baseURL = baseURL;\n    this.instruments = new Map();\n    this.initialized = false;\n  }\n\n  SoundFont.prototype.initialize = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4, fetch(this.baseURL + \"/soundfont.json\").then(function (response) {\n              return response.json();\n            }).then(function (spec) {\n              _this.name = spec.name;\n\n              for (var program in spec.instruments) {\n                var url = _this.baseURL + \"/\" + spec.instruments[program];\n\n                _this.instruments.set(program === 'drums' ? 'drums' : +program, new Instrument(url));\n              }\n\n              _this.initialized = true;\n            })];\n\n          case 1:\n            _a.sent();\n\n            return [2];\n        }\n      });\n    });\n  };\n\n  SoundFont.prototype.loadSamples = function (samples) {\n    return __awaiter(this, void 0, void 0, function () {\n      var instrumentSamples;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!!this.initialized) return [3, 2];\n            return [4, this.initialize()];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            instrumentSamples = new Map();\n            samples.forEach(function (info) {\n              info.isDrum = info.isDrum || false;\n              info.program = info.program || 0;\n              var instrument = info.isDrum ? 'drums' : info.program;\n              var sampleInfo = {\n                pitch: info.pitch,\n                velocity: info.velocity\n              };\n\n              if (!instrumentSamples.has(instrument)) {\n                if (!_this.instruments.has(instrument)) {\n                  console.log(\"No instrument in \" + _this.name + \" for: program=\" + info.program + \", isDrum=\" + info.isDrum);\n                } else {\n                  instrumentSamples.set(instrument, [sampleInfo]);\n                }\n              } else {\n                instrumentSamples.get(instrument).push(sampleInfo);\n              }\n            });\n            return [4, Promise.all(Array.from(instrumentSamples.keys()).map(function (info) {\n              return _this.instruments.get(info).loadSamples(instrumentSamples.get(info));\n            }))];\n\n          case 3:\n            _a.sent();\n\n            return [2];\n        }\n      });\n    });\n  };\n\n  SoundFont.prototype.playNote = function (pitch, velocity, startTime, duration, program, isDrum, output) {\n    if (program === void 0) {\n      program = 0;\n    }\n\n    if (isDrum === void 0) {\n      isDrum = false;\n    }\n\n    var instrument = isDrum ? 'drums' : program;\n\n    if (!this.initialized) {\n      throw new Error('SoundFont is not initialized.');\n    }\n\n    if (!this.instruments.has(instrument)) {\n      console.log(\"No instrument in \" + this.name + \" for: program=\" + program + \", isDrum=\" + isDrum);\n      return;\n    }\n\n    this.instruments.get(instrument).playNote(pitch, velocity, startTime, duration, output);\n  };\n\n  SoundFont.prototype.playNoteDown = function (pitch, velocity, program, isDrum, output) {\n    if (program === void 0) {\n      program = 0;\n    }\n\n    if (isDrum === void 0) {\n      isDrum = false;\n    }\n\n    var instrument = isDrum ? 'drums' : program;\n\n    if (!this.initialized) {\n      throw new Error('SoundFont is not initialized.');\n    }\n\n    if (!this.instruments.has(instrument)) {\n      console.log(\"No instrument in \" + this.name + \" for: program=\" + program + \", isDrum=\" + isDrum);\n      return;\n    }\n\n    this.instruments.get(instrument).playNoteDown(pitch, velocity, output);\n  };\n\n  SoundFont.prototype.playNoteUp = function (pitch, velocity, program, isDrum, output) {\n    if (program === void 0) {\n      program = 0;\n    }\n\n    if (isDrum === void 0) {\n      isDrum = false;\n    }\n\n    var instrument = isDrum ? 'drums' : program;\n\n    if (!this.initialized) {\n      throw new Error('SoundFont is not initialized.');\n    }\n\n    if (!this.instruments.has(instrument)) {\n      console.log(\"No instrument in \" + this.name + \" for: program=\" + program + \", isDrum=\" + isDrum);\n      return;\n    }\n\n    this.instruments.get(instrument).playNoteUp(pitch, velocity, output);\n  };\n\n  return SoundFont;\n}();\n\nexports.SoundFont = SoundFont;","map":null,"metadata":{},"sourceType":"script"}