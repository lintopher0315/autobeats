{"ast":null,"code":"import _classCallCheck from \"/home/christopher/Documents/autobeats/autobeats/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/christopher/Documents/autobeats/autobeats/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/christopher/Documents/autobeats/autobeats/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/christopher/Documents/autobeats/autobeats/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/christopher/Documents/autobeats/autobeats/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/christopher/Documents/autobeats/autobeats/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport * as THREE from 'three';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    _classCallCheck(this, App);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(App).apply(this, arguments));\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n\n    /*\n    componentDidMount() {\n      let camera, scene, renderer;\n       const mouse = new THREE.Vector2();\n      const target = new THREE.Vector2();\n      const windowHalf = new THREE.Vector2( window.innerWidth / 2, window.innerHeight / 2 );\n      const loader = new THREE.FontLoader();\n       let init = () => {\n         camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 500 );\n        camera.position.z = 50;\n         scene = new THREE.Scene();\n        scene.background = new THREE.Color(0x2e062b)\n         const geometry = new THREE.BoxBufferGeometry();\n        const material = new THREE.MeshNormalMaterial();\n        \n        for ( let i = 0; i < 1000; i ++ ) {\n        \n          const object = new THREE.Mesh( geometry, material );\n          object.position.x = Math.random() * 80 - 40;\n          object.position.y = Math.random() * 80 - 40;\n          object.position.z = Math.random() * 80 - 40;\n          object.rotation.x = Math.random() * 2 * Math.PI;\n          object.rotation.y = Math.random() * 2 * Math.PI;\n          object.rotation.z = Math.random() * 2 * Math.PI;\n          scene.add( object );\n              \n        }\n         renderer = new THREE.WebGLRenderer( { antialias: true } );\n        renderer.setSize( window.innerWidth, window.innerHeight );\n        document.body.appendChild( renderer.domElement );\n        \n        document.addEventListener( 'mousemove', onMouseMove, false );\n        window.addEventListener( 'resize', onResize, false );\n       }\n       let onMouseMove = (event) => {\n         mouse.x = ( event.clientX - windowHalf.x );\n        mouse.y = ( event.clientY - windowHalf.x );\n       }\n       let onResize = () => {\n         const width = window.innerWidth;\n        const height = window.innerHeight;\n        \n        windowHalf.set( width / 2, height / 2 );\n        \n        camera.aspect = width / height;\n        camera.updateProjectionMatrix();\n        renderer.setSize( width, height );\n              \n      }\n       let animate = () => {\n         target.x = ( 1 - mouse.x ) * 0.002;\n        if (target.x > 0.2) {\n          target.x = 0.2;\n        }\n        if (target.x < -0.2) {\n          target.x = -0.2\n        }\n        target.y = ( 1 - mouse.y ) * 0.002;\n        if (target.y > 0.55) {\n          target.y = 0.55;\n        }\n        if (target.y < 0.15) {\n          target.y = 0.15\n        }\n        \n        camera.rotation.x += 0.01 * ( target.y - camera.rotation.x );\n        camera.rotation.y += 0.01 * ( target.x - camera.rotation.y );\n         requestAnimationFrame( animate );\n        renderer.render( scene, camera );\n       }\n       init();\n      animate();\n    }\n    */\n    value: function render() {\n      return React.createElement(\"div\", {\n        id: \"title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, \"autobeats\");\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/christopher/Documents/autobeats/autobeats/src/App.js"],"names":["React","Component","THREE","App"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;;IAEMC,G;;;;;;;;;;;;;;AACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6BA2FS;AACP,aACE;AAAK,QAAA,EAAE,EAAC,OAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF;AAGD;;;;EAhGeF,S;;AAmGlB,eAAeE,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport * as THREE from 'three';\n\nclass App extends Component {\n  /*\n  componentDidMount() {\n    let camera, scene, renderer;\n\n    const mouse = new THREE.Vector2();\n    const target = new THREE.Vector2();\n    const windowHalf = new THREE.Vector2( window.innerWidth / 2, window.innerHeight / 2 );\n    const loader = new THREE.FontLoader();\n\n    let init = () => {\n\n      camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 500 );\n      camera.position.z = 50;\n\n      scene = new THREE.Scene();\n      scene.background = new THREE.Color(0x2e062b)\n\n      const geometry = new THREE.BoxBufferGeometry();\n      const material = new THREE.MeshNormalMaterial();\n      \n      for ( let i = 0; i < 1000; i ++ ) {\n      \n        const object = new THREE.Mesh( geometry, material );\n        object.position.x = Math.random() * 80 - 40;\n        object.position.y = Math.random() * 80 - 40;\n        object.position.z = Math.random() * 80 - 40;\n        object.rotation.x = Math.random() * 2 * Math.PI;\n        object.rotation.y = Math.random() * 2 * Math.PI;\n        object.rotation.z = Math.random() * 2 * Math.PI;\n        scene.add( object );\n            \n      }\n\n      renderer = new THREE.WebGLRenderer( { antialias: true } );\n      renderer.setSize( window.innerWidth, window.innerHeight );\n      document.body.appendChild( renderer.domElement );\n      \n      document.addEventListener( 'mousemove', onMouseMove, false );\n      window.addEventListener( 'resize', onResize, false );\n\n    }\n\n    let onMouseMove = (event) => {\n\n      mouse.x = ( event.clientX - windowHalf.x );\n      mouse.y = ( event.clientY - windowHalf.x );\n\n    }\n\n    let onResize = () => {\n\n      const width = window.innerWidth;\n      const height = window.innerHeight;\n      \n      windowHalf.set( width / 2, height / 2 );\n      \n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n      renderer.setSize( width, height );\n            \n    }\n\n    let animate = () => {\n\n      target.x = ( 1 - mouse.x ) * 0.002;\n      if (target.x > 0.2) {\n        target.x = 0.2;\n      }\n      if (target.x < -0.2) {\n        target.x = -0.2\n      }\n      target.y = ( 1 - mouse.y ) * 0.002;\n      if (target.y > 0.55) {\n        target.y = 0.55;\n      }\n      if (target.y < 0.15) {\n        target.y = 0.15\n      }\n      \n      camera.rotation.x += 0.01 * ( target.y - camera.rotation.x );\n      camera.rotation.y += 0.01 * ( target.x - camera.rotation.y );\n\n      requestAnimationFrame( animate );\n      renderer.render( scene, camera );\n\n    }\n\n    init();\n    animate();\n  }\n*/\n  render() {\n    return (\n      <div id=\"title\">autobeats</div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}