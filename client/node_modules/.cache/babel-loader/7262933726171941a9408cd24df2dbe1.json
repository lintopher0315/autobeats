{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tf = require(\"@tensorflow/tfjs\");\n\nfunction auxiliaryInputFromSpec(spec) {\n  switch (spec.type) {\n    case 'BinaryCounter':\n      return new BinaryCounter(spec.args);\n\n    default:\n      throw new Error(\"Unknown auxiliary input: \" + spec);\n  }\n}\n\nexports.auxiliaryInputFromSpec = auxiliaryInputFromSpec;\n\nvar AuxiliaryInput = function () {\n  function AuxiliaryInput(depth) {\n    this.depth = depth;\n  }\n\n  return AuxiliaryInput;\n}();\n\nexports.AuxiliaryInput = AuxiliaryInput;\n\nvar BinaryCounter = function (_super) {\n  __extends(BinaryCounter, _super);\n\n  function BinaryCounter(args) {\n    return _super.call(this, args.numBits) || this;\n  }\n\n  BinaryCounter.prototype.getTensors = function (numSteps) {\n    var buffer = tf.buffer([numSteps, this.depth]);\n\n    for (var step = 0; step < numSteps; ++step) {\n      for (var i = 0; i < this.depth; ++i) {\n        buffer.set(Math.floor((step + 1) / Math.pow(2, i)) % 2 ? 1.0 : -1.0, step, i);\n      }\n    }\n\n    return buffer.toTensor().as2D(numSteps, this.depth);\n  };\n\n  return BinaryCounter;\n}(AuxiliaryInput);\n\nexports.BinaryCounter = BinaryCounter;","map":null,"metadata":{},"sourceType":"script"}