{"ast":null,"code":"var IVL_TNL = \"([-+]?\\\\d+)(d{1,4}|m|M|P|A{1,4})\";\nvar IVL_STR = \"(AA|A|P|M|m|d|dd)([-+]?\\\\d+)\";\nvar REGEX = new RegExp(\"^\" + IVL_TNL + \"|\" + IVL_STR + \"$\");\nvar SIZES = [0, 2, 4, 5, 7, 9, 11];\nvar TYPES = \"PMMPPMM\";\nvar CLASSES = [0, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1];\nvar NAMES = \"1P 2m 2M 3m 3M 4P 5P 6m 6M 7m 7M 8P\".split(\" \");\n\nvar names = function names(types) {\n  return typeof types !== \"string\" ? NAMES.slice() : NAMES.filter(function (n) {\n    return types.indexOf(n[1]) !== -1;\n  });\n};\n\nvar tokenize = function tokenize(str) {\n  var m = REGEX.exec(\"\" + str);\n  if (m === null) return null;\n  return m[1] ? [m[1], m[2]] : [m[4], m[3]];\n};\n\nvar NO_IVL = Object.freeze({\n  name: null,\n  num: null,\n  q: null,\n  step: null,\n  alt: null,\n  dir: null,\n  type: null,\n  simple: null,\n  semitones: null,\n  chroma: null,\n  oct: null\n});\n\nvar fillStr = function fillStr(s, n) {\n  return Array(Math.abs(n) + 1).join(s);\n};\n\nvar qToAlt = function qToAlt(type, q) {\n  if (q === \"M\" && type === \"M\") return 0;\n  if (q === \"P\" && type === \"P\") return 0;\n  if (q === \"m\" && type === \"M\") return -1;\n  if (/^A+$/.test(q)) return q.length;\n  if (/^d+$/.test(q)) return type === \"P\" ? -q.length : -q.length - 1;\n  return null;\n};\n\nvar altToQ = function altToQ(type, alt) {\n  if (alt === 0) return type === \"M\" ? \"M\" : \"P\";else if (alt === -1 && type === \"M\") return \"m\";else if (alt > 0) return fillStr(\"A\", alt);else if (alt < 0) return fillStr(\"d\", type === \"P\" ? alt : alt + 1);else return null;\n};\n\nvar numToStep = function numToStep(num) {\n  return (Math.abs(num) - 1) % 7;\n};\n\nvar properties = function properties(str) {\n  var t = tokenize(str);\n  if (t === null) return NO_IVL;\n  var p = {\n    num: 0,\n    q: \"d\",\n    name: \"\",\n    type: \"M\",\n    step: 0,\n    dir: -1,\n    simple: 1,\n    alt: 0,\n    oct: 0,\n    semitones: 0,\n    chroma: 0,\n    ic: 0\n  };\n  p.num = +t[0];\n  p.q = t[1];\n  p.step = numToStep(p.num);\n  p.type = TYPES[p.step];\n  if (p.type === \"M\" && p.q === \"P\") return NO_IVL;\n  p.name = \"\" + p.num + p.q;\n  p.dir = p.num < 0 ? -1 : 1;\n  p.simple = p.num === 8 || p.num === -8 ? p.num : p.dir * (p.step + 1);\n  p.alt = qToAlt(p.type, p.q);\n  p.oct = Math.floor((Math.abs(p.num) - 1) / 7);\n  p.semitones = p.dir * (SIZES[p.step] + p.alt + 12 * p.oct);\n  p.chroma = (p.dir * (SIZES[p.step] + p.alt) % 12 + 12) % 12;\n  return Object.freeze(p);\n};\n\nvar cache = {};\n\nfunction props(str) {\n  if (typeof str !== \"string\") return NO_IVL;\n  return cache[str] || (cache[str] = properties(str));\n}\n\nvar num = function num(str) {\n  return props(str).num;\n};\n\nvar name = function name(str) {\n  return props(str).name;\n};\n\nvar semitones = function semitones(str) {\n  return props(str).semitones;\n};\n\nvar chroma = function chroma(str) {\n  return props(str).chroma;\n};\n\nvar ic = function ic(ivl) {\n  if (typeof ivl === \"string\") ivl = props(ivl).chroma;\n  return typeof ivl === \"number\" ? CLASSES[ivl % 12] : null;\n};\n\nvar build = function build(_a) {\n  var _b = _a === void 0 ? {} : _a,\n      num = _b.num,\n      step = _b.step,\n      alt = _b.alt,\n      _c = _b.oct,\n      oct = _c === void 0 ? 1 : _c,\n      dir = _b.dir;\n\n  if (step !== undefined) num = step + 1 + 7 * oct;\n  if (num === undefined) return null;\n  if (typeof alt !== \"number\") return null;\n  var d = typeof dir !== \"number\" ? \"\" : dir < 0 ? \"-\" : \"\";\n  var type = TYPES[numToStep(num)];\n  return d + num + altToQ(type, alt);\n};\n\nvar simplify = function simplify(str) {\n  var p = props(str);\n  if (p === NO_IVL) return null;\n  var intervalProps = p;\n  return intervalProps.simple + intervalProps.q;\n};\n\nvar invert = function invert(str) {\n  var p = props(str);\n  if (p === NO_IVL) return null;\n  var intervalProps = p;\n  var step = (7 - intervalProps.step) % 7;\n  var alt = intervalProps.type === \"P\" ? -intervalProps.alt : -(intervalProps.alt + 1);\n  return build({\n    step: step,\n    alt: alt,\n    oct: intervalProps.oct,\n    dir: intervalProps.dir\n  });\n};\n\nvar IN = [1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7];\nvar IQ = \"P m M m M P d P m M m M\".split(\" \");\n\nvar fromSemitones = function fromSemitones(num) {\n  var d = num < 0 ? -1 : 1;\n  var n = Math.abs(num);\n  var c = n % 12;\n  var o = Math.floor(n / 12);\n  return d * (IN[c] + 7 * o) + IQ[c];\n};\n\nexport { names, tokenize, qToAlt, altToQ, props, num, name, semitones, chroma, ic, build, simplify, invert, fromSemitones };","map":null,"metadata":{},"sourceType":"module"}