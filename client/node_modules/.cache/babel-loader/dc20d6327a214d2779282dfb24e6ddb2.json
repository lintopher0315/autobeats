{"ast":null,"code":"var NAMES = \"C C# Db D D# Eb E F F# Gb G G# Ab A A# Bb B\".split(\" \");\n\nvar names = function names(accTypes) {\n  return typeof accTypes !== \"string\" ? NAMES.slice() : NAMES.filter(function (n) {\n    var acc = n[1] || \" \";\n    return accTypes.indexOf(acc) !== -1;\n  });\n};\n\nvar SHARPS = names(\" #\");\nvar FLATS = names(\" b\");\nvar REGEX = /^([a-gA-G]?)(#{1,}|b{1,}|x{1,}|)(-?\\d*)\\s*(.*)$/;\n\nfunction tokenize(str) {\n  if (typeof str !== \"string\") str = \"\";\n  var m = REGEX.exec(str);\n  return [m[1].toUpperCase(), m[2].replace(/x/g, \"##\"), m[3], m[4]];\n}\n\nvar NO_NOTE = Object.freeze({\n  pc: null,\n  name: null,\n  step: null,\n  alt: null,\n  oct: null,\n  octStr: null,\n  chroma: null,\n  midi: null,\n  freq: null\n});\nvar SEMI = [0, 2, 4, 5, 7, 9, 11];\n\nvar properties = function properties(str) {\n  var tokens = tokenize(str);\n  if (tokens[0] === \"\" || tokens[3] !== \"\") return NO_NOTE;\n  var letter = tokens[0],\n      acc = tokens[1],\n      octStr = tokens[2];\n  var p = {\n    letter: letter,\n    acc: acc,\n    octStr: octStr,\n    pc: letter + acc,\n    name: letter + acc + octStr,\n    step: (letter.charCodeAt(0) + 3) % 7,\n    alt: acc[0] === \"b\" ? -acc.length : acc.length,\n    oct: octStr.length ? +octStr : null,\n    chroma: 0,\n    midi: null,\n    freq: null\n  };\n  p.chroma = (SEMI[p.step] + p.alt + 120) % 12;\n  p.midi = p.oct !== null ? SEMI[p.step] + p.alt + 12 * (p.oct + 1) : null;\n  p.freq = midiToFreq(p.midi);\n  return Object.freeze(p);\n};\n\nvar memo = function memo(fn, cache) {\n  if (cache === void 0) {\n    cache = {};\n  }\n\n  return function (str) {\n    return cache[str] || (cache[str] = fn(str));\n  };\n};\n\nvar props = memo(properties);\n\nvar name = function name(str) {\n  return props(str).name;\n};\n\nvar pc = function pc(str) {\n  return props(str).pc;\n};\n\nvar isMidiRange = function isMidiRange(m) {\n  return m >= 0 && m <= 127;\n};\n\nvar midi = function midi(note) {\n  if (typeof note !== \"number\" && typeof note !== \"string\") {\n    return null;\n  }\n\n  var midi = props(note).midi;\n  var value = midi || midi === 0 ? midi : +note;\n  return isMidiRange(value) ? value : null;\n};\n\nvar midiToFreq = function midiToFreq(midi, tuning) {\n  if (tuning === void 0) {\n    tuning = 440;\n  }\n\n  return typeof midi === \"number\" ? Math.pow(2, (midi - 69) / 12) * tuning : null;\n};\n\nvar freq = function freq(note) {\n  return props(note).freq || midiToFreq(note);\n};\n\nvar L2 = Math.log(2);\nvar L440 = Math.log(440);\n\nvar freqToMidi = function freqToMidi(freq) {\n  var v = 12 * (Math.log(freq) - L440) / L2 + 69;\n  return Math.round(v * 100) / 100;\n};\n\nvar chroma = function chroma(str) {\n  return props(str).chroma;\n};\n\nvar oct = function oct(str) {\n  return props(str).oct;\n};\n\nvar LETTERS = \"CDEFGAB\";\n\nvar stepToLetter = function stepToLetter(step) {\n  return LETTERS[step];\n};\n\nvar fillStr = function fillStr(s, n) {\n  return Array(n + 1).join(s);\n};\n\nvar numToStr = function numToStr(num, op) {\n  return typeof num !== \"number\" ? \"\" : op(num);\n};\n\nvar altToAcc = function altToAcc(alt) {\n  return numToStr(alt, function (alt) {\n    return alt < 0 ? fillStr(\"b\", -alt) : fillStr(\"#\", alt);\n  });\n};\n\nvar from = function from(fromProps, baseNote) {\n  if (fromProps === void 0) {\n    fromProps = {};\n  }\n\n  if (baseNote === void 0) {\n    baseNote = null;\n  }\n\n  var _a = baseNote ? Object.assign({}, props(baseNote), fromProps) : fromProps,\n      step = _a.step,\n      alt = _a.alt,\n      oct = _a.oct;\n\n  if (typeof step !== \"number\") return null;\n  var letter = stepToLetter(step);\n  if (!letter) return null;\n  var pc = letter + altToAcc(alt);\n  return oct || oct === 0 ? pc + oct : pc;\n};\n\nvar build = from;\n\nfunction fromMidi(num, sharps) {\n  if (sharps === void 0) {\n    sharps = false;\n  }\n\n  num = Math.round(num);\n  var pcs = sharps === true ? SHARPS : FLATS;\n  var pc = pcs[num % 12];\n  var o = Math.floor(num / 12) - 1;\n  return pc + o;\n}\n\nvar simplify = function simplify(note, sameAcc) {\n  if (sameAcc === void 0) {\n    sameAcc = true;\n  }\n\n  var _a = props(note),\n      alt = _a.alt,\n      chroma = _a.chroma,\n      midi = _a.midi;\n\n  if (chroma === null) return null;\n  var alteration = alt;\n  var useSharps = sameAcc === false ? alteration < 0 : alteration > 0;\n  return midi === null ? pc(fromMidi(chroma, useSharps)) : fromMidi(midi, useSharps);\n};\n\nvar enharmonic = function enharmonic(note) {\n  return simplify(note, false);\n};\n\nexport { names, tokenize, props, name, pc, midi, midiToFreq, freq, freqToMidi, chroma, oct, stepToLetter, altToAcc, from, build, fromMidi, simplify, enharmonic };","map":null,"metadata":{},"sourceType":"module"}