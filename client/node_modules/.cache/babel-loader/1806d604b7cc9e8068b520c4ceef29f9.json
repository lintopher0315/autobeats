{"ast":null,"code":"\"use strict\"; // The function below is called when constructing a cwise function object, and does the following:\n// A function object is constructed which accepts as argument a compilation function and returns another function.\n// It is this other function that is eventually returned by createThunk, and this function is the one that actually\n// checks whether a certain pattern of arguments has already been used before and compiles new loops as needed.\n// The compilation passed to the first function object is used for compiling new functions.\n// Once this function object is created, it is called with compile as argument, where the first argument of compile\n// is bound to \"proc\" (essentially containing a preprocessed version of the user arguments to cwise).\n// So createThunk roughly works like this:\n// function createThunk(proc) {\n//   var thunk = function(compileBound) {\n//     var CACHED = {}\n//     return function(arrays and scalars) {\n//       if (dtype and order of arrays in CACHED) {\n//         var func = CACHED[dtype and order of arrays]\n//       } else {\n//         var func = CACHED[dtype and order of arrays] = compileBound(dtype and order of arrays)\n//       }\n//       return func(arrays and scalars)\n//     }\n//   }\n//   return thunk(compile.bind1(proc))\n// }\n\nvar compile = require(\"./compile.js\");\n\nfunction createThunk(proc) {\n  var code = [\"'use strict'\", \"var CACHED={}\"];\n  var vars = [];\n  var thunkName = proc.funcName + \"_cwise_thunk\"; //Build thunk\n\n  code.push([\"return function \", thunkName, \"(\", proc.shimArgs.join(\",\"), \"){\"].join(\"\"));\n  var typesig = [];\n  var string_typesig = [];\n  var proc_args = [[\"array\", proc.arrayArgs[0], \".shape.slice(\", // Slice shape so that we only retain the shape over which we iterate (which gets passed to the cwise operator as SS).\n  Math.max(0, proc.arrayBlockIndices[0]), proc.arrayBlockIndices[0] < 0 ? \",\" + proc.arrayBlockIndices[0] + \")\" : \")\"].join(\"\")];\n  var shapeLengthConditions = [],\n      shapeConditions = []; // Process array arguments\n\n  for (var i = 0; i < proc.arrayArgs.length; ++i) {\n    var j = proc.arrayArgs[i];\n    vars.push([\"t\", j, \"=array\", j, \".dtype,\", \"r\", j, \"=array\", j, \".order\"].join(\"\"));\n    typesig.push(\"t\" + j);\n    typesig.push(\"r\" + j);\n    string_typesig.push(\"t\" + j);\n    string_typesig.push(\"r\" + j + \".join()\");\n    proc_args.push(\"array\" + j + \".data\");\n    proc_args.push(\"array\" + j + \".stride\");\n    proc_args.push(\"array\" + j + \".offset|0\");\n\n    if (i > 0) {\n      // Gather conditions to check for shape equality (ignoring block indices)\n      shapeLengthConditions.push(\"array\" + proc.arrayArgs[0] + \".shape.length===array\" + j + \".shape.length+\" + (Math.abs(proc.arrayBlockIndices[0]) - Math.abs(proc.arrayBlockIndices[i])));\n      shapeConditions.push(\"array\" + proc.arrayArgs[0] + \".shape[shapeIndex+\" + Math.max(0, proc.arrayBlockIndices[0]) + \"]===array\" + j + \".shape[shapeIndex+\" + Math.max(0, proc.arrayBlockIndices[i]) + \"]\");\n    }\n  } // Check for shape equality\n\n\n  if (proc.arrayArgs.length > 1) {\n    code.push(\"if (!(\" + shapeLengthConditions.join(\" && \") + \")) throw new Error('cwise: Arrays do not all have the same dimensionality!')\");\n    code.push(\"for(var shapeIndex=array\" + proc.arrayArgs[0] + \".shape.length-\" + Math.abs(proc.arrayBlockIndices[0]) + \"; shapeIndex-->0;) {\");\n    code.push(\"if (!(\" + shapeConditions.join(\" && \") + \")) throw new Error('cwise: Arrays do not all have the same shape!')\");\n    code.push(\"}\");\n  } // Process scalar arguments\n\n\n  for (var i = 0; i < proc.scalarArgs.length; ++i) {\n    proc_args.push(\"scalar\" + proc.scalarArgs[i]);\n  } // Check for cached function (and if not present, generate it)\n\n\n  vars.push([\"type=[\", string_typesig.join(\",\"), \"].join()\"].join(\"\"));\n  vars.push(\"proc=CACHED[type]\");\n  code.push(\"var \" + vars.join(\",\"));\n  code.push([\"if(!proc){\", \"CACHED[type]=proc=compile([\", typesig.join(\",\"), \"])}\", \"return proc(\", proc_args.join(\",\"), \")}\"].join(\"\"));\n\n  if (proc.debug) {\n    console.log(\"-----Generated thunk:\\n\" + code.join(\"\\n\") + \"\\n----------\");\n  } //Compile thunk\n\n\n  var thunk = new Function(\"compile\", code.join(\"\\n\"));\n  return thunk(compile.bind(undefined, proc));\n}\n\nmodule.exports = createThunk;","map":null,"metadata":{},"sourceType":"script"}