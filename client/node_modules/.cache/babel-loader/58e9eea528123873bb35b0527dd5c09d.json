{"ast":null,"code":"'use strict';\n\nvar ops = require('ndarray-ops');\n\nvar ndarray = require('ndarray');\n\nvar pool = require('typedarray-pool');\n\nvar fftm = require('./lib/fft-matrix.js');\n\nfunction ndfft(dir, x, y) {\n  var shape = x.shape,\n      d = shape.length,\n      size = 1,\n      stride = new Array(d),\n      pad = 0,\n      i,\n      j;\n\n  for (i = d - 1; i >= 0; --i) {\n    stride[i] = size;\n    size *= shape[i];\n    pad = Math.max(pad, fftm.scratchMemory(shape[i]));\n\n    if (x.shape[i] !== y.shape[i]) {\n      throw new Error('Shape mismatch, real and imaginary arrays must have same size');\n    }\n  }\n\n  var buf_size = 4 * size + pad;\n  var buffer;\n\n  if (x.dtype === 'array' || x.dtype === 'float64' || x.dtype === 'custom') {\n    buffer = pool.mallocDouble(buf_size);\n  } else {\n    buffer = pool.mallocFloat(buf_size);\n  }\n\n  var x1 = ndarray(buffer, shape.slice(0), stride, 0),\n      y1 = ndarray(buffer, shape.slice(0), stride.slice(0), size),\n      x2 = ndarray(buffer, shape.slice(0), stride.slice(0), 2 * size),\n      y2 = ndarray(buffer, shape.slice(0), stride.slice(0), 3 * size),\n      tmp,\n      n,\n      s1,\n      s2,\n      scratch_ptr = 4 * size; //Copy into x1/y1\n\n  ops.assign(x1, x);\n  ops.assign(y1, y);\n\n  for (i = d - 1; i >= 0; --i) {\n    fftm(dir, size / shape[i], shape[i], buffer, x1.offset, y1.offset, scratch_ptr);\n\n    if (i === 0) {\n      break;\n    } //Compute new stride for x2/y2\n\n\n    n = 1;\n    s1 = x2.stride;\n    s2 = y2.stride;\n\n    for (j = i - 1; j < d; ++j) {\n      s2[j] = s1[j] = n;\n      n *= shape[j];\n    }\n\n    for (j = i - 2; j >= 0; --j) {\n      s2[j] = s1[j] = n;\n      n *= shape[j];\n    } //Transpose\n\n\n    ops.assign(x2, x1);\n    ops.assign(y2, y1); //Swap buffers\n\n    tmp = x1;\n    x1 = x2;\n    x2 = tmp;\n    tmp = y1;\n    y1 = y2;\n    y2 = tmp;\n  } //Copy result back into x\n\n\n  ops.assign(x, x1);\n  ops.assign(y, y1);\n  pool.free(buffer);\n}\n\nmodule.exports = ndfft;","map":null,"metadata":{},"sourceType":"script"}