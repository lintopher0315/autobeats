{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar protobuf_1 = require(\"../protobuf\");\n\nvar Tone = require(\"tone\");\n\nvar constants_1 = require(\"./constants\");\n\nvar BaseRecorderCallback = function () {\n  function BaseRecorderCallback() {}\n\n  return BaseRecorderCallback;\n}();\n\nexports.BaseRecorderCallback = BaseRecorderCallback;\n\nvar Recorder = function () {\n  function Recorder(config, callbackObject) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    this.notes = [];\n    this.midiInputs = [];\n    this.loClick = new Tone.MembraneSynth({\n      pitchDecay: 0.008,\n      envelope: {\n        attack: 0.001,\n        decay: 0.3,\n        sustain: 0\n      }\n    }).toMaster();\n    this.hiClick = new Tone.MembraneSynth({\n      pitchDecay: 0.008,\n      envelope: {\n        attack: 0.001,\n        decay: 0.3,\n        sustain: 0\n      }\n    }).toMaster();\n    this.config = {\n      playClick: config.playClick,\n      qpm: config.qpm || constants_1.DEFAULT_QUARTERS_PER_MINUTE,\n      playCountIn: config.playCountIn,\n      startRecordingAtFirstNote: config.startRecordingAtFirstNote || false\n    };\n    this.callbackObject = callbackObject;\n    this.recording = false;\n    this.onNotes = new Map();\n  }\n\n  Recorder.prototype.initialize = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4, navigator.requestMIDIAccess().then(function (midi) {\n              return _this.midiReady(midi);\n            }, function (err) {\n              return console.log('Something went wrong', err);\n            })];\n\n          case 1:\n            _a.sent();\n\n            return [2];\n        }\n      });\n    });\n  };\n\n  Recorder.prototype.midiReady = function (midi) {\n    console.log('Initialized Recorder');\n    var inputs = midi.inputs.values();\n\n    for (var input = inputs.next(); input && !input.done; input = inputs.next()) {\n      this.midiInputs.push(input.value);\n    }\n  };\n\n  Recorder.prototype.isRecording = function () {\n    return this.recording;\n  };\n\n  Recorder.prototype.setTempo = function (qpm) {\n    this.config.qpm = qpm;\n\n    if (Tone.Transport.state === 'started') {\n      Tone.Transport.bpm.value = qpm;\n    }\n  };\n\n  Recorder.prototype.enablePlayClick = function (playClick) {\n    this.config.playClick = playClick;\n  };\n\n  Recorder.prototype.enablePlayCountIn = function (countIn) {\n    this.config.playCountIn = countIn;\n  };\n\n  Recorder.prototype.initClickLoop = function () {\n    var _this = this;\n\n    var clickStep = 0;\n    this.clickLoop = new Tone.Loop(function (time) {\n      if (clickStep % 4 === 0) {\n        _this.loClick.triggerAttack('G5', time);\n      } else {\n        _this.hiClick.triggerAttack('C6', time);\n      }\n\n      clickStep++;\n\n      if (_this.config.playCountIn && clickStep === 4) {\n        Tone.Transport.stop();\n\n        _this.clickLoop.stop();\n      }\n    }, '4n');\n  };\n\n  Recorder.prototype.getMIDIInputs = function () {\n    return this.midiInputs;\n  };\n\n  Recorder.prototype.start = function (midiInputs) {\n    var _this = this;\n\n    var list = midiInputs ? midiInputs : this.midiInputs;\n\n    for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {\n      var input = list_1[_i];\n\n      input.onmidimessage = function (event) {\n        _this.midiMessageReceived(event);\n      };\n    }\n\n    if (this.config.playClick || this.config.playCountIn) {\n      this.initClickLoop();\n      Tone.Transport.bpm.value = this.config.qpm;\n      Tone.Transport.start();\n      this.clickLoop.start();\n    } else {\n      this.clickLoop = null;\n    }\n\n    this.recording = true;\n    this.firstNoteTimestamp = undefined;\n    this.notes = [];\n    this.onNotes = new Map();\n\n    if (!this.startRecordingAtFirstNote) {\n      var timeStamp = Date.now();\n      this.firstNoteTimestamp = timeStamp;\n    }\n  };\n\n  Recorder.prototype.stop = function () {\n    var _this = this;\n\n    this.recording = false;\n    var timeStamp = Date.now();\n    this.onNotes.forEach(function (pitch, note) {\n      _this.noteOff(note, timeStamp);\n    });\n\n    for (var _i = 0, _a = this.midiInputs; _i < _a.length; _i++) {\n      var input = _a[_i];\n      input.onmidimessage = null;\n    }\n\n    if (this.clickLoop) {\n      Tone.Transport.stop();\n      this.clickLoop.stop();\n    }\n\n    if (this.notes.length === 0) {\n      return null;\n    }\n\n    return this.getNoteSequence();\n  };\n\n  Recorder.prototype.getNoteSequence = function () {\n    if (this.notes.length === 0) {\n      return null;\n    }\n\n    return protobuf_1.NoteSequence.create({\n      notes: this.notes,\n      totalTime: this.notes[this.notes.length - 1].endTime\n    });\n  };\n\n  Recorder.prototype.reset = function () {\n    var noteSequence = this.stop();\n    this.firstNoteTimestamp = undefined;\n    this.notes = [];\n    this.onNotes = new Map();\n    return noteSequence;\n  };\n\n  Recorder.prototype.midiMessageReceived = function (event) {\n    if (!this.recording) {\n      return;\n    }\n\n    var timeStampOffset;\n\n    if (event.timeStamp !== undefined && event.timeStamp !== 0) {\n      timeStampOffset = event.timeStamp;\n    } else {\n      timeStampOffset = performance.now();\n    }\n\n    var timeStamp = timeStampOffset + performance.timing.navigationStart;\n\n    if (this.firstNoteTimestamp === undefined) {\n      this.firstNoteTimestamp = timeStamp;\n    }\n\n    var NOTE_ON = 9;\n    var NOTE_OFF = 8;\n    var cmd = event.data[0] >> 4;\n    var pitch = event.data[1];\n    var velocity = event.data.length > 2 ? event.data[2] : 1;\n    var device = event.srcElement;\n\n    if (cmd === NOTE_OFF || cmd === NOTE_ON && velocity === 0) {\n      if (this.callbackObject && this.callbackObject.noteOff) {\n        this.callbackObject.noteOff(pitch, velocity, device);\n      }\n\n      this.noteOff(pitch, timeStamp);\n\n      if (this.callbackObject && this.callbackObject.run) {\n        this.callbackObject.run(this.getNoteSequence());\n      }\n    } else if (cmd === NOTE_ON) {\n      if (this.callbackObject && this.callbackObject.noteOn) {\n        this.callbackObject.noteOn(pitch, velocity, device);\n      }\n\n      this.noteOn(pitch, velocity, timeStamp);\n    }\n  };\n\n  Recorder.prototype.noteOn = function (pitch, velocity, timeStamp) {\n    var MILLIS_PER_SECOND = 1000;\n    var note = new protobuf_1.NoteSequence.Note();\n    note.pitch = pitch;\n    note.startTime = (timeStamp - this.firstNoteTimestamp) / MILLIS_PER_SECOND;\n    note.velocity = velocity;\n    this.onNotes.set(pitch, note);\n  };\n\n  Recorder.prototype.noteOff = function (pitch, timeStamp) {\n    var MILLIS_PER_SECOND = 1000;\n    var note = this.onNotes.get(pitch);\n\n    if (note) {\n      note.endTime = (timeStamp - this.firstNoteTimestamp) / MILLIS_PER_SECOND;\n      this.notes.push(note);\n    }\n\n    this.onNotes.delete(pitch);\n  };\n\n  return Recorder;\n}();\n\nexports.Recorder = Recorder;","map":null,"metadata":{},"sourceType":"script"}