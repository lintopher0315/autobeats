import * as tf from '@tensorflow/tfjs';
export { MidiMe };
interface MidiMeConfig {
    encoder_layers?: number[];
    decoder_layers?: number[];
    input_size?: number;
    output_size?: number;
    beta?: number;
    input_sigma?: tf.Tensor;
    batch_size?: number;
    epochs?: number;
}
declare class MidiMe {
    config: MidiMeConfig;
    vae: tf.Model;
    encoder: tf.Model;
    decoder: tf.Model;
    trained: boolean;
    initialized: boolean;
    constructor(config?: MidiMeConfig);
    dispose(): void;
    initialize(): void;
    train(data: tf.Tensor, callback: Function): Promise<number | tf.Tensor<tf.Rank>>;
    sample(numSamples?: number): Promise<tf.Tensor<tf.Rank> | tf.Tensor<tf.Rank>[]>;
    private getEncoder;
    private getDecoder;
    vaeLoss(yTrue: tf.Tensor2D, yPred: tf.Tensor2D): tf.Scalar;
    reconstructionLoss(yTrue: tf.Tensor, yPred: tf.Tensor, inputSigma: tf.Tensor): tf.Tensor<tf.Rank>;
    klLoss(qz: tf.Tensor, pz: tf.Tensor): tf.Tensor<tf.Rank>;
    private getAffineLayers;
}
