"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var tf = require("@tensorflow/tfjs");
var logging = require("../core/logging");
function klDivergence(yTrue, yPred) {
    var epsilon = 0.00001;
    return tf.tidy(function () {
        var clippedTrue = tf.clipByValue(yTrue, epsilon, 1);
        var clippedPred = tf.clipByValue(yPred, epsilon, 1);
        return tf.sum(tf.mul(yTrue, tf.log(tf.div(clippedTrue, clippedPred))), -1);
    });
}
var SamplingLayer = (function (_super) {
    __extends(SamplingLayer, _super);
    function SamplingLayer() {
        return _super.call(this, {}) || this;
    }
    SamplingLayer.prototype.computeOutputShape = function (inputShape) {
        return inputShape[0];
    };
    SamplingLayer.prototype.call = function (inputs) {
        return tf.tidy(function () {
            var sigma = inputs[0], mu = inputs[1];
            return tf.add(tf.mul(tf.randomNormal(sigma.shape), sigma), mu);
        });
    };
    SamplingLayer.prototype.getClassName = function () {
        return 'SamplingLayer';
    };
    return SamplingLayer;
}(tf.layers.Layer));
var AffineLayer = (function (_super) {
    __extends(AffineLayer, _super);
    function AffineLayer() {
        return _super.call(this, {}) || this;
    }
    AffineLayer.prototype.computeOutputShape = function (inputShape) {
        return inputShape[1];
    };
    AffineLayer.prototype.call = function (inputs) {
        return tf.tidy(function () {
            var gates = inputs[0], z = inputs[1], dz = inputs[2];
            return tf.add(tf.mul(tf.sub(1, gates), z), tf.mul(gates, dz));
        });
    };
    AffineLayer.prototype.getClassName = function () {
        return 'AffineLayer';
    };
    return AffineLayer;
}(tf.layers.Layer));
var MidiMe = (function () {
    function MidiMe(config) {
        if (config === void 0) { config = {}; }
        this.trained = false;
        this.initialized = false;
        this.config = {
            encoder_layers: config.encoder_layers || [1024, 256, 64],
            decoder_layers: config.decoder_layers || [64, 256, 1024],
            input_size: config.input_size || 256,
            output_size: config.output_size || 4,
            beta: config.beta || 1,
            input_sigma: config.input_sigma || tf.ones([1]),
            batch_size: config.batch_size || 32,
            epochs: config.epochs || 10,
        };
    }
    MidiMe.prototype.dispose = function () {
        this.encoder = undefined;
        this.decoder = undefined;
        this.vae = undefined;
        this.initialized = false;
    };
    MidiMe.prototype.initialize = function () {
        this.dispose();
        var startTime = performance.now();
        var z = tf.input({ shape: [this.config['input_size']] });
        this.encoder = this.getEncoder(z);
        var sampleZ = this.encoder.apply(z);
        this.decoder = this.getDecoder(sampleZ.shape.slice(1));
        var y = this.decoder.apply(sampleZ);
        this.vae = tf.model({ inputs: z, outputs: [sampleZ, y], name: 'vae' });
        this.vae.compile({ optimizer: 'adam', loss: this.vaeLoss.bind(this) });
        this.initialized = true;
        logging.logWithDuration('Initialized model', startTime, 'MidiMe');
    };
    MidiMe.prototype.train = function (data, callback) {
        return __awaiter(this, void 0, void 0, function () {
            var xTrain, yTrain, h, finalLoss;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.trained = false;
                        xTrain = data;
                        yTrain = [tf.zeros([xTrain.shape[0], this.config['output_size']]), xTrain];
                        return [4, this.vae.fit(xTrain, yTrain, {
                                batchSize: this.config['batch_size'],
                                epochs: this.config['epochs'],
                                callbacks: { onEpochEnd: function (epoch, logs) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                                        return [2, callback(epoch, logs)];
                                    }); }); } }
                            })];
                    case 1:
                        h = _a.sent();
                        finalLoss = h.history.loss[h.history.loss.length - 1];
                        logging.log('Final training error ' + finalLoss, 'MidiMe');
                        this.trained = true;
                        return [2, finalLoss];
                }
            });
        });
    };
    MidiMe.prototype.sample = function (numSamples) {
        if (numSamples === void 0) { numSamples = 1; }
        return __awaiter(this, void 0, void 0, function () {
            var randZs, output;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!this.initialized) return [3, 2];
                        return [4, this.initialize()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        randZs = tf.tidy(function () { return tf.randomNormal([numSamples, _this.config['output_size']]); });
                        output = this.decoder.predict(randZs);
                        randZs.dispose();
                        return [2, output];
                }
            });
        });
    };
    MidiMe.prototype.getEncoder = function (input) {
        var x = input;
        for (var i = 0; i < this.config['encoder_layers'].length; i++) {
            x = tf.layers
                .dense({ units: this.config['encoder_layers'][i], activation: 'relu' })
                .apply(x);
        }
        var mu = this.getAffineLayers(x, this.config['output_size'], input, false);
        var sigma = this.getAffineLayers(x, this.config['output_size'], input, true);
        var z = new SamplingLayer().apply([sigma, mu]);
        return tf.model({ inputs: input, outputs: z, name: 'encoder' });
    };
    MidiMe.prototype.getDecoder = function (shape) {
        var z = tf.input({ shape: shape });
        var x = z;
        for (var i = 0; i < this.config['decoder_layers'].length; i++) {
            x = tf.layers
                .dense({ units: this.config['decoder_layers'][i], activation: 'relu' })
                .apply(x);
        }
        var mu = this.getAffineLayers(x, this.config['input_size'], z, false);
        return tf.model({ inputs: z, outputs: mu, name: 'decoder' });
    };
    MidiMe.prototype.vaeLoss = function (yTrue, yPred) {
        if (yTrue.shape[1] === this.config['output_size']) {
            var pz = tf.randomNormal(yTrue.shape);
            var latentLoss = this.klLoss(yTrue, pz);
            return tf.mul(latentLoss, this.config['beta']);
        }
        else if (yTrue.shape[1] === this.config['input_size']) {
            var reconLoss = this.reconstructionLoss(yTrue, yPred, this.config['input_sigma']);
            return reconLoss;
        }
        else {
            return tf.zeros([1]);
        }
    };
    MidiMe.prototype.reconstructionLoss = function (yTrue, yPred, inputSigma) {
        return tf.tidy(function () {
            var nll = tf.div(tf.losses.meanSquaredError(yTrue, yPred), tf.mul(2, tf.pow(inputSigma, 2)));
            return tf.mean(nll);
        });
    };
    MidiMe.prototype.klLoss = function (qz, pz) {
        return tf.tidy(function () {
            var klQP = klDivergence(qz, pz);
            var kl = tf.sum(klQP);
            return tf.mean(kl);
        });
    };
    MidiMe.prototype.getAffineLayers = function (x, outputSize, z_, softplus, residual) {
        if (residual === void 0) { residual = false; }
        var output;
        if (residual) {
            console.log('doing residual');
            var dzLayer = tf.layers.dense({ units: outputSize });
            var gatesLayer = tf.layers.dense({ units: outputSize, activation: 'sigmoid' });
            var zLayer = tf.layers.dense({ units: outputSize });
            var dz = dzLayer.apply(x);
            var gates = gatesLayer.apply(x);
            var z = zLayer.apply(z_);
            output = new AffineLayer().apply([gates, z, dz]);
        }
        else {
            var linear = tf.layers.dense({ units: outputSize });
            output = linear.apply(x);
        }
        if (softplus) {
            return tf.layers.activation({ activation: 'softplus' }).apply(output);
        }
        else {
            return output;
        }
    };
    return MidiMe;
}());
exports.MidiMe = MidiMe;
//# sourceMappingURL=midi_me.js.map