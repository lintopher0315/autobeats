"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var test = require("tape");
var note_sequence_1 = require("./note_sequence");
var STEPS_PER_QUARTER = 4;
function createTestNS() {
    var ns = new note_sequence_1.SimpleNoteSequence();
    ns.tempos.push({ qpm: 60, time: 0 });
    ns.timeSignatures.push({
        time: 0,
        numerator: 4,
        denominator: 4,
    });
    return ns;
}
function addTrackToSequence(ns, instrument, notes) {
    for (var _i = 0, notes_1 = notes; _i < notes_1.length; _i++) {
        var noteParams = notes_1[_i];
        var note = new note_sequence_1.SimpleNote();
        note.pitch = noteParams[0];
        note.velocity = noteParams[1];
        note.startTime = noteParams[2];
        note.endTime = noteParams[3];
        ns.addNote(note);
    }
}
function addQuantizedStepsToSequence(ns, quantizedSteps) {
    quantizedSteps.forEach(function (qstep, i) {
        var note = ns.notes[i];
        note.quantizedStartStep = qstep[0];
        note.quantizedEndStep = qstep[1];
        if (note.quantizedEndStep > ns.totalQuantizedSteps) {
            ns.totalQuantizedSteps = note.quantizedEndStep;
        }
    });
}
function addControlChangesToSequence(ns, instrument, controlChanges) {
    for (var _i = 0, controlChanges_1 = controlChanges; _i < controlChanges_1.length; _i++) {
        var ccParams = controlChanges_1[_i];
        ns.controlChanges.push({
            time: ccParams[0],
            controlNumber: ccParams[1],
            controlValue: ccParams[2],
            instrument: instrument
        });
    }
}
function addQuantizedControlStepsToSequence(ns, quantizedSteps) {
    quantizedSteps.forEach(function (qstep, i) {
        var cc = ns.controlChanges[i];
        cc.quantizedStep = qstep;
    });
}
test('Quantize SimpleNoteSequence', function (t) {
    var ns = createTestNS();
    addTrackToSequence(ns, 0, [
        [12, 100, 0.01, 10.0], [11, 55, 0.22, 0.50], [40, 45, 2.50, 3.50],
        [55, 120, 4.0, 4.01], [52, 99, 4.75, 5.0]
    ]);
    addControlChangesToSequence(ns, 0, [[2.0, 64, 127], [4.0, 64, 0]]);
    var expectedQuantizedSequence = new note_sequence_1.SimpleNoteSequence(ns);
    expectedQuantizedSequence.quantizationInfo.stepsPerQuarter =
        STEPS_PER_QUARTER;
    addQuantizedStepsToSequence(expectedQuantizedSequence, [[0, 40], [1, 2], [10, 14], [16, 17], [19, 20]]);
    addQuantizedControlStepsToSequence(expectedQuantizedSequence, [8, 16]);
    var qns = ns.quantize(STEPS_PER_QUARTER);
    t.deepEqual(qns, expectedQuantizedSequence);
    t.end();
});
test('Quantize SimpleNoteSequence, Time Signature Change', function (t) {
    var ns = createTestNS();
    addTrackToSequence(ns, 0, [
        [12, 100, 0.01, 10.0], [11, 55, 0.22, 0.50], [40, 45, 2.50, 3.50],
        [55, 120, 4.0, 4.01], [52, 99, 4.75, 5.0]
    ]);
    ns.timeSignatures.length = 0;
    ns.quantize(STEPS_PER_QUARTER);
    ns.timeSignatures.push({ numerator: 4, denominator: 4, time: 0 });
    ns.quantize(STEPS_PER_QUARTER);
    ns.timeSignatures.push({ numerator: 4, denominator: 4, time: 1 });
    ns.quantize(STEPS_PER_QUARTER);
    ns.timeSignatures.push({ numerator: 2, denominator: 4, time: 2 });
    t.throws(function () { return ns.quantize(STEPS_PER_QUARTER); }, note_sequence_1.MultipleTimeSignatureException);
    t.end();
});
test('Quantize SimpleNoteSequence, Implicit Time Signature Change', function (t) {
    var ns = createTestNS();
    addTrackToSequence(ns, 0, [
        [12, 100, 0.01, 10.0], [11, 55, 0.22, 0.50], [40, 45, 2.50, 3.50],
        [55, 120, 4.0, 4.01], [52, 99, 4.75, 5.0]
    ]);
    ns.timeSignatures.length = 0;
    ns.quantize(STEPS_PER_QUARTER);
    ns.timeSignatures.push({ numerator: 2, denominator: 4, time: 2 });
    t.throws(function () { return ns.quantize(STEPS_PER_QUARTER); }, note_sequence_1.MultipleTimeSignatureException);
    t.end();
});
test('Quantize SimpleNoteSequence, No Implicit Time Signature Change, Out Of Order', function (t) {
    var ns = createTestNS();
    addTrackToSequence(ns, 0, [
        [12, 100, 0.01, 10.0], [11, 55, 0.22, 0.50], [40, 45, 2.50, 3.50],
        [55, 120, 4.0, 4.01], [52, 99, 4.75, 5.0]
    ]);
    ns.timeSignatures.length = 0;
    ns.quantize(STEPS_PER_QUARTER);
    ns.timeSignatures.push({ numerator: 2, denominator: 4, time: 2 });
    ns.timeSignatures.push({ numerator: 2, denominator: 4, time: 0 });
    ns.quantize(STEPS_PER_QUARTER);
    t.pass();
    t.end();
});
test('StepsPerQuarterToStepsPerSecond', function (t) {
    t.equal(note_sequence_1.stepsPerQuarterToStepsPerSecond(4, 60.0), 4.0);
    t.end();
});
test('QuantizeToStep', function (t) {
    t.equal(note_sequence_1.quantizeToStep(8.0001, 4), 32);
    t.equal(note_sequence_1.quantizeToStep(8.4999, 4), 34);
    t.equal(note_sequence_1.quantizeToStep(8.4999, 4, 1.0), 33);
    t.end();
});
test('Quantize SimpleNoteSequence, Tempo Change', function (t) {
    var ns = createTestNS();
    addTrackToSequence(ns, 0, [
        [12, 100, 0.01, 10.0], [11, 55, 0.22, 0.50], [40, 45, 2.50, 3.50],
        [55, 120, 4.0, 4.01], [52, 99, 4.75, 5.0]
    ]);
    ns.tempos.length = 0;
    ns.quantize(STEPS_PER_QUARTER);
    ns.tempos.push({ qpm: 60, time: 0 });
    ns.quantize(STEPS_PER_QUARTER);
    ns.tempos.push({ qpm: 60, time: 1 });
    ns.quantize(STEPS_PER_QUARTER);
    ns.tempos.push({ qpm: 120, time: 2 });
    t.throws(function () { return ns.quantize(STEPS_PER_QUARTER); }, note_sequence_1.MultipleTempoException);
    t.end();
});
test('Quantize SimpleNoteSequence, Implicit Tempo Change', function (t) {
    var ns = createTestNS();
    addTrackToSequence(ns, 0, [
        [12, 100, 0.01, 10.0], [11, 55, 0.22, 0.50], [40, 45, 2.50, 3.50],
        [55, 120, 4.0, 4.01], [52, 99, 4.75, 5.0]
    ]);
    ns.tempos.length = 0;
    ns.quantize(STEPS_PER_QUARTER);
    ns.tempos.push({ qpm: 60, time: 2 });
    t.throws(function () { return ns.quantize(STEPS_PER_QUARTER); }, note_sequence_1.MultipleTempoException);
    t.end();
});
test('Quantize SimpleNoteSequence, No Implicit Tempo Change, Out of Order', function (t) {
    var ns = createTestNS();
    addTrackToSequence(ns, 0, [
        [12, 100, 0.01, 10.0], [11, 55, 0.22, 0.50], [40, 45, 2.50, 3.50],
        [55, 120, 4.0, 4.01], [52, 99, 4.75, 5.0]
    ]);
    ns.tempos.length = 0;
    ns.quantize(STEPS_PER_QUARTER);
    ns.tempos.push({ qpm: 60, time: 2 });
    ns.tempos.push({ qpm: 60, time: 0 });
    ns.quantize(STEPS_PER_QUARTER);
    t.pass();
    t.end();
});
test('Quantize SimpleNoteSequence, Rounding', function (t) {
    var ns = createTestNS();
    addTrackToSequence(ns, 1, [
        [12, 100, 0.01, 0.24], [11, 100, 0.22, 0.55], [40, 100, 0.50, 0.75],
        [41, 100, 0.689, 1.18], [44, 100, 1.19, 1.69], [55, 100, 4.0, 4.01]
    ]);
    var expectedQuantizedSequence = new note_sequence_1.SimpleNoteSequence(ns);
    expectedQuantizedSequence.quantizationInfo.stepsPerQuarter =
        STEPS_PER_QUARTER;
    addQuantizedStepsToSequence(expectedQuantizedSequence, [[0, 1], [1, 2], [2, 3], [3, 5], [5, 7], [16, 17]]);
    var quantizedSequence = ns.quantize(STEPS_PER_QUARTER);
    t.deepEqual(quantizedSequence, expectedQuantizedSequence);
    t.end();
});
test('Quantize SimpleNoteSequence, MultiTrack', function (t) {
    var ns = createTestNS();
    addTrackToSequence(ns, 0, [[12, 100, 1.0, 4.0], [19, 100, 0.95, 3.0]]);
    addTrackToSequence(ns, 3, [[12, 100, 1.0, 4.0], [19, 100, 2.0, 5.0]]);
    addTrackToSequence(ns, 7, [[12, 100, 1.0, 5.0], [19, 100, 2.0, 4.0], [24, 100, 3.0, 3.5]]);
    var expectedQuantizedSequence = new note_sequence_1.SimpleNoteSequence(ns);
    expectedQuantizedSequence.quantizationInfo.stepsPerQuarter =
        STEPS_PER_QUARTER;
    addQuantizedStepsToSequence(expectedQuantizedSequence, [[4, 16], [4, 12], [4, 16], [8, 20], [4, 20], [8, 16], [12, 14]]);
    var quantizedSequence = ns.quantize(STEPS_PER_QUARTER);
    t.deepEqual(quantizedSequence, expectedQuantizedSequence);
    t.end();
});
test('Assert isQuantizedSimpleNoteSequence', function (t) {
    var ns = createTestNS();
    addTrackToSequence(ns, 0, [
        [12, 100, 0.01, 10.0], [11, 55, 0.22, 0.50], [40, 45, 2.50, 3.50],
        [55, 120, 4.0, 4.01], [52, 99, 4.75, 5.0]
    ]);
    t.throws(function () { return ns.assertIsQuantizedSequence(); }, note_sequence_1.QuantizationStatusException);
    var qns = ns.quantize(STEPS_PER_QUARTER);
    qns.assertIsQuantizedSequence();
    t.end();
});
test('Assert isRelativeQuantizedSimpleNoteSequence', function (t) {
    var ns = createTestNS();
    addTrackToSequence(ns, 0, [
        [12, 100, 0.01, 10.0], [11, 55, 0.22, 0.50], [40, 45, 2.50, 3.50],
        [55, 120, 4.0, 4.01], [52, 99, 4.75, 5.0]
    ]);
    t.throws(function () { return ns.assertIsRelativeQuantizedSequence(); }, note_sequence_1.QuantizationStatusException);
    var qns = ns.quantize(STEPS_PER_QUARTER);
    qns.assertIsRelativeQuantizedSequence();
    t.end();
});
function testUnQuantize(t, expectedTimes, expectedTotalTime, originalQpm, finalQpm, originalTotalSteps) {
    var qns = createTestNS();
    var notes = [
        [12, 100, 0.01, 0.24], [11, 100, 0.22, 0.55], [40, 100, 0.50, 0.75],
        [41, 100, 0.689, 1.18], [44, 100, 1.19, 1.69]
    ];
    addTrackToSequence(qns, 1, notes);
    qns = qns.quantize(STEPS_PER_QUARTER);
    if (!originalQpm) {
        qns.tempos = [];
    }
    else {
        qns.tempos[0].qpm = originalQpm;
    }
    if (originalTotalSteps) {
        qns.totalQuantizedSteps = originalTotalSteps;
    }
    var ns = qns.unquantize(finalQpm);
    var expectedSequence = new note_sequence_1.SimpleNoteSequence(qns);
    expectedSequence.notes.map(function (n, i) {
        n.startTime = expectedTimes[i][0];
        n.endTime = expectedTimes[i][1];
    });
    expectedSequence.totalTime = expectedTotalTime;
    if (!finalQpm && !originalQpm) {
        expectedSequence.tempos = [];
    }
    else {
        expectedSequence.tempos =
            [{ time: 0, qpm: finalQpm ? finalQpm : originalQpm }];
    }
    t.deepEqual(ns, expectedSequence);
    t.end();
}
test('Un-Quantize SimpleNoteSequence, ns qpm', function (t) {
    testUnQuantize(t, [[0.0, 0.25], [0.25, 0.50], [0.50, 0.75], [0.75, 1.25], [1.25, 1.75]], 1.75, 60);
});
test('Un-Quantize SimpleNoteSequence, no qpm', function (t) {
    testUnQuantize(t, [
        [0.0, 0.125], [0.125, 0.25], [0.25, 0.375], [0.375, 0.625],
        [0.625, 0.875]
    ], 0.875);
});
test('Un-Quantize SimpleNoteSequence, arg qpm', function (t) {
    testUnQuantize(t, [[0.0, 0.5], [0.5, 1.00], [1.00, 1.5], [1.5, 2.5], [2.5, 3.5]], 3.5, undefined, 30);
});
test('Un-Quantize SimpleNoteSequence, orig and arg qpm', function (t) {
    testUnQuantize(t, [[0.0, 0.5], [0.5, 1.00], [1.00, 1.5], [1.5, 2.5], [2.5, 3.5]], 3.5, 60, 30);
});
test('Un-Quantize SimpleNoteSequence, existing total steps lower', function (t) {
    testUnQuantize(t, [[0.0, 0.5], [0.5, 1.00], [1.00, 1.5], [1.5, 2.5], [2.5, 3.5]], 3.5, undefined, 30, 1);
});
test('Un-Quantize SimpleNoteSequence, existing total steps higher', function (t) {
    testUnQuantize(t, [[0.0, 0.5], [0.5, 1.00], [1.00, 1.5], [1.5, 2.5], [2.5, 3.5]], 10, undefined, 30, 20);
});
//# sourceMappingURL=note_sequence_test.js.map