import { INoteSequence, NoteSequence } from '../protobuf';
interface VisualizerConfig {
    noteHeight?: number;
    noteSpacing?: number;
    pixelsPerTimeStep?: number;
    noteRGB?: string;
    activeNoteRGB?: string;
    minPitch?: number;
    maxPitch?: number;
}
export declare abstract class BaseVisualizer {
    noteSequence: INoteSequence;
    protected config: VisualizerConfig;
    protected height: number;
    protected width: number;
    protected sequenceIsQuantized: boolean;
    protected parentElement: HTMLElement;
    abstract redraw(activeNote?: NoteSequence.INote, scrollIntoView?: boolean): number;
    protected abstract clear(): void;
    constructor(sequence: INoteSequence, config?: VisualizerConfig);
    protected getSize(): {
        width: number;
        height: number;
    };
    protected getNotePosition(note: NoteSequence.INote, noteIndex: number): {
        x: number;
        y: number;
        w: number;
        h: number;
    };
    protected scrollIntoViewIfNeeded(scrollIntoView: boolean, activeNotePosition: number): void;
    protected getNoteStartTime(note: NoteSequence.INote): number;
    protected getNoteEndTime(note: NoteSequence.INote): number;
    protected isPaintingActiveNote(note: NoteSequence.INote, playedNote: NoteSequence.INote): boolean;
}
export declare class PianoRollCanvasVisualizer extends BaseVisualizer {
    protected ctx: CanvasRenderingContext2D;
    constructor(sequence: INoteSequence, canvas: HTMLCanvasElement, config?: VisualizerConfig);
    redraw(activeNote?: NoteSequence.INote, scrollIntoView?: boolean): number;
    protected clear(): void;
    private redrawNote;
}
export declare class Visualizer extends PianoRollCanvasVisualizer {
    constructor(sequence: INoteSequence, canvas: HTMLCanvasElement, config?: VisualizerConfig);
}
export declare class PianoRollSVGVisualizer extends BaseVisualizer {
    private svg;
    private drawn;
    constructor(sequence: INoteSequence, svg: SVGSVGElement, config?: VisualizerConfig);
    redraw(activeNote?: NoteSequence.INote, scrollIntoView?: boolean): number;
    private draw;
    private getNoteFillColor;
    private drawNote;
    protected clear(): void;
}
export {};
