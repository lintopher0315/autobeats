import { ITimeSignature, IKeySignature, ITempo, IQuantizationInfo, IPitchBend, IControlChange, PitchName } from '../protobuf';
export declare function stepsPerQuarterToStepsPerSecond(stepsPerQuarter: number, qpm: number): number;
export declare function quantizeToStep(unquantizedSeconds: number, stepsPerSecond: number, quantizeCutoff?: number): number;
export declare class MultipleTimeSignatureException extends Error {
    constructor(message?: string);
}
export declare class BadTimeSignatureException extends Error {
    constructor(message?: string);
}
export declare class NegativeTimeException extends Error {
    constructor(message?: string);
}
export declare class MultipleTempoException extends Error {
    constructor(message?: string);
}
export declare class QuantizationStatusException extends Error {
    constructor(message?: string);
}
export declare class SimpleNote {
    pitch?: number;
    velocity?: number;
    instrument?: number;
    program?: number;
    isDrum?: boolean;
    pitchName?: PitchName;
    startTime?: number;
    endTime?: number;
    quantizedStartStep?: number;
    quantizedEndStep?: number;
    constructor(note?: SimpleNote);
}
export declare class SimpleNoteSequence {
    id?: string;
    notes?: SimpleNote[];
    totalTime?: number;
    totalQuantizedSteps?: number;
    ticksPerQuarter?: number;
    timeSignatures?: ITimeSignature[];
    keySignatures?: IKeySignature[];
    tempos?: ITempo[];
    quantizationInfo?: IQuantizationInfo;
    pitchBends?: IPitchBend[];
    controlChanges?: IControlChange[];
    constructor(seq?: SimpleNoteSequence);
    addNote(note: SimpleNote): void;
    isAbsoluteQuantizedSequence(): boolean;
    assertIsAbsoluteQuantizedSequence(): void;
    isQuantizedSequence(): boolean;
    assertIsQuantizedSequence(): void;
    isRelativeQuantizedSequence(): boolean;
    assertIsRelativeQuantizedSequence(): void;
    assertSingleTempo(): void;
    private isPowerOf2;
    quantize(stepsPerQuarter: number): SimpleNoteSequence;
    unquantize(qpm?: number): SimpleNoteSequence;
    private getQuantizedTimeEvents;
    private quantizeNotesAndEvents;
}
