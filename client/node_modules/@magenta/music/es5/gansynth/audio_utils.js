"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var tf = require("@tensorflow/tfjs");
var FFT = require("fft.js");
var audio_utils_1 = require("../core/audio_utils");
var constants_1 = require("./constants");
var mel_sparse_coeffs_1 = require("./mel_sparse_coeffs");
function melToLinearMatrix() {
    var m2l = tf.buffer([1024, 1024]);
    for (var i = 0; i < mel_sparse_coeffs_1.MEL_SPARSE_COEFFS.length; i++) {
        var x = mel_sparse_coeffs_1.MEL_SPARSE_COEFFS[i];
        m2l.set(x[2], x[0], x[1]);
    }
    return m2l.toTensor();
}
exports.melToLinearMatrix = melToLinearMatrix;
function descale(data, a, b) {
    return tf.div(tf.sub(data, b), a);
}
function melToLinear(melLogPower) {
    return tf.tidy(function () {
        var m2l = melToLinearMatrix().expandDims(0);
        var melLogPowerDb = descale(melLogPower, constants_1.MAG_DESCALE_A, constants_1.MAG_DESCALE_B);
        var melPower = tf.exp(melLogPowerDb);
        var powerLin = tf.matMul(melPower, m2l);
        var magLin = tf.sqrt(powerLin);
        return magLin;
    });
}
exports.melToLinear = melToLinear;
function ifreqToPhase(ifreq) {
    return tf.tidy(function () {
        var m2l = melToLinearMatrix().expandDims(0);
        var ifreqDescale = descale(ifreq, constants_1.PHASE_DESCALE_A, constants_1.PHASE_DESCALE_B);
        var phase = tf.cumsum(tf.mul(ifreqDescale, Math.PI), 1);
        var phaseLin = tf.matMul(phase, m2l);
        return phaseLin;
    });
}
exports.ifreqToPhase = ifreqToPhase;
function interleaveReIm(real, imag) {
    var reImInterleave = tf.tidy(function () {
        var reImBatch = tf.concat([real, imag], 0).expandDims(3);
        reImBatch = tf.pad(reImBatch, [[0, 0], [0, 0], [1, 0], [0, 0]]);
        var crops = [[0, 0], [0, 0]];
        var reImInterleave = tf.batchToSpaceND(reImBatch, [1, 2], crops).reshape([128, 4096]);
        return reImInterleave;
    });
    var reImArray = reImInterleave.dataSync();
    var reIm = [];
    for (var i = 0; i < 128; i++) {
        reIm[i] = reImArray.slice(i * 4096, (i + 1) * 4096);
    }
    return reIm;
}
function reImToAudio(reIm) {
    return __awaiter(this, void 0, void 0, function () {
        var ispecParams;
        return __generator(this, function (_a) {
            ispecParams = {
                nFFt: constants_1.N_FFT,
                winLength: constants_1.N_FFT,
                hopLength: constants_1.N_HOP,
                sampleRate: constants_1.SAMPLE_RATE,
                center: false,
            };
            return [2, istft(reIm, ispecParams)];
        });
    });
}
function specgramsToAudio(specgrams) {
    return __awaiter(this, void 0, void 0, function () {
        var reImArray, reIm, audio;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    reImArray = tf.tidy(function () {
                        var magSlice = tf.slice(specgrams, [0, 0, 0, 0], [1, -1, -1, 1]).reshape([
                            1, 128, 1024
                        ]);
                        var magMel = magSlice;
                        var mag = melToLinear(magMel);
                        var ifreqSlice = tf.slice(specgrams, [0, 0, 0, 1], [
                            1, -1, -1, 1
                        ]).reshape([1, 128, 1024]);
                        var ifreq = ifreqSlice;
                        var phase = ifreqToPhase(ifreq);
                        var real = mag.mul(tf.cos(phase));
                        var mirrorReal = tf.reverse(real.slice([0, 0, 0], [1, 128, 1023]), 2);
                        real = tf.concat([real, mirrorReal], 2);
                        var imag = mag.mul(tf.sin(phase));
                        var mirrorImag = tf.reverse(imag.slice([0, 0, 0], [1, 128, 1023]), 2);
                        imag = tf.concat([imag, tf.mul(mirrorImag, -1.0)], 2);
                        return [real, imag];
                    });
                    return [4, interleaveReIm(reImArray[0], reImArray[1])];
                case 1:
                    reIm = _a.sent();
                    return [4, reImToAudio(reIm)];
                case 2:
                    audio = _a.sent();
                    return [2, audio];
            }
        });
    });
}
exports.specgramsToAudio = specgramsToAudio;
function ifft(reIm) {
    var nFFT = reIm.length / 2;
    var fft = new FFT(nFFT);
    var recon = fft.createComplexArray();
    fft.inverseTransform(recon, reIm);
    var result = fft.fromComplexArray(recon);
    return result;
}
exports.ifft = ifft;
function istft(reIm, params) {
    var nFrames = reIm.length;
    var nReIm = reIm[0].length;
    var nFft = (nReIm / 2);
    var winLength = params.winLength || nFft;
    var hopLength = params.hopLength || Math.floor(winLength / 4);
    var center = params.center || false;
    var ifftWindow = audio_utils_1.hannWindow(winLength);
    for (var i = 0; i < ifftWindow.length; i++) {
        ifftWindow[i] = ifftWindow[i] / 1.5;
    }
    ifftWindow = audio_utils_1.padCenterToLength(ifftWindow, nFft);
    var expectedSignalLen = nFft + hopLength * (nFrames - 1);
    var y = new Float32Array(expectedSignalLen);
    for (var i = 0; i < nFrames; i++) {
        var sample = i * hopLength;
        var yTmp = ifft(reIm[i]);
        yTmp = audio_utils_1.applyWindow(yTmp, ifftWindow);
        yTmp = add(yTmp, y.slice(sample, sample + nFft));
        y.set(yTmp, sample);
    }
    var sliceStart = 0;
    var sliceLength = expectedSignalLen;
    if (center) {
        sliceStart = nFft / 2;
        sliceLength = y.length - (nFft / 2);
    }
    else {
        sliceStart = expectedSignalLen - constants_1.SAMPLE_LENGTH;
        sliceLength = y.length - sliceStart;
    }
    var yTrimmed = y.slice(sliceStart, sliceLength);
    return yTrimmed;
}
exports.istft = istft;
function add(arr0, arr1) {
    if (arr0.length !== arr1.length) {
        console.error("Array lengths must be equal to add: " + arr0.length + ", " + arr0.length);
        return null;
    }
    var out = new Float32Array(arr0.length);
    for (var i = 0; i < arr0.length; i++) {
        out[i] = arr0[i] + arr1[i];
    }
    return out;
}
//# sourceMappingURL=audio_utils.js.map