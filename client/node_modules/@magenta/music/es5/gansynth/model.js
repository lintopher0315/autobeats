"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var tf = require("@tensorflow/tfjs");
var logging = require("../core/logging");
var audio_utils_1 = require("./audio_utils");
var custom_layers_1 = require("./custom_layers");
var GANSynth = (function () {
    function GANSynth(checkpointURL) {
        this.nn = tf.sequential();
        this.nLatents = 256;
        this.nPitches = 61;
        this.minMidiPitch = 24;
        this.maxMidiPitch = 84;
        this.midiPitches = this.maxMidiPitch - this.minMidiPitch + 1;
        this.checkpointURL = checkpointURL;
    }
    GANSynth.prototype.initialize = function () {
        return __awaiter(this, void 0, void 0, function () {
            var startTime, vars;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.dispose();
                        startTime = performance.now();
                        return [4, fetch(this.checkpointURL + "/weights_manifest.json")
                                .then(function (response) { return response.json(); })
                                .then(function (manifest) {
                                return tf.io.loadWeights(manifest, _this.checkpointURL);
                            })];
                    case 1:
                        vars = _a.sent();
                        tf.tidy(function () {
                            for (var v in vars) {
                                if (v.includes('kernel')) {
                                    var fanIn = vars[v].shape[0] * vars[v].shape[1] * vars[v].shape[2];
                                    vars[v] = tf.mul(vars[v], tf.sqrt(2 / fanIn));
                                }
                            }
                            _this.build(vars);
                            Object.keys(vars).map(function (name) { return vars[name].dispose(); });
                            _this.initialized = true;
                            logging.logWithDuration('Initialized model', startTime, 'GANSynth');
                        });
                        return [2];
                }
            });
        });
    };
    GANSynth.prototype.dispose = function () {
        if (!this.initialized) {
            return;
        }
        this.nn.dispose();
        this.initialized = false;
    };
    GANSynth.prototype.isInitialized = function () {
        return this.initialized;
    };
    GANSynth.prototype.build = function (vars) {
        var _this = this;
        tf.tidy(function () {
            var convConfig = {
                filters: 256,
                kernelSize: [2, 16],
                strides: [1, 1],
                activation: 'linear',
                useBias: true,
                padding: 'valid',
                dilationRate: [1, 1],
                trainable: false
            };
            var inputShape = { inputShape: [1, 1, _this.nLatents + _this.nPitches] };
            _this.nn.add(custom_layers_1.pixelNorm(1e-8, inputShape));
            _this.nn.add(custom_layers_1.initialPad(2, 16));
            _this.nn.add(tf.layers.conv2d(convConfig));
            _this.nn.add(tf.layers.leakyReLU({ alpha: 0.2 }));
            _this.nn.add(custom_layers_1.pixelNorm());
            convConfig.padding = 'same';
            convConfig.kernelSize = [3, 3];
            _this.nn.add(tf.layers.conv2d(convConfig));
            _this.nn.add(tf.layers.leakyReLU({ alpha: 0.2 }));
            _this.nn.add(custom_layers_1.pixelNorm());
            var layerFilters = [256, 256, 256, 128, 64, 32];
            for (var i = 0; i < layerFilters.length; i++) {
                _this.nn.add(custom_layers_1.boxUpscale(2));
                convConfig.filters = layerFilters[i];
                _this.nn.add(tf.layers.conv2d(convConfig));
                _this.nn.add(tf.layers.leakyReLU({ alpha: 0.2 }));
                _this.nn.add(custom_layers_1.pixelNorm());
                _this.nn.add(tf.layers.conv2d(convConfig));
                _this.nn.add(tf.layers.leakyReLU({ alpha: 0.2 }));
                _this.nn.add(custom_layers_1.pixelNorm());
            }
            convConfig.filters = 2;
            convConfig.kernelSize = [1, 1];
            convConfig.activation = 'tanh';
            _this.nn.add(tf.layers.conv2d(convConfig));
            _this.setWeights(vars);
        });
    };
    GANSynth.prototype.setWeights = function (vars) {
        function getVar(name) {
            var v = vars[name];
            if (v === undefined) {
                throw Error("Variable not found: " + name);
            }
            return v;
        }
        var prefix = 'Generator/progressive_gan_generator/progressive_gan_block_';
        var weights = [
            getVar(prefix + "1/conv0/conv2d/kernel/ExponentialMovingAverage"),
            getVar(prefix + "1/conv0/bias/ExponentialMovingAverage"),
            getVar(prefix + "1/conv1/conv2d/kernel/ExponentialMovingAverage"),
            getVar(prefix + "1/conv1/bias/ExponentialMovingAverage"),
            getVar(prefix + "2/conv0/conv2d/kernel/ExponentialMovingAverage"),
            getVar(prefix + "2/conv0/bias/ExponentialMovingAverage"),
            getVar(prefix + "2/conv1/conv2d/kernel/ExponentialMovingAverage"),
            getVar(prefix + "2/conv1/bias/ExponentialMovingAverage"),
            getVar(prefix + "3/conv0/conv2d/kernel/ExponentialMovingAverage"),
            getVar(prefix + "3/conv0/bias/ExponentialMovingAverage"),
            getVar(prefix + "3/conv1/conv2d/kernel/ExponentialMovingAverage"),
            getVar(prefix + "3/conv1/bias/ExponentialMovingAverage"),
            getVar(prefix + "4/conv0/conv2d/kernel/ExponentialMovingAverage"),
            getVar(prefix + "4/conv0/bias/ExponentialMovingAverage"),
            getVar(prefix + "4/conv1/conv2d/kernel/ExponentialMovingAverage"),
            getVar(prefix + "4/conv1/bias/ExponentialMovingAverage"),
            getVar(prefix + "5/conv0/conv2d/kernel/ExponentialMovingAverage"),
            getVar(prefix + "5/conv0/bias/ExponentialMovingAverage"),
            getVar(prefix + "5/conv1/conv2d/kernel/ExponentialMovingAverage"),
            getVar(prefix + "5/conv1/bias/ExponentialMovingAverage"),
            getVar(prefix + "6/conv0/conv2d/kernel/ExponentialMovingAverage"),
            getVar(prefix + "6/conv0/bias/ExponentialMovingAverage"),
            getVar(prefix + "6/conv1/conv2d/kernel/ExponentialMovingAverage"),
            getVar(prefix + "6/conv1/bias/ExponentialMovingAverage"),
            getVar(prefix + "7/conv0/conv2d/kernel/ExponentialMovingAverage"),
            getVar(prefix + "7/conv0/bias/ExponentialMovingAverage"),
            getVar(prefix + "7/conv1/conv2d/kernel/ExponentialMovingAverage"),
            getVar(prefix + "7/conv1/bias/ExponentialMovingAverage"),
            getVar(prefix + "7/to_rgb/conv2d/kernel/ExponentialMovingAverage"),
            getVar(prefix + "7/to_rgb/bias/ExponentialMovingAverage"),
        ];
        this.nn.setWeights(weights);
    };
    GANSynth.prototype.predict = function (inputs, batchSize) {
        return this.nn.predict(inputs, { batchSize: batchSize });
    };
    GANSynth.prototype.randomSample = function (pitch) {
        var _this = this;
        return tf.tidy(function () {
            var z = tf.randomNormal([1, _this.nLatents], 0, 1, 'float32');
            var pitchIdx = tf.tensor1d([pitch - _this.minMidiPitch], 'int32');
            var pitchOneHot = tf.oneHot(pitchIdx, _this.midiPitches);
            var cond = tf.concat([z, pitchOneHot], 1).expandDims(1).expandDims(1);
            var specgrams = _this.predict(cond, 1);
            return specgrams;
        });
    };
    GANSynth.prototype.specgramsToAudio = function (specgrams) {
        return audio_utils_1.specgramsToAudio(specgrams);
    };
    return GANSynth;
}());
exports.GANSynth = GANSynth;
//# sourceMappingURL=model.js.map