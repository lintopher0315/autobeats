import { InputLayerArgs } from './engine/input_layer';
import { Layer, LayerArgs } from './engine/topology';
import { input } from './exports';
import { ELULayerArgs, LeakyReLULayerArgs, PReLULayerArgs, ReLULayerArgs, SoftmaxLayerArgs, ThresholdedReLULayerArgs } from './layers/advanced_activations';
import { ConvLayerArgs, Cropping2DLayerArgs, SeparableConvLayerArgs, UpSampling2DLayerArgs } from './layers/convolutional';
import { DepthwiseConv2DLayerArgs } from './layers/convolutional_depthwise';
import { ActivationLayerArgs, DenseLayerArgs, DropoutLayerArgs, PermuteLayerArgs, RepeatVectorLayerArgs, ReshapeLayerArgs } from './layers/core';
import { EmbeddingLayerArgs } from './layers/embeddings';
import { ConcatenateLayerArgs, DotLayerArgs } from './layers/merge';
import { BatchNormalizationLayerArgs } from './layers/normalization';
import { ZeroPadding2DLayerArgs } from './layers/padding';
import { GlobalPooling2DLayerArgs, Pooling1DLayerArgs, Pooling2DLayerArgs } from './layers/pooling';
import { GRUCellLayerArgs, GRULayerArgs, LSTMCellLayerArgs, LSTMLayerArgs, RNN, RNNCell, RNNLayerArgs, SimpleRNNCellLayerArgs, SimpleRNNLayerArgs, StackedRNNCellsArgs } from './layers/recurrent';
import { BidirectionalLayerArgs, Wrapper, WrapperLayerArgs } from './layers/wrappers';
export declare function inputLayer(args: InputLayerArgs): Layer;
export declare function elu(args?: ELULayerArgs): Layer;
export declare function reLU(args?: ReLULayerArgs): Layer;
export declare function leakyReLU(args?: LeakyReLULayerArgs): Layer;
export declare function prelu(args?: PReLULayerArgs): Layer;
export declare function softmax(args?: SoftmaxLayerArgs): Layer;
export declare function thresholdedReLU(args?: ThresholdedReLULayerArgs): Layer;
export declare function conv1d(args: ConvLayerArgs): Layer;
export declare function conv2d(args: ConvLayerArgs): Layer;
export declare function conv2dTranspose(args: ConvLayerArgs): Layer;
export declare function separableConv2d(args: SeparableConvLayerArgs): Layer;
export declare function cropping2D(args: Cropping2DLayerArgs): Layer;
export declare function upSampling2d(args: UpSampling2DLayerArgs): Layer;
export declare function depthwiseConv2d(args: DepthwiseConv2DLayerArgs): Layer;
export declare function activation(args: ActivationLayerArgs): Layer;
export declare function dense(args: DenseLayerArgs): Layer;
export declare function dropout(args: DropoutLayerArgs): Layer;
export declare function flatten(args?: LayerArgs): Layer;
export declare function repeatVector(args: RepeatVectorLayerArgs): Layer;
export declare function reshape(args: ReshapeLayerArgs): Layer;
export declare function permute(args: PermuteLayerArgs): Layer;
export declare function embedding(args: EmbeddingLayerArgs): Layer;
export declare function add(args?: LayerArgs): Layer;
export declare function average(args?: LayerArgs): Layer;
export declare function concatenate(args?: ConcatenateLayerArgs): Layer;
export declare function maximum(args?: LayerArgs): Layer;
export declare function minimum(args?: LayerArgs): Layer;
export declare function multiply(args?: LayerArgs): Layer;
export declare function dot(args: DotLayerArgs): Layer;
export declare function batchNormalization(args?: BatchNormalizationLayerArgs): Layer;
export declare function zeroPadding2d(args?: ZeroPadding2DLayerArgs): Layer;
export declare function averagePooling1d(args: Pooling1DLayerArgs): Layer;
export declare function avgPool1d(args: Pooling1DLayerArgs): Layer;
export declare function avgPooling1d(args: Pooling1DLayerArgs): Layer;
export declare function averagePooling2d(args: Pooling2DLayerArgs): Layer;
export declare function avgPool2d(args: Pooling2DLayerArgs): Layer;
export declare function avgPooling2d(args: Pooling2DLayerArgs): Layer;
export declare function globalAveragePooling1d(args?: LayerArgs): Layer;
export declare function globalAveragePooling2d(args: GlobalPooling2DLayerArgs): Layer;
export declare function globalMaxPooling1d(args?: LayerArgs): Layer;
export declare function globalMaxPooling2d(args: GlobalPooling2DLayerArgs): Layer;
export declare function maxPooling1d(args: Pooling1DLayerArgs): Layer;
export declare function maxPooling2d(args: Pooling2DLayerArgs): Layer;
export declare function gru(args: GRULayerArgs): Layer;
export declare function gruCell(args: GRUCellLayerArgs): RNNCell;
export declare function lstm(args: LSTMLayerArgs): Layer;
export declare function lstmCell(args: LSTMCellLayerArgs): RNNCell;
export declare function simpleRNN(args: SimpleRNNLayerArgs): Layer;
export declare function simpleRNNCell(args: SimpleRNNCellLayerArgs): RNNCell;
export declare function rnn(args: RNNLayerArgs): Layer;
export declare function stackedRNNCells(args: StackedRNNCellsArgs): RNNCell;
export declare function bidirectional(args: BidirectionalLayerArgs): Wrapper;
export declare function timeDistributed(args: WrapperLayerArgs): Layer;
export declare const globalMaxPool1d: typeof globalMaxPooling1d;
export declare const globalMaxPool2d: typeof globalMaxPooling2d;
export declare const maxPool1d: typeof maxPooling1d;
export declare const maxPool2d: typeof maxPooling2d;
export { Layer, RNN, RNNCell, input };
