import { DataType } from '@tensorflow/tfjs-core';
import { Shape } from './common';
import { NodeConfig } from './node_config';
import { BaseSerialization, PyJson, PyJsonDict } from './types';
export interface LayerConfig extends PyJsonDict {
    input_shape?: Shape;
    batch_input_shape?: Shape;
    batch_size?: number;
    dtype?: DataType;
    name?: string;
    trainable?: boolean;
    updatable?: boolean;
    input_dtype?: DataType;
}
export declare type JsonLayer<C extends LayerConfig> = C & LayerConfig & PyJson<Extract<keyof C, string> | Extract<keyof LayerConfig, string>>;
export interface BaseLayerSerialization<N extends string, C extends LayerConfig> extends BaseSerialization<N, JsonLayer<C>> {
    name: string;
    inbound_nodes?: NodeConfig[];
}
