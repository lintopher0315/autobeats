{"version":3,"file":"tf-converter.min.js","sources":["../node_modules/@protobufjs/aspromise/index.js","../node_modules/@protobufjs/base64/index.js","../node_modules/@protobufjs/eventemitter/index.js","../node_modules/@protobufjs/float/index.js","../node_modules/@protobufjs/inquire/index.js","../node_modules/@protobufjs/utf8/index.js","../node_modules/@protobufjs/pool/index.js","../node_modules/protobufjs/src/util/longbits.js","../node_modules/protobufjs/src/util/minimal.js","../node_modules/protobufjs/src/writer.js","../node_modules/protobufjs/src/writer_buffer.js","../node_modules/protobufjs/src/reader.js","../node_modules/protobufjs/src/reader_buffer.js","../node_modules/protobufjs/src/rpc/service.js","../node_modules/protobufjs/src/rpc.js","../node_modules/protobufjs/src/index-minimal.js","../node_modules/protobufjs/minimal.js","../src/data/compiled_api.js","../src/operations/executors/utils.ts","../src/operations/op_list/arithmetic.ts","../src/operations/op_list/basic_math.ts","../src/operations/op_list/control.ts","../src/operations/op_list/convolution.ts","../src/operations/op_list/creation.ts","../src/operations/op_list/dynamic.ts","../src/operations/op_list/evaluation.ts","../src/operations/op_list/graph.ts","../src/operations/op_list/image.ts","../src/operations/op_list/logical.ts","../src/operations/op_list/matrices.ts","../src/operations/op_list/normalization.ts","../src/operations/op_list/reduction.ts","../src/operations/op_list/slice_join.ts","../src/operations/op_list/spectral.ts","../src/operations/op_list/transformation.ts","../src/operations/operation_mapper.ts","../src/operations/executors/arithmetic_executor.ts","../src/operations/executors/basic_math_executor.ts","../src/executor/tensor_array.ts","../src/operations/executors/control_executor.ts","../src/operations/executors/convolution_executor.ts","../src/operations/executors/creation_executor.ts","../src/operations/executors/dynamic_executor.ts","../src/operations/executors/evaluation_executor.ts","../src/operations/executors/graph_executor.ts","../src/operations/executors/image_executor.ts","../src/operations/executors/logical_executor.ts","../src/operations/executors/matrices_executor.ts","../src/operations/executors/normalization_executor.ts","../src/operations/executors/reduction_executor.ts","../src/operations/executors/slice_join_executor.ts","../src/operations/executors/spectral_executor.ts","../src/operations/executors/transformation_executor.ts","../src/operations/operation_executor.ts","../src/executor/execution_context.ts","../src/executor/graph_executor.ts","../src/executor/frozen_model.ts","../src/data/compiled_api_json.ts","../src/operations/operation_mapper_json.ts","../src/executor/frozen_model_json.ts","../src/version.ts","../src/index.ts"],"sourcesContent":["\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(\"../util/minimal\");\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low 32 bits, unsigned\r\n * @param {number} hi High 32 bits, unsigned\r\n */\r\nfunction LongBits(lo, hi) {\r\n\r\n    // note that the casts below are theoretically unnecessary as of today, but older statically\r\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo >>> 0;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi >>> 0;\r\n}\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Zero hash.\r\n * @memberof util.LongBits\r\n * @type {string}\r\n */\r\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign = value < 0;\r\n    if (sign)\r\n        value = -value;\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0;\r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    if (typeof value === \"number\")\r\n        return LongBits.fromNumber(value);\r\n    if (util.isString(value)) {\r\n        /* istanbul ignore else */\r\n        if (util.Long)\r\n            value = util.Long.fromString(value);\r\n        else\r\n            return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBits.prototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        var lo = ~this.lo + 1 >>> 0,\r\n            hi = ~this.hi     >>> 0;\r\n        if (!lo)\r\n            hi = hi + 1 >>> 0;\r\n        return -(lo + hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBits.prototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\r\n        /* istanbul ignore next */\r\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    if (hash === zeroHash)\r\n        return zero;\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBits.prototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24      ,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBits.prototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    return part2 === 0\r\n         ? part1 === 0\r\n           ? part0 < 16384\r\n             ? part0 < 128 ? 1 : 2\r\n             : part0 < 2097152 ? 3 : 4\r\n           : part1 < 16384\r\n             ? part1 < 128 ? 5 : 6\r\n             : part1 < 2097152 ? 7 : 8\r\n         : part2 < 128 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\nvar util = exports;\r\n\r\n// used to return a Promise where callback is omitted\r\nutil.asPromise = require(\"@protobufjs/aspromise\");\r\n\r\n// converts to / from base64 encoded strings\r\nutil.base64 = require(\"@protobufjs/base64\");\r\n\r\n// base class of rpc.Service\r\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\r\n\r\n// float handling accross browsers\r\nutil.float = require(\"@protobufjs/float\");\r\n\r\n// requires modules optionally and hides the call from bundlers\r\nutil.inquire = require(\"@protobufjs/inquire\");\r\n\r\n// converts to / from utf8 encoded strings\r\nutil.utf8 = require(\"@protobufjs/utf8\");\r\n\r\n// provides a node-like buffer pool in the browser\r\nutil.pool = require(\"@protobufjs/pool\");\r\n\r\n// utility to work with the low and high bits of a 64 bit value\r\nutil.LongBits = require(\"./longbits\");\r\n\r\n// global object reference\r\nutil.global = typeof window !== \"undefined\" && window\r\n           || typeof global !== \"undefined\" && global\r\n           || typeof self   !== \"undefined\" && self\r\n           || this; // eslint-disable-line no-invalid-this\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n * @const\r\n */\r\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n * @const\r\n */\r\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n * @const\r\n */\r\nutil.isNode = Boolean(util.global.process && util.global.process.versions && util.global.process.versions.node);\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === \"string\" || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return value && typeof value === \"object\";\r\n};\r\n\r\n/**\r\n * Checks if a property on a message is considered to be present.\r\n * This is an alias of {@link util.isSet}.\r\n * @function\r\n * @param {Object} obj Plain object or message instance\r\n * @param {string} prop Property name\r\n * @returns {boolean} `true` if considered to be present, otherwise `false`\r\n */\r\nutil.isset =\r\n\r\n/**\r\n * Checks if a property on a message is considered to be present.\r\n * @param {Object} obj Plain object or message instance\r\n * @param {string} prop Property name\r\n * @returns {boolean} `true` if considered to be present, otherwise `false`\r\n */\r\nutil.isSet = function isSet(obj, prop) {\r\n    var value = obj[prop];\r\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\r\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\r\n    return false;\r\n};\r\n\r\n/**\r\n * Any compatible Buffer instance.\r\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\r\n * @interface Buffer\r\n * @extends Uint8Array\r\n */\r\n\r\n/**\r\n * Node's Buffer class if available.\r\n * @type {Constructor<Buffer>}\r\n */\r\nutil.Buffer = (function() {\r\n    try {\r\n        var Buffer = util.inquire(\"buffer\").Buffer;\r\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\r\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\r\n    } catch (e) {\r\n        /* istanbul ignore next */\r\n        return null;\r\n    }\r\n})();\r\n\r\n// Internal alias of or polyfull for Buffer.from.\r\nutil._Buffer_from = null;\r\n\r\n// Internal alias of or polyfill for Buffer.allocUnsafe.\r\nutil._Buffer_allocUnsafe = null;\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\r\n * @returns {Uint8Array|Buffer} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(sizeOrArray) {\r\n    /* istanbul ignore next */\r\n    return typeof sizeOrArray === \"number\"\r\n        ? util.Buffer\r\n            ? util._Buffer_allocUnsafe(sizeOrArray)\r\n            : new util.Array(sizeOrArray)\r\n        : util.Buffer\r\n            ? util._Buffer_from(sizeOrArray)\r\n            : typeof Uint8Array === \"undefined\"\r\n                ? sizeOrArray\r\n                : new Uint8Array(sizeOrArray);\r\n};\r\n\r\n/**\r\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\r\n * @type {Constructor<Uint8Array>}\r\n */\r\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\r\n\r\n/**\r\n * Any compatible Long instance.\r\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\r\n * @interface Long\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Long.js's Long class if available.\r\n * @type {Constructor<Long>}\r\n */\r\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\r\n         || /* istanbul ignore next */ util.global.Long\r\n         || util.inquire(\"long\");\r\n\r\n/**\r\n * Regular expression used to verify 2 bit (`bool`) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key2Re = /^true|false|0|1$/;\r\n\r\n/**\r\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\r\n\r\n/**\r\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? util.LongBits.from(value).toHash()\r\n        : util.LongBits.zeroHash;\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = util.LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @memberof util\r\n * @param {Object.<string,*>} dst Destination object\r\n * @param {Object.<string,*>} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object.<string,*>} Destination object\r\n */\r\nfunction merge(dst, src, ifNotSet) { // used by converters\r\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\r\n        if (dst[keys[i]] === undefined || !ifNotSet)\r\n            dst[keys[i]] = src[keys[i]];\r\n    return dst;\r\n}\r\n\r\nutil.merge = merge;\r\n\r\n/**\r\n * Converts the first character of a string to lower case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.lcFirst = function lcFirst(str) {\r\n    return str.charAt(0).toLowerCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Creates a custom error constructor.\r\n * @memberof util\r\n * @param {string} name Error name\r\n * @returns {Constructor<Error>} Custom error constructor\r\n */\r\nfunction newError(name) {\r\n\r\n    function CustomError(message, properties) {\r\n\r\n        if (!(this instanceof CustomError))\r\n            return new CustomError(message, properties);\r\n\r\n        // Error.call(this, message);\r\n        // ^ just returns a new error instance because the ctor can be called as a function\r\n\r\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\r\n\r\n        /* istanbul ignore next */\r\n        if (Error.captureStackTrace) // node\r\n            Error.captureStackTrace(this, CustomError);\r\n        else\r\n            Object.defineProperty(this, \"stack\", { value: (new Error()).stack || \"\" });\r\n\r\n        if (properties)\r\n            merge(this, properties);\r\n    }\r\n\r\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\r\n\r\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\r\n\r\n    CustomError.prototype.toString = function toString() {\r\n        return this.name + \": \" + this.message;\r\n    };\r\n\r\n    return CustomError;\r\n}\r\n\r\nutil.newError = newError;\r\n\r\n/**\r\n * Constructs a new protocol error.\r\n * @classdesc Error subclass indicating a protocol specifc error.\r\n * @memberof util\r\n * @extends Error\r\n * @template T extends Message<T>\r\n * @constructor\r\n * @param {string} message Error message\r\n * @param {Object.<string,*>} [properties] Additional properties\r\n * @example\r\n * try {\r\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\r\n * } catch (e) {\r\n *     if (e instanceof ProtocolError && e.instance)\r\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\r\n * }\r\n */\r\nutil.ProtocolError = newError(\"ProtocolError\");\r\n\r\n/**\r\n * So far decoded message instance.\r\n * @name util.ProtocolError#instance\r\n * @type {Message<T>}\r\n */\r\n\r\n/**\r\n * A OneOf getter as returned by {@link util.oneOfGetter}.\r\n * @typedef OneOfGetter\r\n * @type {function}\r\n * @returns {string|undefined} Set field name, if any\r\n */\r\n\r\n/**\r\n * Builds a getter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {OneOfGetter} Unbound getter\r\n */\r\nutil.oneOfGetter = function getOneOf(fieldNames) {\r\n    var fieldMap = {};\r\n    for (var i = 0; i < fieldNames.length; ++i)\r\n        fieldMap[fieldNames[i]] = 1;\r\n\r\n    /**\r\n     * @returns {string|undefined} Set field name, if any\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function() { // eslint-disable-line consistent-return\r\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\r\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\r\n                return keys[i];\r\n    };\r\n};\r\n\r\n/**\r\n * A OneOf setter as returned by {@link util.oneOfSetter}.\r\n * @typedef OneOfSetter\r\n * @type {function}\r\n * @param {string|undefined} value Field name\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Builds a setter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {OneOfSetter} Unbound setter\r\n */\r\nutil.oneOfSetter = function setOneOf(fieldNames) {\r\n\r\n    /**\r\n     * @param {string} name Field name\r\n     * @returns {undefined}\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function(name) {\r\n        for (var i = 0; i < fieldNames.length; ++i)\r\n            if (fieldNames[i] !== name)\r\n                delete this[fieldNames[i]];\r\n    };\r\n};\r\n\r\n/**\r\n * Default conversion options used for {@link Message#toJSON} implementations.\r\n *\r\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\r\n *\r\n * - Longs become strings\r\n * - Enums become string keys\r\n * - Bytes become base64 encoded strings\r\n * - (Sub-)Messages become plain objects\r\n * - Maps become plain objects with all string keys\r\n * - Repeated fields become arrays\r\n * - NaN and Infinity for float and double fields become strings\r\n *\r\n * @type {IConversionOptions}\r\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\r\n */\r\nutil.toJSONOptions = {\r\n    longs: String,\r\n    enums: String,\r\n    bytes: String,\r\n    json: true\r\n};\r\n\r\n// Sets up buffer utility according to the environment (called in index-minimal)\r\nutil._configure = function() {\r\n    var Buffer = util.Buffer;\r\n    /* istanbul ignore if */\r\n    if (!Buffer) {\r\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\r\n        return;\r\n    }\r\n    // because node 4.x buffers are incompatible & immutable\r\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\r\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\r\n        /* istanbul ignore next */\r\n        function Buffer_from(value, encoding) {\r\n            return new Buffer(value, encoding);\r\n        };\r\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\r\n        /* istanbul ignore next */\r\n        function Buffer_allocUnsafe(size) {\r\n            return new Buffer(size);\r\n        };\r\n};\r\n","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nvar util      = require(\"./util/minimal\");\r\n\r\nvar BufferWriter; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {*} val Value to write\r\n * @ignore\r\n */\r\nfunction Op(fn, len, val) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {Writer.Op|undefined}\r\n     */\r\n    this.next = undefined;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val; // type varies\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {State|null}\r\n     */\r\n    this.next = writer.states;\r\n}\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {Object|null}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @function\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = util.Buffer\r\n    ? function create_buffer_setup() {\r\n        return (Writer.create = function create_buffer() {\r\n            return new BufferWriter();\r\n        })();\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array() {\r\n        return new Writer();\r\n    };\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new util.Array(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\n/* istanbul ignore else */\r\nif (util.Array !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n * @private\r\n */\r\nWriter.prototype._push = function push(fn, len, val) {\r\n    this.tail = this.tail.next = new Op(fn, len, val);\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Constructs a new varint writer operation instance.\r\n * @classdesc Scheduled varint writer operation.\r\n * @extends Op\r\n * @constructor\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @ignore\r\n */\r\nfunction VarintOp(len, val) {\r\n    this.len = len;\r\n    this.next = undefined;\r\n    this.val = val;\r\n}\r\n\r\nVarintOp.prototype = Object.create(Op.prototype);\r\nVarintOp.prototype.fn = writeVarint32;\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.uint32 = function write_uint32(value) {\r\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\r\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\r\n    this.len += (this.tail = this.tail.next = new VarintOp(\r\n        (value = value >>> 0)\r\n                < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5,\r\n    value)).len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sint32 = function write_sint32(value) {\r\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this._push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.int64 = Writer.prototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this._push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bool = function write_bool(value) {\r\n    return this._push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos    ] =  val         & 255;\r\n    buf[pos + 1] =  val >>> 8   & 255;\r\n    buf[pos + 2] =  val >>> 16  & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fixed32 = function write_fixed32(value) {\r\n    return this._push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as fixed 32 bits.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as fixed 64 bits.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.float = function write_float(value) {\r\n    return this._push(util.float.writeFloatLE, 4, value);\r\n};\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.double = function write_double(value) {\r\n    return this._push(util.float.writeDoubleLE, 8, value);\r\n};\r\n\r\nvar writeBytes = util.Array.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos); // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (!len)\r\n        return this._push(writeByte, 1, 0);\r\n    if (util.isString(value)) {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return this.uint32(len)._push(writeBytes, len, value);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len)._push(utf8.write, len, value)\r\n        : this._push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fork = function fork() {\r\n    this.states = new State(this);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.ldelim = function ldelim() {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset().uint32(len);\r\n    if (len) {\r\n        this.tail.next = head.next; // skip noop\r\n        this.tail = tail;\r\n        this.len += len;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriter.prototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len),\r\n        pos  = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    // this.head = this.tail = null;\r\n    return buf;\r\n};\r\n\r\nWriter._configure = function(BufferWriter_) {\r\n    BufferWriter = BufferWriter_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferWriter;\r\n\r\n// extends Writer\r\nvar Writer = require(\"./writer\");\r\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\r\n\r\nvar util = require(\"./util/minimal\");\r\n\r\nvar Buffer = util.Buffer;\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Buffer} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    return (BufferWriter.alloc = util._Buffer_allocUnsafe)(size);\r\n};\r\n\r\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\r\n    ? function writeBytesBuffer_set(val, buf, pos) {\r\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\r\n                           // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytesBuffer_copy(val, buf, pos) {\r\n        if (val.copy) // Buffer values\r\n            val.copy(buf, pos, 0, val.length);\r\n        else for (var i = 0; i < val.length;) // plain array values\r\n            buf[pos++] = val[i++];\r\n    };\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\r\n    if (util.isString(value))\r\n        value = util._Buffer_from(value, \"base64\");\r\n    var len = value.length >>> 0;\r\n    this.uint32(len);\r\n    if (len)\r\n        this._push(writeBytesBuffer, len, value);\r\n    return this;\r\n};\r\n\r\nfunction writeStringBuffer(val, buf, pos) {\r\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\r\n        util.utf8.write(val, buf, pos);\r\n    else\r\n        buf.utf8Write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.string = function write_string_buffer(value) {\r\n    var len = Buffer.byteLength(value);\r\n    this.uint32(len);\r\n    if (len)\r\n        this._push(writeStringBuffer, len, value);\r\n    return this;\r\n};\r\n\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @name BufferWriter#finish\r\n * @function\r\n * @returns {Buffer} Finished buffer\r\n */\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nvar util      = require(\"./util/minimal\");\r\n\r\nvar BufferReader; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\n\r\n/* istanbul ignore next */\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\nvar create_array = typeof Uint8Array !== \"undefined\"\r\n    ? function create_typed_array(buffer) {\r\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\r\n            return new Reader(buffer);\r\n        throw Error(\"illegal buffer\");\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array(buffer) {\r\n        if (Array.isArray(buffer))\r\n            return new Reader(buffer);\r\n        throw Error(\"illegal buffer\");\r\n    };\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @function\r\n * @param {Uint8Array|Buffer} buffer Buffer to read from\r\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n * @throws {Error} If `buffer` is not a valid buffer\r\n */\r\nReader.create = util.Buffer\r\n    ? function create_buffer_setup(buffer) {\r\n        return (Reader.create = function create_buffer(buffer) {\r\n            return util.Buffer.isBuffer(buffer)\r\n                ? new BufferReader(buffer)\r\n                /* istanbul ignore next */\r\n                : create_array(buffer);\r\n        })(buffer);\r\n    }\r\n    /* istanbul ignore next */\r\n    : create_array;\r\n\r\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.uint32 = (function read_uint32_setup() {\r\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\r\n    return function read_uint32() {\r\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n\r\n        /* istanbul ignore if */\r\n        if ((this.pos += 5) > this.len) {\r\n            this.pos = this.len;\r\n            throw indexOutOfRange(this, 10);\r\n        }\r\n        return value;\r\n    };\r\n})();\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.int32 = function read_int32() {\r\n    return this.uint32() | 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sint32 = function read_sint32() {\r\n    var value = this.uint32();\r\n    return value >>> 1 ^ -(value & 1) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    // tends to deopt with local vars for octet etc.\r\n    var bits = new LongBits(0, 0);\r\n    var i = 0;\r\n    if (this.len - this.pos > 4) { // fast route (lo)\r\n        for (; i < 4; ++i) {\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n        i = 0;\r\n    } else {\r\n        for (; i < 3; ++i) {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 1st..3th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 4th\r\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\r\n        return bits;\r\n    }\r\n    if (this.len - this.pos > 4) { // fast route (hi)\r\n        for (; i < 5; ++i) {\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    } else {\r\n        for (; i < 5; ++i) {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    }\r\n    /* istanbul ignore next */\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReader.prototype.bool = function read_bool() {\r\n    return this.uint32() !== 0;\r\n};\r\n\r\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\r\n    return (buf[end - 4]\r\n          | buf[end - 3] << 8\r\n          | buf[end - 2] << 16\r\n          | buf[end - 1] << 24) >>> 0;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as an unsigned 32 bit integer.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.fixed32 = function read_fixed32() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32_end(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads fixed 32 bits as a signed 32 bit integer.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sfixed32 = function read_sfixed32() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n\r\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.float = function read_float() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = util.float.readFloatLE(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.double = function read_double() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = util.float.readDoubleLE(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReader.prototype.bytes = function read_bytes() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n\r\n    /* istanbul ignore if */\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n\r\n    this.pos += length;\r\n    if (Array.isArray(this.buf)) // plain array\r\n        return this.buf.slice(start, end);\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReader.prototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skip = function skip(length) {\r\n    if (typeof length === \"number\") {\r\n        /* istanbul ignore if */\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    } else {\r\n        do {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            while ((wireType = this.uint32() & 7) !== 4) {\r\n                this.skipType(wireType);\r\n            }\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n\r\n        /* istanbul ignore next */\r\n        default:\r\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\r\n    }\r\n    return this;\r\n};\r\n\r\nReader._configure = function(BufferReader_) {\r\n    BufferReader = BufferReader_;\r\n\r\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\r\n    util.merge(Reader.prototype, {\r\n\r\n        int64: function read_int64() {\r\n            return readLongVarint.call(this)[fn](false);\r\n        },\r\n\r\n        uint64: function read_uint64() {\r\n            return readLongVarint.call(this)[fn](true);\r\n        },\r\n\r\n        sint64: function read_sint64() {\r\n            return readLongVarint.call(this).zzDecode()[fn](false);\r\n        },\r\n\r\n        fixed64: function read_fixed64() {\r\n            return readFixed64.call(this)[fn](true);\r\n        },\r\n\r\n        sfixed64: function read_sfixed64() {\r\n            return readFixed64.call(this)[fn](false);\r\n        }\r\n\r\n    });\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferReader;\r\n\r\n// extends Reader\r\nvar Reader = require(\"./reader\");\r\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\r\n\r\nvar util = require(\"./util/minimal\");\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    Reader.call(this, buffer);\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @name BufferReader#buf\r\n     * @type {Buffer}\r\n     */\r\n}\r\n\r\n/* istanbul ignore else */\r\nif (util.Buffer)\r\n    BufferReader.prototype._slice = util.Buffer.prototype.slice;\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReader.prototype.string = function read_string_buffer() {\r\n    var len = this.uint32(); // modifies pos\r\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @name BufferReader#bytes\r\n * @function\r\n * @returns {Buffer} Value read\r\n */\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar util = require(\"../util/minimal\");\r\n\r\n// Extends EventEmitter\r\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\r\n\r\n/**\r\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\r\n *\r\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\r\n * @typedef rpc.ServiceMethodCallback\r\n * @template TRes extends Message<TRes>\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {TRes} [response] Response message\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\r\n * @typedef rpc.ServiceMethod\r\n * @template TReq extends Message<TReq>\r\n * @template TRes extends Message<TRes>\r\n * @type {function}\r\n * @param {TReq|Properties<TReq>} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\r\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\r\n */\r\n\r\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @exports rpc.Service\r\n * @extends util.EventEmitter\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n */\r\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\r\n\r\n    if (typeof rpcImpl !== \"function\")\r\n        throw TypeError(\"rpcImpl must be a function\");\r\n\r\n    util.EventEmitter.call(this);\r\n\r\n    /**\r\n     * RPC implementation. Becomes `null` once the service is ended.\r\n     * @type {RPCImpl|null}\r\n     */\r\n    this.rpcImpl = rpcImpl;\r\n\r\n    /**\r\n     * Whether requests are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.requestDelimited = Boolean(requestDelimited);\r\n\r\n    /**\r\n     * Whether responses are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.responseDelimited = Boolean(responseDelimited);\r\n}\r\n\r\n/**\r\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\r\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\r\n * @param {Constructor<TReq>} requestCtor Request constructor\r\n * @param {Constructor<TRes>} responseCtor Response constructor\r\n * @param {TReq|Properties<TReq>} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\r\n * @returns {undefined}\r\n * @template TReq extends Message<TReq>\r\n * @template TRes extends Message<TRes>\r\n */\r\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\r\n\r\n    if (!request)\r\n        throw TypeError(\"request must be specified\");\r\n\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\r\n\r\n    if (!self.rpcImpl) {\r\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\r\n        return undefined;\r\n    }\r\n\r\n    try {\r\n        return self.rpcImpl(\r\n            method,\r\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\r\n            function rpcCallback(err, response) {\r\n\r\n                if (err) {\r\n                    self.emit(\"error\", err, method);\r\n                    return callback(err);\r\n                }\r\n\r\n                if (response === null) {\r\n                    self.end(/* endedByRPC */ true);\r\n                    return undefined;\r\n                }\r\n\r\n                if (!(response instanceof responseCtor)) {\r\n                    try {\r\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\r\n                    } catch (err) {\r\n                        self.emit(\"error\", err, method);\r\n                        return callback(err);\r\n                    }\r\n                }\r\n\r\n                self.emit(\"data\", response, method);\r\n                return callback(null, response);\r\n            }\r\n        );\r\n    } catch (err) {\r\n        self.emit(\"error\", err, method);\r\n        setTimeout(function() { callback(err); }, 0);\r\n        return undefined;\r\n    }\r\n};\r\n\r\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\r\nService.prototype.end = function end(endedByRPC) {\r\n    if (this.rpcImpl) {\r\n        if (!endedByRPC) // signal end to rpcImpl\r\n            this.rpcImpl(null, null, null);\r\n        this.rpcImpl = null;\r\n        this.emit(\"end\").off();\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\r\nvar rpc = exports;\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {RPCImplCallback} callback Callback function\r\n * @returns {undefined}\r\n * @example\r\n * function rpcImpl(method, requestData, callback) {\r\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\r\n *         throw Error(\"no such method\");\r\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\r\n *         callback(err, responseData);\r\n *     });\r\n * }\r\n */\r\n\r\n/**\r\n * Node-style callback as used by {@link RPCImpl}.\r\n * @typedef RPCImplCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any, otherwise `null`\r\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\nrpc.Service = require(\"./rpc/service\");\r\n","\"use strict\";\r\nvar protobuf = exports;\r\n\r\n/**\r\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\r\n * @name build\r\n * @type {string}\r\n * @const\r\n */\r\nprotobuf.build = \"minimal\";\r\n\r\n// Serialization\r\nprotobuf.Writer       = require(\"./writer\");\r\nprotobuf.BufferWriter = require(\"./writer_buffer\");\r\nprotobuf.Reader       = require(\"./reader\");\r\nprotobuf.BufferReader = require(\"./reader_buffer\");\r\n\r\n// Utility\r\nprotobuf.util         = require(\"./util/minimal\");\r\nprotobuf.rpc          = require(\"./rpc\");\r\nprotobuf.roots        = require(\"./roots\");\r\nprotobuf.configure    = configure;\r\n\r\n/* istanbul ignore next */\r\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    protobuf.Reader._configure(protobuf.BufferReader);\r\n    protobuf.util._configure();\r\n}\r\n\r\n// Set up buffer utility according to the environment\r\nprotobuf.Writer._configure(protobuf.BufferWriter);\r\nconfigure();\r\n","// minimal library entry point.\r\n\r\n\"use strict\";\r\nmodule.exports = require(\"./src/index-minimal\");\r\n","/*eslint-disable block-scoped-var, no-redeclare, no-control-regex, no-prototype-builtins*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\nvar $Reader = $protobuf.Reader, $util = $protobuf.util;\n\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.tensorflow = (function() {\n\n    var tensorflow = {};\n\n    tensorflow.Any = (function() {\n\n        function Any(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        Any.prototype.typeUrl = \"\";\n        Any.prototype.value = $util.newBuffer([]);\n\n        Any.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.tensorflow.Any();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.typeUrl = r.string();\n                    break;\n                case 2:\n                    m.value = r.bytes();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return Any;\n    })();\n\n    tensorflow.DataType = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"DT_INVALID\"] = 0;\n        values[valuesById[1] = \"DT_FLOAT\"] = 1;\n        values[valuesById[2] = \"DT_DOUBLE\"] = 2;\n        values[valuesById[3] = \"DT_INT32\"] = 3;\n        values[valuesById[4] = \"DT_UINT8\"] = 4;\n        values[valuesById[5] = \"DT_INT16\"] = 5;\n        values[valuesById[6] = \"DT_INT8\"] = 6;\n        values[valuesById[7] = \"DT_STRING\"] = 7;\n        values[valuesById[8] = \"DT_COMPLEX64\"] = 8;\n        values[valuesById[9] = \"DT_INT64\"] = 9;\n        values[valuesById[10] = \"DT_BOOL\"] = 10;\n        values[valuesById[11] = \"DT_QINT8\"] = 11;\n        values[valuesById[12] = \"DT_QUINT8\"] = 12;\n        values[valuesById[13] = \"DT_QINT32\"] = 13;\n        values[valuesById[14] = \"DT_BFLOAT16\"] = 14;\n        values[valuesById[101] = \"DT_FLOAT_REF\"] = 101;\n        values[valuesById[102] = \"DT_DOUBLE_REF\"] = 102;\n        values[valuesById[103] = \"DT_INT32_REF\"] = 103;\n        values[valuesById[104] = \"DT_UINT8_REF\"] = 104;\n        values[valuesById[105] = \"DT_INT16_REF\"] = 105;\n        values[valuesById[106] = \"DT_INT8_REF\"] = 106;\n        values[valuesById[107] = \"DT_STRING_REF\"] = 107;\n        values[valuesById[108] = \"DT_COMPLEX64_REF\"] = 108;\n        values[valuesById[109] = \"DT_INT64_REF\"] = 109;\n        values[valuesById[110] = \"DT_BOOL_REF\"] = 110;\n        values[valuesById[111] = \"DT_QINT8_REF\"] = 111;\n        values[valuesById[112] = \"DT_QUINT8_REF\"] = 112;\n        values[valuesById[113] = \"DT_QINT32_REF\"] = 113;\n        values[valuesById[114] = \"DT_BFLOAT16_REF\"] = 114;\n        return values;\n    })();\n\n    tensorflow.TensorShape = (function() {\n\n        function TensorShape(p) {\n            this.dim = [];\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        TensorShape.prototype.dim = $util.emptyArray;\n        TensorShape.prototype.unknownRank = false;\n\n        TensorShape.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.tensorflow.TensorShape();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 2:\n                    if (!(m.dim && m.dim.length))\n                        m.dim = [];\n                    m.dim.push($root.tensorflow.TensorShape.Dim.decode(r, r.uint32()));\n                    break;\n                case 3:\n                    m.unknownRank = r.bool();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        TensorShape.Dim = (function() {\n\n            function Dim(p) {\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n\n            Dim.prototype.size = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n            Dim.prototype.name = \"\";\n\n            Dim.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.tensorflow.TensorShape.Dim();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1:\n                        m.size = r.int64();\n                        break;\n                    case 2:\n                        m.name = r.string();\n                        break;\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n\n            return Dim;\n        })();\n\n        return TensorShape;\n    })();\n\n    tensorflow.Tensor = (function() {\n\n        function Tensor(p) {\n            this.floatVal = [];\n            this.doubleVal = [];\n            this.intVal = [];\n            this.stringVal = [];\n            this.scomplexVal = [];\n            this.int64Val = [];\n            this.boolVal = [];\n            this.uint32Val = [];\n            this.uint64Val = [];\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        Tensor.prototype.dtype = 0;\n        Tensor.prototype.tensorShape = null;\n        Tensor.prototype.versionNumber = 0;\n        Tensor.prototype.tensorContent = $util.newBuffer([]);\n        Tensor.prototype.floatVal = $util.emptyArray;\n        Tensor.prototype.doubleVal = $util.emptyArray;\n        Tensor.prototype.intVal = $util.emptyArray;\n        Tensor.prototype.stringVal = $util.emptyArray;\n        Tensor.prototype.scomplexVal = $util.emptyArray;\n        Tensor.prototype.int64Val = $util.emptyArray;\n        Tensor.prototype.boolVal = $util.emptyArray;\n        Tensor.prototype.uint32Val = $util.emptyArray;\n        Tensor.prototype.uint64Val = $util.emptyArray;\n\n        Tensor.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.tensorflow.Tensor();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.dtype = r.int32();\n                    break;\n                case 2:\n                    m.tensorShape = $root.tensorflow.TensorShape.decode(r, r.uint32());\n                    break;\n                case 3:\n                    m.versionNumber = r.int32();\n                    break;\n                case 4:\n                    m.tensorContent = r.bytes();\n                    break;\n                case 5:\n                    if (!(m.floatVal && m.floatVal.length))\n                        m.floatVal = [];\n                    if ((t & 7) === 2) {\n                        var c2 = r.uint32() + r.pos;\n                        while (r.pos < c2)\n                            m.floatVal.push(r.float());\n                    } else\n                        m.floatVal.push(r.float());\n                    break;\n                case 6:\n                    if (!(m.doubleVal && m.doubleVal.length))\n                        m.doubleVal = [];\n                    if ((t & 7) === 2) {\n                        var c2 = r.uint32() + r.pos;\n                        while (r.pos < c2)\n                            m.doubleVal.push(r.double());\n                    } else\n                        m.doubleVal.push(r.double());\n                    break;\n                case 7:\n                    if (!(m.intVal && m.intVal.length))\n                        m.intVal = [];\n                    if ((t & 7) === 2) {\n                        var c2 = r.uint32() + r.pos;\n                        while (r.pos < c2)\n                            m.intVal.push(r.int32());\n                    } else\n                        m.intVal.push(r.int32());\n                    break;\n                case 8:\n                    if (!(m.stringVal && m.stringVal.length))\n                        m.stringVal = [];\n                    m.stringVal.push(r.bytes());\n                    break;\n                case 9:\n                    if (!(m.scomplexVal && m.scomplexVal.length))\n                        m.scomplexVal = [];\n                    if ((t & 7) === 2) {\n                        var c2 = r.uint32() + r.pos;\n                        while (r.pos < c2)\n                            m.scomplexVal.push(r.float());\n                    } else\n                        m.scomplexVal.push(r.float());\n                    break;\n                case 10:\n                    if (!(m.int64Val && m.int64Val.length))\n                        m.int64Val = [];\n                    if ((t & 7) === 2) {\n                        var c2 = r.uint32() + r.pos;\n                        while (r.pos < c2)\n                            m.int64Val.push(r.int64());\n                    } else\n                        m.int64Val.push(r.int64());\n                    break;\n                case 11:\n                    if (!(m.boolVal && m.boolVal.length))\n                        m.boolVal = [];\n                    if ((t & 7) === 2) {\n                        var c2 = r.uint32() + r.pos;\n                        while (r.pos < c2)\n                            m.boolVal.push(r.bool());\n                    } else\n                        m.boolVal.push(r.bool());\n                    break;\n                case 16:\n                    if (!(m.uint32Val && m.uint32Val.length))\n                        m.uint32Val = [];\n                    if ((t & 7) === 2) {\n                        var c2 = r.uint32() + r.pos;\n                        while (r.pos < c2)\n                            m.uint32Val.push(r.uint32());\n                    } else\n                        m.uint32Val.push(r.uint32());\n                    break;\n                case 17:\n                    if (!(m.uint64Val && m.uint64Val.length))\n                        m.uint64Val = [];\n                    if ((t & 7) === 2) {\n                        var c2 = r.uint32() + r.pos;\n                        while (r.pos < c2)\n                            m.uint64Val.push(r.uint64());\n                    } else\n                        m.uint64Val.push(r.uint64());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return Tensor;\n    })();\n\n    tensorflow.AttrValue = (function() {\n\n        function AttrValue(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        AttrValue.prototype.list = null;\n        AttrValue.prototype.s = $util.newBuffer([]);\n        AttrValue.prototype.i = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n        AttrValue.prototype.f = 0;\n        AttrValue.prototype.b = false;\n        AttrValue.prototype.type = 0;\n        AttrValue.prototype.shape = null;\n        AttrValue.prototype.tensor = null;\n        AttrValue.prototype.placeholder = \"\";\n        AttrValue.prototype.func = null;\n\n        var $oneOfFields;\n\n        Object.defineProperty(AttrValue.prototype, \"value\", {\n            get: $util.oneOfGetter($oneOfFields = [\"list\", \"s\", \"i\", \"f\", \"b\", \"type\", \"shape\", \"tensor\", \"placeholder\", \"func\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        AttrValue.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.tensorflow.AttrValue();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.list = $root.tensorflow.AttrValue.ListValue.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.s = r.bytes();\n                    break;\n                case 3:\n                    m.i = r.int64();\n                    break;\n                case 4:\n                    m.f = r.float();\n                    break;\n                case 5:\n                    m.b = r.bool();\n                    break;\n                case 6:\n                    m.type = r.int32();\n                    break;\n                case 7:\n                    m.shape = $root.tensorflow.TensorShape.decode(r, r.uint32());\n                    break;\n                case 8:\n                    m.tensor = $root.tensorflow.Tensor.decode(r, r.uint32());\n                    break;\n                case 9:\n                    m.placeholder = r.string();\n                    break;\n                case 10:\n                    m.func = $root.tensorflow.NameAttrList.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        AttrValue.ListValue = (function() {\n\n            function ListValue(p) {\n                this.s = [];\n                this.i = [];\n                this.f = [];\n                this.b = [];\n                this.type = [];\n                this.shape = [];\n                this.tensor = [];\n                this.func = [];\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n\n            ListValue.prototype.s = $util.emptyArray;\n            ListValue.prototype.i = $util.emptyArray;\n            ListValue.prototype.f = $util.emptyArray;\n            ListValue.prototype.b = $util.emptyArray;\n            ListValue.prototype.type = $util.emptyArray;\n            ListValue.prototype.shape = $util.emptyArray;\n            ListValue.prototype.tensor = $util.emptyArray;\n            ListValue.prototype.func = $util.emptyArray;\n\n            ListValue.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.tensorflow.AttrValue.ListValue();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 2:\n                        if (!(m.s && m.s.length))\n                            m.s = [];\n                        m.s.push(r.bytes());\n                        break;\n                    case 3:\n                        if (!(m.i && m.i.length))\n                            m.i = [];\n                        if ((t & 7) === 2) {\n                            var c2 = r.uint32() + r.pos;\n                            while (r.pos < c2)\n                                m.i.push(r.int64());\n                        } else\n                            m.i.push(r.int64());\n                        break;\n                    case 4:\n                        if (!(m.f && m.f.length))\n                            m.f = [];\n                        if ((t & 7) === 2) {\n                            var c2 = r.uint32() + r.pos;\n                            while (r.pos < c2)\n                                m.f.push(r.float());\n                        } else\n                            m.f.push(r.float());\n                        break;\n                    case 5:\n                        if (!(m.b && m.b.length))\n                            m.b = [];\n                        if ((t & 7) === 2) {\n                            var c2 = r.uint32() + r.pos;\n                            while (r.pos < c2)\n                                m.b.push(r.bool());\n                        } else\n                            m.b.push(r.bool());\n                        break;\n                    case 6:\n                        if (!(m.type && m.type.length))\n                            m.type = [];\n                        if ((t & 7) === 2) {\n                            var c2 = r.uint32() + r.pos;\n                            while (r.pos < c2)\n                                m.type.push(r.int32());\n                        } else\n                            m.type.push(r.int32());\n                        break;\n                    case 7:\n                        if (!(m.shape && m.shape.length))\n                            m.shape = [];\n                        m.shape.push($root.tensorflow.TensorShape.decode(r, r.uint32()));\n                        break;\n                    case 8:\n                        if (!(m.tensor && m.tensor.length))\n                            m.tensor = [];\n                        m.tensor.push($root.tensorflow.Tensor.decode(r, r.uint32()));\n                        break;\n                    case 9:\n                        if (!(m.func && m.func.length))\n                            m.func = [];\n                        m.func.push($root.tensorflow.NameAttrList.decode(r, r.uint32()));\n                        break;\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n\n            return ListValue;\n        })();\n\n        return AttrValue;\n    })();\n\n    tensorflow.NameAttrList = (function() {\n\n        function NameAttrList(p) {\n            this.attr = {};\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        NameAttrList.prototype.name = \"\";\n        NameAttrList.prototype.attr = $util.emptyObject;\n\n        NameAttrList.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.tensorflow.NameAttrList(), k;\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.name = r.string();\n                    break;\n                case 2:\n                    r.skip().pos++;\n                    if (m.attr === $util.emptyObject)\n                        m.attr = {};\n                    k = r.string();\n                    r.pos++;\n                    m.attr[k] = $root.tensorflow.AttrValue.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return NameAttrList;\n    })();\n\n    tensorflow.NodeDef = (function() {\n\n        function NodeDef(p) {\n            this.input = [];\n            this.attr = {};\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        NodeDef.prototype.name = \"\";\n        NodeDef.prototype.op = \"\";\n        NodeDef.prototype.input = $util.emptyArray;\n        NodeDef.prototype.device = \"\";\n        NodeDef.prototype.attr = $util.emptyObject;\n\n        NodeDef.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.tensorflow.NodeDef(), k;\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.name = r.string();\n                    break;\n                case 2:\n                    m.op = r.string();\n                    break;\n                case 3:\n                    if (!(m.input && m.input.length))\n                        m.input = [];\n                    m.input.push(r.string());\n                    break;\n                case 4:\n                    m.device = r.string();\n                    break;\n                case 5:\n                    r.skip().pos++;\n                    if (m.attr === $util.emptyObject)\n                        m.attr = {};\n                    k = r.string();\n                    r.pos++;\n                    m.attr[k] = $root.tensorflow.AttrValue.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return NodeDef;\n    })();\n\n    tensorflow.VersionDef = (function() {\n\n        function VersionDef(p) {\n            this.badConsumers = [];\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        VersionDef.prototype.producer = 0;\n        VersionDef.prototype.minConsumer = 0;\n        VersionDef.prototype.badConsumers = $util.emptyArray;\n\n        VersionDef.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.tensorflow.VersionDef();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.producer = r.int32();\n                    break;\n                case 2:\n                    m.minConsumer = r.int32();\n                    break;\n                case 3:\n                    if (!(m.badConsumers && m.badConsumers.length))\n                        m.badConsumers = [];\n                    if ((t & 7) === 2) {\n                        var c2 = r.uint32() + r.pos;\n                        while (r.pos < c2)\n                            m.badConsumers.push(r.int32());\n                    } else\n                        m.badConsumers.push(r.int32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return VersionDef;\n    })();\n\n    tensorflow.GraphDef = (function() {\n\n        function GraphDef(p) {\n            this.node = [];\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        GraphDef.prototype.node = $util.emptyArray;\n        GraphDef.prototype.versions = null;\n        GraphDef.prototype.library = null;\n\n        GraphDef.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.tensorflow.GraphDef();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    if (!(m.node && m.node.length))\n                        m.node = [];\n                    m.node.push($root.tensorflow.NodeDef.decode(r, r.uint32()));\n                    break;\n                case 4:\n                    m.versions = $root.tensorflow.VersionDef.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.library = $root.tensorflow.FunctionDefLibrary.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return GraphDef;\n    })();\n\n    tensorflow.CollectionDef = (function() {\n\n        function CollectionDef(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        CollectionDef.prototype.nodeList = null;\n        CollectionDef.prototype.bytesList = null;\n        CollectionDef.prototype.int64List = null;\n        CollectionDef.prototype.floatList = null;\n        CollectionDef.prototype.anyList = null;\n\n        var $oneOfFields;\n\n        Object.defineProperty(CollectionDef.prototype, \"kind\", {\n            get: $util.oneOfGetter($oneOfFields = [\"nodeList\", \"bytesList\", \"int64List\", \"floatList\", \"anyList\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        CollectionDef.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.tensorflow.CollectionDef();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.nodeList = $root.tensorflow.CollectionDef.NodeList.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.bytesList = $root.tensorflow.CollectionDef.BytesList.decode(r, r.uint32());\n                    break;\n                case 3:\n                    m.int64List = $root.tensorflow.CollectionDef.Int64List.decode(r, r.uint32());\n                    break;\n                case 4:\n                    m.floatList = $root.tensorflow.CollectionDef.FloatList.decode(r, r.uint32());\n                    break;\n                case 5:\n                    m.anyList = $root.tensorflow.CollectionDef.AnyList.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        CollectionDef.NodeList = (function() {\n\n            function NodeList(p) {\n                this.value = [];\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n\n            NodeList.prototype.value = $util.emptyArray;\n\n            NodeList.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.tensorflow.CollectionDef.NodeList();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1:\n                        if (!(m.value && m.value.length))\n                            m.value = [];\n                        m.value.push(r.string());\n                        break;\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n\n            return NodeList;\n        })();\n\n        CollectionDef.BytesList = (function() {\n\n            function BytesList(p) {\n                this.value = [];\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n\n            BytesList.prototype.value = $util.emptyArray;\n\n            BytesList.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.tensorflow.CollectionDef.BytesList();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1:\n                        if (!(m.value && m.value.length))\n                            m.value = [];\n                        m.value.push(r.bytes());\n                        break;\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n\n            return BytesList;\n        })();\n\n        CollectionDef.Int64List = (function() {\n\n            function Int64List(p) {\n                this.value = [];\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n\n            Int64List.prototype.value = $util.emptyArray;\n\n            Int64List.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.tensorflow.CollectionDef.Int64List();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1:\n                        if (!(m.value && m.value.length))\n                            m.value = [];\n                        if ((t & 7) === 2) {\n                            var c2 = r.uint32() + r.pos;\n                            while (r.pos < c2)\n                                m.value.push(r.int64());\n                        } else\n                            m.value.push(r.int64());\n                        break;\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n\n            return Int64List;\n        })();\n\n        CollectionDef.FloatList = (function() {\n\n            function FloatList(p) {\n                this.value = [];\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n\n            FloatList.prototype.value = $util.emptyArray;\n\n            FloatList.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.tensorflow.CollectionDef.FloatList();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1:\n                        if (!(m.value && m.value.length))\n                            m.value = [];\n                        if ((t & 7) === 2) {\n                            var c2 = r.uint32() + r.pos;\n                            while (r.pos < c2)\n                                m.value.push(r.float());\n                        } else\n                            m.value.push(r.float());\n                        break;\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n\n            return FloatList;\n        })();\n\n        CollectionDef.AnyList = (function() {\n\n            function AnyList(p) {\n                this.value = [];\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n\n            AnyList.prototype.value = $util.emptyArray;\n\n            AnyList.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.tensorflow.CollectionDef.AnyList();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1:\n                        if (!(m.value && m.value.length))\n                            m.value = [];\n                        m.value.push($root.tensorflow.Any.decode(r, r.uint32()));\n                        break;\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n\n            return AnyList;\n        })();\n\n        return CollectionDef;\n    })();\n\n    tensorflow.SaverDef = (function() {\n\n        function SaverDef(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        SaverDef.prototype.filenameTensorName = \"\";\n        SaverDef.prototype.saveTensorName = \"\";\n        SaverDef.prototype.restoreOpName = \"\";\n        SaverDef.prototype.maxToKeep = 0;\n        SaverDef.prototype.sharded = false;\n        SaverDef.prototype.keepCheckpointEveryNHours = 0;\n        SaverDef.prototype.version = 0;\n\n        SaverDef.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.tensorflow.SaverDef();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.filenameTensorName = r.string();\n                    break;\n                case 2:\n                    m.saveTensorName = r.string();\n                    break;\n                case 3:\n                    m.restoreOpName = r.string();\n                    break;\n                case 4:\n                    m.maxToKeep = r.int32();\n                    break;\n                case 5:\n                    m.sharded = r.bool();\n                    break;\n                case 6:\n                    m.keepCheckpointEveryNHours = r.float();\n                    break;\n                case 7:\n                    m.version = r.int32();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        SaverDef.CheckpointFormatVersion = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"LEGACY\"] = 0;\n            values[valuesById[1] = \"V1\"] = 1;\n            values[valuesById[2] = \"V2\"] = 2;\n            return values;\n        })();\n\n        return SaverDef;\n    })();\n\n    tensorflow.TensorInfo = (function() {\n\n        function TensorInfo(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        TensorInfo.prototype.name = \"\";\n        TensorInfo.prototype.cooSparse = null;\n        TensorInfo.prototype.dtype = 0;\n        TensorInfo.prototype.tensorShape = null;\n\n        var $oneOfFields;\n\n        Object.defineProperty(TensorInfo.prototype, \"encoding\", {\n            get: $util.oneOfGetter($oneOfFields = [\"name\", \"cooSparse\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        TensorInfo.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.tensorflow.TensorInfo();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.name = r.string();\n                    break;\n                case 4:\n                    m.cooSparse = $root.tensorflow.TensorInfo.CooSparse.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.dtype = r.int32();\n                    break;\n                case 3:\n                    m.tensorShape = $root.tensorflow.TensorShape.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        TensorInfo.CooSparse = (function() {\n\n            function CooSparse(p) {\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n\n            CooSparse.prototype.valuesTensorName = \"\";\n            CooSparse.prototype.indicesTensorName = \"\";\n            CooSparse.prototype.denseShapeTensorName = \"\";\n\n            CooSparse.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.tensorflow.TensorInfo.CooSparse();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1:\n                        m.valuesTensorName = r.string();\n                        break;\n                    case 2:\n                        m.indicesTensorName = r.string();\n                        break;\n                    case 3:\n                        m.denseShapeTensorName = r.string();\n                        break;\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n\n            return CooSparse;\n        })();\n\n        return TensorInfo;\n    })();\n\n    tensorflow.SignatureDef = (function() {\n\n        function SignatureDef(p) {\n            this.inputs = {};\n            this.outputs = {};\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        SignatureDef.prototype.inputs = $util.emptyObject;\n        SignatureDef.prototype.outputs = $util.emptyObject;\n        SignatureDef.prototype.methodName = \"\";\n\n        SignatureDef.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.tensorflow.SignatureDef(), k;\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    r.skip().pos++;\n                    if (m.inputs === $util.emptyObject)\n                        m.inputs = {};\n                    k = r.string();\n                    r.pos++;\n                    m.inputs[k] = $root.tensorflow.TensorInfo.decode(r, r.uint32());\n                    break;\n                case 2:\n                    r.skip().pos++;\n                    if (m.outputs === $util.emptyObject)\n                        m.outputs = {};\n                    k = r.string();\n                    r.pos++;\n                    m.outputs[k] = $root.tensorflow.TensorInfo.decode(r, r.uint32());\n                    break;\n                case 3:\n                    m.methodName = r.string();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return SignatureDef;\n    })();\n\n    tensorflow.AssetFileDef = (function() {\n\n        function AssetFileDef(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        AssetFileDef.prototype.tensorInfo = null;\n        AssetFileDef.prototype.filename = \"\";\n\n        AssetFileDef.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.tensorflow.AssetFileDef();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.tensorInfo = $root.tensorflow.TensorInfo.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.filename = r.string();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return AssetFileDef;\n    })();\n\n    tensorflow.OpDef = (function() {\n\n        function OpDef(p) {\n            this.inputArg = [];\n            this.outputArg = [];\n            this.attr = [];\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        OpDef.prototype.name = \"\";\n        OpDef.prototype.inputArg = $util.emptyArray;\n        OpDef.prototype.outputArg = $util.emptyArray;\n        OpDef.prototype.attr = $util.emptyArray;\n        OpDef.prototype.deprecation = null;\n        OpDef.prototype.summary = \"\";\n        OpDef.prototype.description = \"\";\n        OpDef.prototype.isCommutative = false;\n        OpDef.prototype.isAggregate = false;\n        OpDef.prototype.isStateful = false;\n        OpDef.prototype.allowsUninitializedInput = false;\n\n        OpDef.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.tensorflow.OpDef();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.name = r.string();\n                    break;\n                case 2:\n                    if (!(m.inputArg && m.inputArg.length))\n                        m.inputArg = [];\n                    m.inputArg.push($root.tensorflow.OpDef.ArgDef.decode(r, r.uint32()));\n                    break;\n                case 3:\n                    if (!(m.outputArg && m.outputArg.length))\n                        m.outputArg = [];\n                    m.outputArg.push($root.tensorflow.OpDef.ArgDef.decode(r, r.uint32()));\n                    break;\n                case 4:\n                    if (!(m.attr && m.attr.length))\n                        m.attr = [];\n                    m.attr.push($root.tensorflow.OpDef.AttrDef.decode(r, r.uint32()));\n                    break;\n                case 8:\n                    m.deprecation = $root.tensorflow.OpDef.OpDeprecation.decode(r, r.uint32());\n                    break;\n                case 5:\n                    m.summary = r.string();\n                    break;\n                case 6:\n                    m.description = r.string();\n                    break;\n                case 18:\n                    m.isCommutative = r.bool();\n                    break;\n                case 16:\n                    m.isAggregate = r.bool();\n                    break;\n                case 17:\n                    m.isStateful = r.bool();\n                    break;\n                case 19:\n                    m.allowsUninitializedInput = r.bool();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        OpDef.ArgDef = (function() {\n\n            function ArgDef(p) {\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n\n            ArgDef.prototype.name = \"\";\n            ArgDef.prototype.description = \"\";\n            ArgDef.prototype.type = 0;\n            ArgDef.prototype.typeAttr = \"\";\n            ArgDef.prototype.numberAttr = \"\";\n            ArgDef.prototype.typeListAttr = \"\";\n            ArgDef.prototype.isRef = false;\n\n            ArgDef.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.tensorflow.OpDef.ArgDef();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1:\n                        m.name = r.string();\n                        break;\n                    case 2:\n                        m.description = r.string();\n                        break;\n                    case 3:\n                        m.type = r.int32();\n                        break;\n                    case 4:\n                        m.typeAttr = r.string();\n                        break;\n                    case 5:\n                        m.numberAttr = r.string();\n                        break;\n                    case 6:\n                        m.typeListAttr = r.string();\n                        break;\n                    case 16:\n                        m.isRef = r.bool();\n                        break;\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n\n            return ArgDef;\n        })();\n\n        OpDef.AttrDef = (function() {\n\n            function AttrDef(p) {\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n\n            AttrDef.prototype.name = \"\";\n            AttrDef.prototype.type = \"\";\n            AttrDef.prototype.defaultValue = null;\n            AttrDef.prototype.description = \"\";\n            AttrDef.prototype.hasMinimum = false;\n            AttrDef.prototype.minimum = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n            AttrDef.prototype.allowedValues = null;\n\n            AttrDef.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.tensorflow.OpDef.AttrDef();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1:\n                        m.name = r.string();\n                        break;\n                    case 2:\n                        m.type = r.string();\n                        break;\n                    case 3:\n                        m.defaultValue = $root.tensorflow.AttrValue.decode(r, r.uint32());\n                        break;\n                    case 4:\n                        m.description = r.string();\n                        break;\n                    case 5:\n                        m.hasMinimum = r.bool();\n                        break;\n                    case 6:\n                        m.minimum = r.int64();\n                        break;\n                    case 7:\n                        m.allowedValues = $root.tensorflow.AttrValue.decode(r, r.uint32());\n                        break;\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n\n            return AttrDef;\n        })();\n\n        OpDef.OpDeprecation = (function() {\n\n            function OpDeprecation(p) {\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n\n            OpDeprecation.prototype.version = 0;\n            OpDeprecation.prototype.explanation = \"\";\n\n            OpDeprecation.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.tensorflow.OpDef.OpDeprecation();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1:\n                        m.version = r.int32();\n                        break;\n                    case 2:\n                        m.explanation = r.string();\n                        break;\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n\n            return OpDeprecation;\n        })();\n\n        return OpDef;\n    })();\n\n    tensorflow.OpList = (function() {\n\n        function OpList(p) {\n            this.op = [];\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        OpList.prototype.op = $util.emptyArray;\n\n        OpList.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.tensorflow.OpList();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    if (!(m.op && m.op.length))\n                        m.op = [];\n                    m.op.push($root.tensorflow.OpDef.decode(r, r.uint32()));\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return OpList;\n    })();\n\n    tensorflow.MetaGraphDef = (function() {\n\n        function MetaGraphDef(p) {\n            this.collectionDef = {};\n            this.signatureDef = {};\n            this.assetFileDef = [];\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        MetaGraphDef.prototype.metaInfoDef = null;\n        MetaGraphDef.prototype.graphDef = null;\n        MetaGraphDef.prototype.saverDef = null;\n        MetaGraphDef.prototype.collectionDef = $util.emptyObject;\n        MetaGraphDef.prototype.signatureDef = $util.emptyObject;\n        MetaGraphDef.prototype.assetFileDef = $util.emptyArray;\n\n        MetaGraphDef.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.tensorflow.MetaGraphDef(), k;\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.metaInfoDef = $root.tensorflow.MetaGraphDef.MetaInfoDef.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.graphDef = $root.tensorflow.GraphDef.decode(r, r.uint32());\n                    break;\n                case 3:\n                    m.saverDef = $root.tensorflow.SaverDef.decode(r, r.uint32());\n                    break;\n                case 4:\n                    r.skip().pos++;\n                    if (m.collectionDef === $util.emptyObject)\n                        m.collectionDef = {};\n                    k = r.string();\n                    r.pos++;\n                    m.collectionDef[k] = $root.tensorflow.CollectionDef.decode(r, r.uint32());\n                    break;\n                case 5:\n                    r.skip().pos++;\n                    if (m.signatureDef === $util.emptyObject)\n                        m.signatureDef = {};\n                    k = r.string();\n                    r.pos++;\n                    m.signatureDef[k] = $root.tensorflow.SignatureDef.decode(r, r.uint32());\n                    break;\n                case 6:\n                    if (!(m.assetFileDef && m.assetFileDef.length))\n                        m.assetFileDef = [];\n                    m.assetFileDef.push($root.tensorflow.AssetFileDef.decode(r, r.uint32()));\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        MetaGraphDef.MetaInfoDef = (function() {\n\n            function MetaInfoDef(p) {\n                this.tags = [];\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n\n            MetaInfoDef.prototype.metaGraphVersion = \"\";\n            MetaInfoDef.prototype.strippedOpList = null;\n            MetaInfoDef.prototype.anyInfo = null;\n            MetaInfoDef.prototype.tags = $util.emptyArray;\n            MetaInfoDef.prototype.tensorflowVersion = \"\";\n            MetaInfoDef.prototype.tensorflowGitVersion = \"\";\n\n            MetaInfoDef.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.tensorflow.MetaGraphDef.MetaInfoDef();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1:\n                        m.metaGraphVersion = r.string();\n                        break;\n                    case 2:\n                        m.strippedOpList = $root.tensorflow.OpList.decode(r, r.uint32());\n                        break;\n                    case 3:\n                        m.anyInfo = $root.tensorflow.Any.decode(r, r.uint32());\n                        break;\n                    case 4:\n                        if (!(m.tags && m.tags.length))\n                            m.tags = [];\n                        m.tags.push(r.string());\n                        break;\n                    case 5:\n                        m.tensorflowVersion = r.string();\n                        break;\n                    case 6:\n                        m.tensorflowGitVersion = r.string();\n                        break;\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n\n            return MetaInfoDef;\n        })();\n\n        return MetaGraphDef;\n    })();\n\n    tensorflow.SavedModel = (function() {\n\n        function SavedModel(p) {\n            this.metaGraphs = [];\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        SavedModel.prototype.savedModelSchemaVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n        SavedModel.prototype.metaGraphs = $util.emptyArray;\n\n        SavedModel.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.tensorflow.SavedModel();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.savedModelSchemaVersion = r.int64();\n                    break;\n                case 2:\n                    if (!(m.metaGraphs && m.metaGraphs.length))\n                        m.metaGraphs = [];\n                    m.metaGraphs.push($root.tensorflow.MetaGraphDef.decode(r, r.uint32()));\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return SavedModel;\n    })();\n\n    tensorflow.FunctionDefLibrary = (function() {\n\n        function FunctionDefLibrary(p) {\n            this[\"function\"] = [];\n            this.gradient = [];\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        FunctionDefLibrary.prototype[\"function\"] = $util.emptyArray;\n        FunctionDefLibrary.prototype.gradient = $util.emptyArray;\n\n        FunctionDefLibrary.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.tensorflow.FunctionDefLibrary();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    if (!(m[\"function\"] && m[\"function\"].length))\n                        m[\"function\"] = [];\n                    m[\"function\"].push($root.tensorflow.FunctionDef.decode(r, r.uint32()));\n                    break;\n                case 2:\n                    if (!(m.gradient && m.gradient.length))\n                        m.gradient = [];\n                    m.gradient.push($root.tensorflow.GradientDef.decode(r, r.uint32()));\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return FunctionDefLibrary;\n    })();\n\n    tensorflow.FunctionDef = (function() {\n\n        function FunctionDef(p) {\n            this.attr = {};\n            this.nodeDef = [];\n            this.ret = {};\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        FunctionDef.prototype.signature = null;\n        FunctionDef.prototype.attr = $util.emptyObject;\n        FunctionDef.prototype.nodeDef = $util.emptyArray;\n        FunctionDef.prototype.ret = $util.emptyObject;\n\n        FunctionDef.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.tensorflow.FunctionDef(), k;\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.signature = $root.tensorflow.OpDef.decode(r, r.uint32());\n                    break;\n                case 5:\n                    r.skip().pos++;\n                    if (m.attr === $util.emptyObject)\n                        m.attr = {};\n                    k = r.string();\n                    r.pos++;\n                    m.attr[k] = $root.tensorflow.AttrValue.decode(r, r.uint32());\n                    break;\n                case 3:\n                    if (!(m.nodeDef && m.nodeDef.length))\n                        m.nodeDef = [];\n                    m.nodeDef.push($root.tensorflow.NodeDef.decode(r, r.uint32()));\n                    break;\n                case 4:\n                    r.skip().pos++;\n                    if (m.ret === $util.emptyObject)\n                        m.ret = {};\n                    k = r.string();\n                    r.pos++;\n                    m.ret[k] = r.string();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return FunctionDef;\n    })();\n\n    tensorflow.GradientDef = (function() {\n\n        function GradientDef(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        GradientDef.prototype.functionName = \"\";\n        GradientDef.prototype.gradientFunc = \"\";\n\n        GradientDef.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.tensorflow.GradientDef();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.functionName = r.string();\n                    break;\n                case 2:\n                    m.gradientFunc = r.string();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return GradientDef;\n    })();\n\n    return tensorflow;\n})();\n\nmodule.exports = $root;\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {Node, ValueType} from '../types';\n\nexport function getParamValue(\n    paramName: string, node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): ValueType {\n  const param = node.params[paramName];\n  if (param && param.inputIndex !== undefined) {\n    if (param.type === 'tensor') {\n      return getTensor(node.inputNames[param.inputIndex], tensorMap, context);\n    }\n    if (param.type === 'tensors') {\n      const inputs = param.inputIndex === 0 ?\n          (param.inputParamLength === 0 ?\n               node.inputNames :\n               node.inputNames.slice(\n                   param.inputIndex, -param.inputParamLength)) :\n          node.inputNames.splice(param.inputIndex);\n\n      return inputs.map(name => getTensor(name, tensorMap, context));\n    }\n    const data = Array.prototype.slice.call(\n        getTensor(\n            node.inputNames.slice(param.inputIndex)[0], tensorMap, context)\n            .dataSync());\n    return param.type === 'number' ? data[0] : data;\n  }\n  return param && param.value;\n}\n\n/**\n * Retrieve the tensor based on input name by extracting the node name and\n * output index information.\n * @param name Node input name\n * @param tensorsMap Tensors map keyed by the node\n */\nexport function getTensor(\n    name: string, tensorsMap: NamedTensorsMap,\n    context: ExecutionContext): tfc.Tensor {\n  const [nodeName, index] = parseNodeName(name);\n  const contextId = context.currentContextIds.find(contextId => {\n    return !!tensorsMap[getNodeNameWithContextId(nodeName, contextId)];\n  });\n\n  return contextId !== undefined ?\n      tensorsMap[getNodeNameWithContextId(nodeName, contextId)][index] :\n      undefined;\n}\n\n/**\n * Retrieve the tensors based on input name for current context.\n * @param name Node input name\n * @param tensorsMap Tensors map keyed by the node\n */\nexport function getTensorsForCurrentContenxt(\n    name: string, tensorsMap: NamedTensorsMap,\n    context: ExecutionContext): tfc.Tensor[] {\n  return tensorsMap[getNodeNameWithContextId(name, context.currentContextId)];\n}\n\n/**\n * Returns the node name and index from the Node input name.\n * @param inputName The input name of the node, in format of\n * node_name:output_index, i.e. MatMul:0, if the output_index is not set, it is\n * default to 0.\n */\nexport function getNodeNameAndIndex(\n    inputName: string, context?: ExecutionContext): [string, number] {\n  const [nodeName, index] = parseNodeName(inputName);\n\n  return [\n    getNodeNameWithContextId(nodeName, context && context.currentContextId),\n    index\n  ];\n}\n\nfunction getNodeNameWithContextId(name: string, contextId?: string): string {\n  return !!contextId ? `${name}-${contextId}` : name;\n}\n\nexport function parseNodeName(name: string): [string, number] {\n  const index = name.lastIndexOf(':');\n  if (index === -1) return [name, 0];\n\n  const nodeName = name.substring(0, index);\n  return [nodeName, Number(name.substring(index + 1))];\n}\n\nexport function split(arr: number[], size: number) {\n  const res = [];\n  for (let i = 0; i < arr.length; i += size) {\n    res.push(arr.slice(i, i + size));\n  }\n  return res;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json = [\n  {\n    'tfOpName': 'Add',\n    'dlOpName': 'add',\n    'category': 'arithmetic',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'a', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'b', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'AddN',\n    'dlOpName': 'addN',\n    'category': 'arithmetic',\n    'params': [{\n      'tfInputIndex': 0,\n      'tfInputParamLength': 0,\n      'dlParamName': 'tensors',\n      'type': 'tensors'\n    }]\n  },\n  {\n    'tfOpName': 'BiasAdd',\n    'dlOpName': 'add',\n    'category': 'arithmetic',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'a', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'b', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Sub',\n    'dlOpName': 'sub',\n    'category': 'arithmetic',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'a', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'b', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'RealDiv',\n    'dlOpName': 'div',\n    'category': 'arithmetic',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'a', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'b', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Div',\n    'dlOpName': 'div',\n    'category': 'arithmetic',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'a', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'b', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'FloorDiv',\n    'dlOpName': 'floorDiv',\n    'category': 'arithmetic',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'a', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'b', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Mul',\n    'dlOpName': 'mul',\n    'category': 'arithmetic',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'a', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'b', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Maximum',\n    'dlOpName': 'maximum',\n    'category': 'arithmetic',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'a', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'b', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'Minimum',\n    'dlOpName': 'minimum',\n    'category': 'arithmetic',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'a', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'b', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'Pow',\n    'dlOpName': 'pow',\n    'category': 'arithmetic',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'a', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'b', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'SquaredDifference',\n    'dlOpName': 'squaredDifference',\n    'category': 'arithmetic',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'a', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'b', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Mod',\n    'dlOpName': 'mod',\n    'category': 'arithmetic',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'a', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'b', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'FloorMod',\n    'dlOpName': 'mod',\n    'category': 'arithmetic',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'a', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'b', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  }\n];\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json = [\n  {\n    'tfOpName': 'Abs',\n    'dlOpName': 'abs',\n    'category': 'basic_math',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Acos',\n    'dlOpName': 'acos',\n    'category': 'basic_math',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Asin',\n    'dlOpName': 'asin',\n    'category': 'basic_math',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Atan',\n    'dlOpName': 'atan',\n    'category': 'basic_math',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Atan2',\n    'dlOpName': 'atan2',\n    'category': 'basic_math',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'y', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Ceil',\n    'dlOpName': 'ceil',\n    'category': 'basic_math',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'ClipByValue',\n    'dlOpName': 'clipByValue',\n    'category': 'basic_math',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'}, {\n        'tfParamName': 'clip_value_min',\n        'dlParamName': 'clipValueMin',\n        'type': 'number'\n      },\n      {\n        'tfParamName': 'clip_value_max',\n        'dlParamName': 'clipValueMax',\n        'type': 'number'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Cos',\n    'dlOpName': 'cos',\n    'category': 'basic_math',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Cosh',\n    'dlOpName': 'cosh',\n    'category': 'basic_math',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Elu',\n    'dlOpName': 'elu',\n    'category': 'basic_math',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Exp',\n    'dlOpName': 'exp',\n    'category': 'basic_math',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Floor',\n    'dlOpName': 'floor',\n    'category': 'basic_math',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Log',\n    'dlOpName': 'log',\n    'category': 'basic_math',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Neg',\n    'dlOpName': 'neg',\n    'category': 'basic_math',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Relu',\n    'dlOpName': 'relu',\n    'category': 'basic_math',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Relu6',\n    'dlOpName': 'clipByValue',\n    'category': 'basic_math',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      },\n      {'dlParamName': 'clipValueMin', 'type': 'number', 'defaultValue': 0},\n      {'dlParamName': 'clipValueMax', 'type': 'number', 'defaultValue': 6}\n    ]\n  },\n  {\n    'tfOpName': 'Selu',\n    'dlOpName': 'selu',\n    'category': 'basic_math',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Sigmoid',\n    'dlOpName': 'sigmoid',\n    'category': 'basic_math',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Sin',\n    'dlOpName': 'sin',\n    'category': 'basic_math',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Sinh',\n    'dlOpName': 'sinh',\n    'category': 'basic_math',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Sqrt',\n    'dlOpName': 'sqrt',\n    'category': 'basic_math',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Rsqrt',\n    'dlOpName': 'rsqrt',\n    'category': 'basic_math',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Square',\n    'dlOpName': 'square',\n    'category': 'basic_math',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Tan',\n    'dlOpName': 'tan',\n    'category': 'basic_math',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Tanh',\n    'dlOpName': 'tanh',\n    'category': 'basic_math',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Sign',\n    'dlOpName': 'sign',\n    'category': 'basic_math',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Round',\n    'dlOpName': 'round',\n    'category': 'basic_math',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Expm1',\n    'dlOpName': 'expm1',\n    'category': 'basic_math',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Log1p',\n    'dlOpName': 'log1p',\n    'category': 'basic_math',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Reciprocal',\n    'dlOpName': 'reciprocal',\n    'category': 'basic_math',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Reciprocal',\n    'dlOpName': 'reciprocal',\n    'category': 'basic_math',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Softplus',\n    'dlOpName': 'softplus',\n    'category': 'basic_math',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Asinh',\n    'dlOpName': 'asinh',\n    'category': 'basic_math',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Acosh',\n    'dlOpName': 'acosh',\n    'category': 'basic_math',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Atanh',\n    'dlOpName': 'atanh',\n    'category': 'basic_math',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Erf',\n    'dlOpName': 'erf',\n    'category': 'basic_math',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Prod',\n    'dlOpName': 'prod',\n    'category': 'basic_math',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'axes', 'type': 'number[]'}, {\n        'tfParamName': 'keep_dims',\n        'dlParamName': 'keepDims',\n        'type': 'bool',\n        'notSupported': true\n      },\n      {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LeakyRelu',\n    'dlOpName': 'leakyRelu',\n    'category': 'basic_math',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'}, {\n        'tfParamName': 'alpha',\n        'dlParamName': 'alpha',\n        'type': 'number',\n        'defaultValue': 0.2\n      },\n      {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  }\n];\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json = [\n  {\n    'tfOpName': 'LoopCond',\n    'dlOpName': 'loopCond',\n    'category': 'control',\n    'params': [{'tfInputIndex': 0, 'dlParamName': 'pred', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Switch',\n    'dlOpName': 'switch',\n    'category': 'control',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'data', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'pred', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'Merge',\n    'dlOpName': 'merge',\n    'category': 'control',\n    'params': [{\n      'tfInputIndex': 0,\n      'tfInputParamLength': 0,\n      'dlParamName': 'tensors',\n      'type': 'tensors'\n    }]\n  },\n  {\n    'tfOpName': 'Enter',\n    'dlOpName': 'enter',\n    'category': 'control',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'tensor', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      },\n      {\n        'tfParamName': 'frame_name',\n        'dlParamName': 'frameName',\n        'type': 'string'\n      },\n      {\n        'tfParamName': 'is_constant',\n        'dlParamName': 'isConstant',\n        'type': 'bool'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Exit',\n    'dlOpName': 'exit',\n    'category': 'control',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'tensor', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'NextIteration',\n    'dlOpName': 'nextIteration',\n    'category': 'control',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'tensor', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayV3',\n    'dlOpName': 'tensorArray',\n    'category': 'control',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'size', 'type': 'number'},\n      {'tfParamName': 'dtype', 'dlParamName': 'dtype', 'type': 'dtype'}, {\n        'tfParamName': 'element_shape',\n        'dlParamName': 'elementShape',\n        'type': 'shape'\n      },\n      {\n        'tfParamName': 'dynamic_size',\n        'dlParamName': 'dynamicSize',\n        'type': 'bool'\n      },\n      {\n        'tfParamName': 'clear_after_read',\n        'dlParamName': 'clearAfterRead',\n        'type': 'bool'\n      },\n      {\n        'tfParamName': 'identical_element_shapes',\n        'dlParamName': 'identicalElementShapes',\n        'type': 'bool'\n      },\n      {\n        'tfParamName': 'tensor_array_name',\n        'dlParamName': 'name',\n        'type': 'string'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayWriteV3',\n    'dlOpName': 'tensorArrayWrite',\n    'category': 'control',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'tensorArrayId', 'type': 'number'},\n      {'tfInputIndex': 1, 'dlParamName': 'index', 'type': 'number'},\n      {'tfInputIndex': 2, 'dlParamName': 'tensor', 'type': 'tensor'},\n      {'tfInputIndex': 3, 'dlParamName': 'flowIn', 'type': 'number'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayReadV3',\n    'dlOpName': 'tensorArrayRead',\n    'category': 'control',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'tensorArrayId', 'type': 'number'},\n      {'tfInputIndex': 1, 'dlParamName': 'index', 'type': 'number'},\n      {'tfInputIndex': 2, 'dlParamName': 'flowIn', 'type': 'number'}, {\n        'tfParamName': 'dtype',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayGatherV3',\n    'dlOpName': 'tensorArrayGather',\n    'category': 'control',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'tensorArrayId', 'type': 'number'},\n      {'tfInputIndex': 1, 'dlParamName': 'indices', 'type': 'number[]'},\n      {'tfInputIndex': 2, 'dlParamName': 'flowIn', 'type': 'number'},\n      {'tfParamName': 'dtype', 'dlParamName': 'dtype', 'type': 'dtype'}, {\n        'tfParamName': 'element_shape',\n        'dlParamName': 'elementShape',\n        'type': 'shape'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayScatterV3',\n    'dlOpName': 'tensorArrayScatter',\n    'category': 'control',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'tensorArrayId', 'type': 'number'},\n      {'tfInputIndex': 1, 'dlParamName': 'indices', 'type': 'number[]'},\n      {'tfInputIndex': 2, 'dlParamName': 'tensor', 'type': 'tensor'},\n      {'tfInputIndex': 3, 'dlParamName': 'flowIn', 'type': 'number'},\n      {'tfParamName': 'T', 'dlParamName': 'dtype', 'type': 'dtype'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayConcatV3',\n    'dlOpName': 'tensorArrayConcat',\n    'category': 'control',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'tensorArrayId', 'type': 'number'},\n      {'tfInputIndex': 1, 'dlParamName': 'flowIn', 'type': 'number'},\n      {'tfParamName': 'dtype', 'dlParamName': 'dtype', 'type': 'dtype'}, {\n        'tfParamName': 'element_shape_except0',\n        'dlParamName': 'elementShapeExcept0',\n        'type': 'shape',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorArraySplitV3',\n    'dlOpName': 'tensorArraySplit',\n    'category': 'control',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'tensorArrayId', 'type': 'number'},\n      {'tfInputIndex': 1, 'dlParamName': 'tensor', 'type': 'tensor'},\n      {'tfInputIndex': 2, 'dlParamName': 'lengths', 'type': 'number[]'},\n      {'tfInputIndex': 3, 'dlParamName': 'flowIn', 'type': 'number'},\n      {'tfParamName': 'T', 'dlParamName': 'dtype', 'type': 'dtype'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArraySizeV3',\n    'dlOpName': 'tensorArraySize',\n    'category': 'control',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'tensorArrayId', 'type': 'number'},\n      {'tfInputIndex': 1, 'dlParamName': 'flowIn', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayCloseV3',\n    'dlOpName': 'tensorArrayClose',\n    'category': 'control',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'tensorArrayId', 'type': 'number'}\n    ]\n  }\n];\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json = [\n  {\n    'tfOpName': 'AvgPool',\n    'dlOpName': 'avgPool',\n    'category': 'convolution',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'},\n      {'tfParamName': 'strides', 'dlParamName': 'strides', 'type': 'number[]'},\n      {'tfParamName': 'padding', 'dlParamName': 'pad', 'type': 'string'}, {\n        'tfParamName': 'data_format',\n        'dlParamName': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {'tfParamName': 'ksize', 'dlParamName': 'kernelSize', 'type': 'number[]'},\n      {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'MaxPool',\n    'dlOpName': 'maxPool',\n    'category': 'convolution',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'},\n      {'tfParamName': 'strides', 'dlParamName': 'strides', 'type': 'number[]'},\n      {'tfParamName': 'padding', 'dlParamName': 'pad', 'type': 'string'}, {\n        'tfParamName': 'data_format',\n        'dlParamName': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {'tfParamName': 'ksize', 'dlParamName': 'kernelSize', 'type': 'number[]'},\n      {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Conv1D',\n    'dlOpName': 'conv1d',\n    'category': 'convolution',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'filter', 'type': 'tensor'},\n      {'tfParamName': 'stride', 'dlParamName': 'stride', 'type': 'number'},\n      {'tfParamName': 'padding', 'dlParamName': 'pad', 'type': 'string'}, {\n        'tfParamName': 'data_format',\n        'dlParamName': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NWC'\n      },\n      {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      },\n      {\n        'tfParamName': 'dilation',\n        'dlParamName': 'dilation',\n        'type': 'number',\n        'defaultValue': 1\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Conv2D',\n    'dlOpName': 'conv2d',\n    'category': 'convolution',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'filter', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      },\n      {'tfParamName': 'strides', 'dlParamName': 'strides', 'type': 'number[]'},\n      {'tfParamName': 'padding', 'dlParamName': 'pad', 'type': 'string'}, {\n        'tfParamName': 'useCudnnOnGpu',\n        'dlParamName': 'useCudnnOnGpu',\n        'type': 'bool'\n      },\n      {\n        'tfParamName': 'data_format',\n        'dlParamName': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfParamName': 'dilations',\n        'dlParamName': 'dilations',\n        'type': 'number[]'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Conv2DBackpropInput',\n    'dlOpName': 'conv2dTranspose',\n    'category': 'convolution',\n    'params': [\n      {'tfInputIndex': 2, 'dlParamName': 'x', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'filter', 'type': 'tensor'},\n      {'tfInputIndex': 0, 'dlParamName': 'outputShape', 'type': 'number[]'},\n      {'tfParamName': 'strides', 'dlParamName': 'strides', 'type': 'number[]'},\n      {'tfParamName': 'padding', 'dlParamName': 'pad', 'type': 'string'}, {\n        'tfParamName': 'data_format',\n        'dlParamName': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'DepthwiseConv2d',\n    'dlOpName': 'depthwiseConv2d',\n    'category': 'convolution',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'input', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'filter', 'type': 'tensor'},\n      {'tfParamName': 'strides', 'dlParamName': 'strides', 'type': 'number[]'},\n      {'tfParamName': 'padding', 'dlParamName': 'pad', 'type': 'string'}, {\n        'tfParamName': 'data_format',\n        'dlParamName': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfParamName': 'dilations',\n        'dlParamName': 'dilations',\n        'type': 'number[]'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'DepthwiseConv2dNative',\n    'dlOpName': 'depthwiseConv2d',\n    'category': 'convolution',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'input', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'filter', 'type': 'tensor'},\n      {'tfParamName': 'strides', 'dlParamName': 'strides', 'type': 'number[]'},\n      {'tfParamName': 'padding', 'dlParamName': 'pad', 'type': 'string'}, {\n        'tfParamName': 'data_format',\n        'dlParamName': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfParamName': 'dilations',\n        'dlParamName': 'dilations',\n        'type': 'number[]'\n      }\n    ]\n  }\n];\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json = [\n  {\n    'tfOpName': 'Fill',\n    'dlOpName': 'fill',\n    'category': 'creation',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'shape', 'type': 'number[]'},\n      {'tfInputIndex': 1, 'dlParamName': 'value', 'type': 'number'},\n      {'tfParamName': 'T', 'dlParamName': 'dtype', 'type': 'dtype'}\n    ]\n  },\n  {\n    'tfOpName': 'LinSpace',\n    'dlOpName': 'linspace',\n    'category': 'creation',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'start', 'type': 'number'},\n      {'tfInputIndex': 1, 'dlParamName': 'stop', 'type': 'number'},\n      {'tfInputIndex': 2, 'dlParamName': 'num', 'type': 'number'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'OneHot',\n    'dlOpName': 'oneHot',\n    'category': 'creation',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'indices', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'depth', 'type': 'number'}, {\n        'tfInputIndex': 2,\n        'dlParamName': 'onValue',\n        'type': 'number',\n        'defaultValue': 1\n      },\n      {\n        'tfInputIndex': 3,\n        'dlParamName': 'offValue',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfParamName': 'axis',\n        'dlParamName': 'axis',\n        'type': 'number',\n        'notSupported': true\n      },\n      {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Ones',\n    'dlOpName': 'ones',\n    'category': 'creation',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'shape', 'type': 'number[]'},\n      {'tfParamName': 'T', 'dlParamName': 'dtype', 'type': 'dtype'}\n    ]\n  },\n  {\n    'tfOpName': 'OnesLike',\n    'dlOpName': 'onesLike',\n    'category': 'creation',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'},\n      {'tfParamName': 'dtype', 'dlParamName': 'dtype', 'type': 'dtype'}\n    ]\n  },\n  {\n    'tfOpName': 'RandomUniform',\n    'dlOpName': 'randomUniform',\n    'category': 'creation',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'shape', 'type': 'number[]'}, {\n        'tfParamName': 'minval',\n        'dlParamName': 'minval',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfParamName': 'maxval',\n        'dlParamName': 'maxval',\n        'type': 'number',\n        'defaultValue': 1\n      },\n      {'tfParamName': 'dtype', 'dlParamName': 'dtype', 'type': 'dtype'}, {\n        'tfParamName': 'seed',\n        'dlParamName': 'seed',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfParamName': 'seed2',\n        'dlParamName': 'seed2',\n        'type': 'number',\n        'defaultValue': 0,\n        'notSupported': true\n      },\n      {\n        'tfParamName': 'T',\n        'dlParamName': 'T',\n        'type': 'number',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Range',\n    'dlOpName': 'range',\n    'category': 'creation',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'start', 'type': 'number'},\n      {'tfInputIndex': 1, 'dlParamName': 'stop', 'type': 'number'}, {\n        'tfInputIndex': 2,\n        'dlParamName': 'step',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {'tfParamName': 'Tidx', 'dlParamName': 'dtype', 'type': 'dtype'}\n    ]\n  },\n  {\n    'tfOpName': 'truncatedNormal',\n    'dlOpName': 'truncatedNormal',\n    'category': 'creation',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'shape', 'type': 'number[]'}, {\n        'tfParamName': 'means',\n        'dlParamName': 'mean',\n        'type': 'number',\n        'defaultValue': 0.0\n      },\n      {\n        'tfParamName': 'stddev',\n        'dlParamName': 'stdDev',\n        'type': 'number',\n        'defaultValue': 1.0\n      },\n      {'tfParamName': 'seed', 'dlParamName': 'seed', 'type': 'number'}, {\n        'tfParamName': 'seed2',\n        'dlParamName': 'seed2',\n        'type': 'number',\n        'defaultValue': 0,\n        'notSupported': true\n      },\n      {'tfParamName': 'dtype', 'dlParamName': 'dtype', 'type': 'dtype'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'T',\n        'type': 'number',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Zeros',\n    'dlOpName': 'zeros',\n    'category': 'creation',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'shape', 'type': 'number[]'},\n      {'tfParamName': 'T', 'dlParamName': 'dtype', 'type': 'dtype'}\n    ]\n  },\n  {\n    'tfOpName': 'ZerosLike',\n    'dlOpName': 'zerosLike',\n    'category': 'creation',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'},\n      {'tfParamName': 'T', 'dlParamName': 'dtype', 'type': 'dtype'}\n    ]\n  }\n];\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json = [\n  {\n    'tfOpName': 'NonMaxSuppressionV2',\n    'dlOpName': 'nonMaxSuppression',\n    'category': 'dynamic',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'boxes', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'scores', 'type': 'tensor'},\n      {'tfInputIndex': 2, 'dlParamName': 'maxOutputSize', 'type': 'number'},\n      {'tfInputIndex': 3, 'dlParamName': 'iouThreshold', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'NonMaxSuppressionV3',\n    'dlOpName': 'nonMaxSuppression',\n    'category': 'dynamic',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'boxes', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'scores', 'type': 'tensor'},\n      {'tfInputIndex': 2, 'dlParamName': 'maxOutputSize', 'type': 'number'},\n      {'tfInputIndex': 3, 'dlParamName': 'iouThreshold', 'type': 'number'},\n      {'tfInputIndex': 4, 'dlParamName': 'scoreThreshold', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'Where',\n    'dlOpName': 'whereAsync',\n    'category': 'dynamic',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'condition', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'ListDiff',\n    'dlOpName': 'setdiff1dAsync',\n    'category': 'dynamic',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'y', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  }\n];\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json = [{\n  'tfOpName': 'TopKV2',\n  'dlOpName': 'topK',\n  'category': 'evaluation',\n  'params': [\n    {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'},\n    {'tfInputIndex': 1, 'dlParamName': 'k', 'type': 'number'},\n    {'tfParamName': 'sorted', 'dlParamName': 'sorted', 'type': 'bool'}\n  ]\n}];\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json = [\n  {\n    'tfOpName': 'PlaceholderWithDefault',\n    'dlOpName': 'placeholder',\n    'category': 'graph',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'default', 'type': 'tensor'},\n      {'tfParamName': 'shape', 'dlParamName': 'shape', 'type': 'shape'},\n      {'tfParamName': 'dtype', 'dlParamName': 'dtype', 'type': 'dtype'}\n    ]\n  },\n  {\n    'tfOpName': 'Placeholder',\n    'dlOpName': 'placeholder',\n    'category': 'graph',\n    'params': [\n      {'tfParamName': 'shape', 'dlParamName': 'shape', 'type': 'shape'},\n      {'tfParamName': 'dtype', 'dlParamName': 'dtype', 'type': 'dtype'}\n    ]\n  },\n  {'tfOpName': 'Const', 'dlOpName': 'const', 'category': 'graph'}, {\n    'tfOpName': 'Identity',\n    'dlOpName': 'identity',\n    'category': 'graph',\n    'params': [{'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Snapshot',\n    'dlOpName': 'snapshot',\n    'category': 'graph',\n    'params': [{'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Rank',\n    'dlOpName': 'rank',\n    'category': 'graph',\n    'params': [{'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Size',\n    'dlOpName': 'size',\n    'category': 'graph',\n    'params': [{'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Shape',\n    'dlOpName': 'shape',\n    'category': 'graph',\n    'params': [{'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'ShapeN',\n    'dlOpName': 'shapeN',\n    'category': 'graph',\n    'params': [{\n      'tfInputIndex': 0,\n      'tfInputParamLength': 0,\n      'dlParamName': 'x',\n      'type': 'tensors'\n    }]\n  },\n  {\n    'tfOpName': 'Print',\n    'dlOpName': 'print',\n    'category': 'graph',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'}, {\n        'tfInputIndex': 1,\n        'tfInputParamLength': 1,\n        'dlParamName': 'data',\n        'type': 'tensors'\n      },\n      {'tfParamName': 'message', 'dlParamName': 'message', 'type': 'string'}, {\n        'tfParamName': 'first_n',\n        'dlParamName': 'firstN',\n        'type': 'number',\n        'notSupprted': true\n      },\n      {\n        'tfParamName': 'summarize',\n        'dlParamName': 'summarize',\n        'type': 'number',\n        'defaultValue': 3\n      }\n    ]\n  },\n  {'tfOpName': 'NoOp', 'dlOpName': 'noop', 'category': 'graph', 'params': []}, {\n    'tfOpName': 'StopGradient',\n    'dlOpName': 'stopGradient',\n    'category': 'graph',\n    'params': [{'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'FakeQuantWithMinMaxVars',\n    'dlOpName': 'fakeQuantWithMinMaxVars',\n    'category': 'graph',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'},\n      {'tfParamName': 'min', 'dlParamName': 'min', 'type': 'number'},\n      {'tfParamName': 'max', 'dlParamName': 'max', 'type': 'number'}\n    ]\n  }\n];\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json = [\n  {\n    'tfOpName': 'ResizeBilinear',\n    'dlOpName': 'resizeBilinear',\n    'category': 'image',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'images', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'size', 'type': 'number[]'}, {\n        'tfParamName': 'align_corners',\n        'dlParamName': 'alignCorners',\n        'type': 'bool'\n      },\n      {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'ResizeNearestNeighbor',\n    'dlOpName': 'resizeNearestNeighbor',\n    'category': 'image',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'images', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'size', 'type': 'number[]'}, {\n        'tfParamName': 'align_corners',\n        'dlParamName': 'alignCorners',\n        'type': 'bool'\n      },\n      {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'CropAndResize',\n    'dlOpName': 'cropAndResize',\n    'category': 'image',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'image', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'boxes', 'type': 'tensor'},\n      {'tfInputIndex': 2, 'dlParamName': 'boxInd', 'type': 'tensor'},\n      {'tfInputIndex': 3, 'dlParamName': 'cropSize', 'type': 'number[]'},\n      {'tfParamName': 'method', 'dlParamName': 'method', 'type': 'string'}, {\n        'tfParamName': 'extrapolation_value',\n        'dlParamName': 'extrapolationValue',\n        'type': 'number'\n      }\n    ]\n  }\n];\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json = [\n  {\n    'tfOpName': 'Equal',\n    'dlOpName': 'equal',\n    'category': 'logical',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'a', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'b', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'NotEqual',\n    'dlOpName': 'notEqual',\n    'category': 'logical',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'a', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'b', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Greater',\n    'dlOpName': 'greater',\n    'category': 'logical',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'a', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'b', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'GreaterEqual',\n    'dlOpName': 'greaterEqual',\n    'category': 'logical',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'a', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'b', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Less',\n    'dlOpName': 'less',\n    'category': 'logical',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'a', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'b', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LessEqual',\n    'dlOpName': 'lessEqual',\n    'category': 'logical',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'a', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'b', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LogicalAnd',\n    'dlOpName': 'logicalAnd',\n    'category': 'logical',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'a', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'b', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LogicalNot',\n    'dlOpName': 'logicalNot',\n    'category': 'logical',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'a', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LogicalOr',\n    'dlOpName': 'logicalOr',\n    'category': 'logical',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'a', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'b', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Select',\n    'dlOpName': 'where',\n    'category': 'logical',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'condition', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'a', 'type': 'tensor'},\n      {'tfInputIndex': 2, 'dlParamName': 'b', 'type': 'tensor'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  }\n];\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json = [\n  {\n    'tfOpName': 'MatMul',\n    'dlOpName': 'matMul',\n    'category': 'matrices',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'a', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'b', 'type': 'tensor'}, {\n        'tfParamName': 'transpose_a',\n        'dlParamName': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfParamName': 'transpose_b',\n        'dlParamName': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'BatchMatMul',\n    'dlOpName': 'matMul',\n    'category': 'matrices',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'a', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'b', 'type': 'tensor'}, {\n        'tfParamName': 'adj_x',\n        'dlParamName': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfParamName': 'adj_y',\n        'dlParamName': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Transpose',\n    'dlOpName': 'transpose',\n    'category': 'matrices',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'perm', 'type': 'number[]'}, {\n        'tfParamName': 'T',\n        'dlParamName': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  }\n];\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json = [\n  {\n    'tfOpName': 'FusedBatchNorm',\n    'dlOpName': 'batchNormalization',\n    'category': 'normalization',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'scale', 'type': 'tensor'},\n      {'tfInputIndex': 2, 'dlParamName': 'offset', 'type': 'tensor'},\n      {'tfInputIndex': 3, 'dlParamName': 'mean', 'type': 'tensor'},\n      {'tfInputIndex': 4, 'dlParamName': 'variance', 'type': 'tensor'}, {\n        'tfParamName': 'epsilon',\n        'dlParamName': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.001\n      },\n      {\n        'tfParamName': 'data_format',\n        'dlParamName': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'FusedBatchNormV2',\n    'dlOpName': 'batchNormalization',\n    'category': 'normalization',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'scale', 'type': 'tensor'},\n      {'tfInputIndex': 2, 'dlParamName': 'offset', 'type': 'tensor'},\n      {'tfInputIndex': 3, 'dlParamName': 'mean', 'type': 'tensor'},\n      {'tfInputIndex': 4, 'dlParamName': 'variance', 'type': 'tensor'}, {\n        'tfParamName': 'epsilon',\n        'dlParamName': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.001\n      },\n      {\n        'tfParamName': 'data_format',\n        'dlParamName': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LRN',\n    'dlOpName': 'localResponseNormalization',\n    'category': 'normalization',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'}, {\n        'tfParamName': 'depth_radius',\n        'dlParamName': 'radius',\n        'type': 'number',\n        'defaultValue': 5\n      },\n      {\n        'tfParamName': 'bias',\n        'dlParamName': 'bias',\n        'type': 'number',\n        'defaultValue': 1.0\n      },\n      {\n        'tfParamName': 'alpha',\n        'dlParamName': 'alpha',\n        'type': 'number',\n        'defaultValue': 1.0\n      },\n      {\n        'tfParamName': 'beta',\n        'dlParamName': 'beta',\n        'type': 'number',\n        'defaultValue': 0.5\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Softmax',\n    'dlOpName': 'softmax',\n    'category': 'normalization',\n    'params': [{'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'LogSoftmax',\n    'dlOpName': 'logSoftmax',\n    'category': 'normalization',\n    'params': [{'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'SparseToDense',\n    'dlOpName': 'sparseToDense',\n    'category': 'normalization',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'sparseIndices', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'outputShape', 'type': 'number[]'},\n      {'tfInputIndex': 2, 'dlParamName': 'sparseValues', 'type': 'tensor'},\n      {'tfInputIndex': 3, 'dlParamName': 'defaultValue', 'type': 'tensor'}, {\n        'tfParamName': 'validate_indices',\n        'dlParamName': 'validateIndices',\n        'type': 'bool',\n        'defaultValue': true,\n        'notSupported': true\n      }\n    ]\n  }\n];\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json = [\n  {\n    'tfOpName': 'Max',\n    'dlOpName': 'max',\n    'category': 'reduction',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'axis', 'type': 'number[]'},\n      {'tfParamName': 'keep_dims', 'dlParamName': 'keepDims', 'type': 'bool'}\n    ]\n  },\n  {\n    'tfOpName': 'Mean',\n    'dlOpName': 'mean',\n    'category': 'reduction',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'axis', 'type': 'number[]'},\n      {'tfParamName': 'keep_dims', 'dlParamName': 'keepDims', 'type': 'bool'}\n    ]\n  },\n  {\n    'tfOpName': 'Min',\n    'dlOpName': 'min',\n    'category': 'reduction',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'axis', 'type': 'number[]'},\n      {'tfParamName': 'keep_dims', 'dlParamName': 'keepDims', 'type': 'bool'}\n    ]\n  },\n  {\n    'tfOpName': 'Sum',\n    'dlOpName': 'sum',\n    'category': 'reduction',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'axis', 'type': 'number[]'},\n      {'tfParamName': 'keep_dims', 'dlParamName': 'keepDims', 'type': 'bool'}\n    ]\n  },\n  {\n    'tfOpName': 'All',\n    'dlOpName': 'all',\n    'category': 'reduction',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'axis', 'type': 'number[]'},\n      {'tfParamName': 'keep_dims', 'dlParamName': 'keepDims', 'type': 'bool'}\n    ]\n  },\n  {\n    'tfOpName': 'Any',\n    'dlOpName': 'any',\n    'category': 'reduction',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'axis', 'type': 'number[]'},\n      {'tfParamName': 'keep_dims', 'dlParamName': 'keepDims', 'type': 'bool'}\n    ]\n  },\n  {\n    'tfOpName': 'ArgMax',\n    'dlOpName': 'argMax',\n    'category': 'reduction',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'axis', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'ArgMin',\n    'dlOpName': 'argMin',\n    'category': 'reduction',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'axis', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'Prod',\n    'dlOpName': 'prod',\n    'category': 'reduction',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'axis', 'type': 'number[]'}, {\n        'tfParamName': 'keep_dims',\n        'dlParamName': 'keepDims',\n        'type': 'bool'\n      }\n    ]\n  }\n];\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json = [\n  {\n    'tfOpName': 'ConcatV2',\n    'dlOpName': 'concat',\n    'category': 'slice_join',\n    'params': [\n      {\n        'tfInputIndex': 0,\n        'tfInputParamLength': 1,\n        'dlParamName': 'tensors',\n        'type': 'tensors'\n      },\n      {'tfInputIndex': -1, 'dlParamName': 'axis', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'Concat',\n    'dlOpName': 'concat',\n    'category': 'slice_join',\n    'params': [\n      {\n        'tfInputIndex': 1,\n        'tfInputParamLength': 1,\n        'dlParamName': 'tensors',\n        'type': 'tensors'\n      },\n      {'tfInputIndex': 0, 'dlParamName': 'axis', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'GatherV2',\n    'dlOpName': 'gather',\n    'category': 'slice_join',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'indices', 'type': 'tensor'}, {\n        'tfInputIndex': 2,\n        'dlParamName': 'axis',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Gather',\n    'dlOpName': 'gather',\n    'category': 'slice_join',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'indices', 'type': 'tensor'}, {\n        'tfParamName': 'axis',\n        'dlParamName': 'axis',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfParamName': 'validate_indices',\n        'dlParamName': 'validateIndices',\n        'type': 'bool',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Reverse',\n    'dlOpName': 'reverse',\n    'category': 'slice_join',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'}, {\n        'tfInputIndex': 1,\n        'dlParamName': 'dims',\n        'type': 'bool',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'ReverseV2',\n    'dlOpName': 'reverse',\n    'category': 'slice_join',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'axis', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'Slice',\n    'dlOpName': 'slice',\n    'category': 'slice_join',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'begin', 'type': 'number[]'},\n      {'tfInputIndex': 2, 'dlParamName': 'size', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'StridedSlice',\n    'dlOpName': 'stridedSlice',\n    'category': 'slice_join',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'begin', 'type': 'number[]'},\n      {'tfInputIndex': 2, 'dlParamName': 'end', 'type': 'number[]'},\n      {'tfInputIndex': 3, 'dlParamName': 'strides', 'type': 'number[]'}, {\n        'tfParamName': 'begin_mask',\n        'dlParamName': 'beginMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfParamName': 'end_mask',\n        'dlParamName': 'endMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfParamName': 'new_axis_mask',\n        'dlParamName': 'newAxisMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfParamName': 'ellipsis_mask',\n        'dlParamName': 'ellipsisMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfParamName': 'shrink_axis_mask',\n        'dlParamName': 'shrinkAxisMask',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Pack',\n    'dlOpName': 'stack',\n    'category': 'slice_join',\n    'params': [\n      {\n        'tfInputIndex': 0,\n        'tfInputParamLength': 0,\n        'dlParamName': 'tensors',\n        'type': 'tensors'\n      },\n      {\n        'tfParamName': 'axis',\n        'dlParamName': 'axis',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Unpack',\n    'dlOpName': 'unstack',\n    'category': 'slice_join',\n    'params': [\n      {\n        'tfInputIndex': 0,\n        'tfInputParamLength': 0,\n        'dlParamName': 'tensor',\n        'type': 'tensor'\n      },\n      {\n        'tfParamName': 'axis',\n        'dlParamName': 'axis',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfParamName': 'num',\n        'dlParamName': 'num',\n        'type': 'number',\n        'defaultValue': 0,\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Tile',\n    'dlOpName': 'tile',\n    'category': 'slice_join',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'reps', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'Split',\n    'dlOpName': 'split',\n    'category': 'slice_join',\n    'params': [\n      {\n        'tfInputIndex': 0,\n        'dlParamName': 'axis',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {'tfInputIndex': 1, 'dlParamName': 'x', 'type': 'tensor'}, {\n        'tfParamName': 'num_split',\n        'dlParamName': 'numOrSizeSplits',\n        'type': 'number',\n        'defaultValue': 1\n      }\n    ]\n  },\n  {\n    'tfOpName': 'SplitV',\n    'dlOpName': 'split',\n    'category': 'slice_join',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'numOrSizeSplits', 'type': 'number[]'},\n      {\n        'tfInputIndex': 2,\n        'dlParamName': 'axis',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ]\n  },\n  {\n    'tfOpName': 'ScatterNd',\n    'dlOpName': 'scatterNd',\n    'category': 'slice_join',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'indices', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'values', 'type': 'tensor'},\n      {'tfInputIndex': 2, 'dlParamName': 'shape', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'GatherNd',\n    'dlOpName': 'gatherNd',\n    'category': 'slice_join',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'indices', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'SparseToDense',\n    'dlOpName': 'sparseToDense',\n    'category': 'slice_join',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'sparseIndices', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'outputShape', 'type': 'number[]'},\n      {'tfInputIndex': 2, 'dlParamName': 'sparseValues', 'type': 'tensor'},\n      {'tfInputIndex': 3, 'dlParamName': 'defaultValue', 'type': 'tensor'}, {\n        'tfParamName': 'validate_indices',\n        'dlParamName': 'validateIndices',\n        'type': 'bool',\n        'defaultValue': false,\n        'notSupported': true\n      }\n    ]\n  }\n];\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json = [\n  {\n    'tfOpName': 'FFT',\n    'dlOpName': 'fft',\n    'category': 'spectral',\n    'params': [{'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'IFFT',\n    'dlOpName': 'ifft',\n    'category': 'spectral',\n    'params': [{'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'RFFT',\n    'dlOpName': 'rfft',\n    'category': 'spectral',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'}, {\n        'tfInputIndex': 1,\n        'dlParamName': 'fft_length',\n        'type': 'number',\n        'unsupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'IRFFT',\n    'dlOpName': 'irfft',\n    'category': 'spectral',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'}, {\n        'tfInputIndex': 1,\n        'dlParamName': 'fft_length',\n        'type': 'number',\n        'unsupported': true\n      }\n    ]\n  }\n];\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json = [\n  {\n    'tfOpName': 'Cast',\n    'dlOpName': 'cast',\n    'category': 'transformation',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'}, {\n        'tfParamName': 'SrcT',\n        'dlParamName': 'sdtype',\n        'type': 'dtype',\n        'notSupported': true\n      },\n      {'tfParamName': 'DstT', 'dlParamName': 'dtype', 'type': 'dtype'}\n    ]\n  },\n  {\n    'tfOpName': 'ExpandDims',\n    'dlOpName': 'expandDims',\n    'category': 'transformation',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'}, {\n        'tfInputIndex': 1,\n        'tfParamNameDeprecated': 'dim',\n        'dlParamName': 'axis',\n        'type': 'number'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Pad',\n    'dlOpName': 'pad',\n    'category': 'transformation',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'padding', 'type': 'number[]'}, {\n        'tfParamName': 'constant_value',\n        'dlParamName': 'constantValue',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ]\n  },\n  {\n    'tfOpName': 'PadV2',\n    'dlOpName': 'pad',\n    'category': 'transformation',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'padding', 'type': 'number[]'}, {\n        'tfInputIndex': 2,\n        'dlParamName': 'constantValue',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Reshape',\n    'dlOpName': 'reshape',\n    'category': 'transformation',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'shape', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'Squeeze',\n    'dlOpName': 'squeeze',\n    'category': 'transformation',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'}, {\n        'tfParamName': 'axis',\n        'tfParamNameDeprecated': 'squeeze_dims',\n        'dlParamName': 'axis',\n        'type': 'number[]'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'SpaceToBatchND',\n    'dlOpName': 'spaceToBatchND',\n    'category': 'transformation',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'blockShape', 'type': 'number[]'},\n      {'tfInputIndex': 2, 'dlParamName': 'paddings', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'BatchToSpaceND',\n    'dlOpName': 'batchToSpaceND',\n    'category': 'transformation',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'},\n      {'tfInputIndex': 1, 'dlParamName': 'blockShape', 'type': 'number[]'},\n      {'tfInputIndex': 2, 'dlParamName': 'crops', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'DepthToSpace',\n    'dlOpName': 'depthToSpace',\n    'category': 'transformation',\n    'params': [\n      {'tfInputIndex': 0, 'dlParamName': 'x', 'type': 'tensor'}, {\n        'tfParamName': 'block_size',\n        'dlParamName': 'blockSize',\n        'type': 'number'\n      },\n      {\n        'tfParamName': 'data_format',\n        'dlParamName': 'dataFormat',\n        'type': 'string'\n      }\n    ]\n  }\n];\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {DataType} from '@tensorflow/tfjs-core';\n\nimport {tensorflow} from '../data/compiled_api';\n\nimport {getNodeNameAndIndex} from './executors/utils';\nimport * as arithmetic from './op_list/arithmetic';\nimport * as basicMath from './op_list/basic_math';\nimport * as control from './op_list/control';\nimport * as convolution from './op_list/convolution';\nimport * as creation from './op_list/creation';\nimport * as dynamic from './op_list/dynamic';\nimport * as evaluation from './op_list/evaluation';\nimport * as graph from './op_list/graph';\nimport * as image from './op_list/image';\nimport * as logical from './op_list/logical';\nimport * as matrices from './op_list/matrices';\nimport * as normalization from './op_list/normalization';\nimport * as reduction from './op_list/reduction';\nimport * as sliceJoin from './op_list/slice_join';\nimport * as spectral from './op_list/spectral';\nimport * as transformation from './op_list/transformation';\nimport {Graph, Node, OpMapper, ParamValue} from './types';\n\nconst CONTROL_FLOW_OPS = ['Switch', 'Merge', 'Enter', 'Exit', 'NextIteration'];\nconst DYNAMIC_SHAPE_OPS =\n    ['NonMaxSuppressionV2', 'NonMaxSuppressionV3', 'Where'];\n\nexport class OperationMapper {\n  private static _instance: OperationMapper;\n\n  private opMappers: {[key: string]: OpMapper};\n\n  // Singleton instance for the mapper\n  public static get Instance() {\n    return this._instance || (this._instance = new this());\n  }\n\n  // Loads the op mapping from the JSON file.\n  private constructor() {\n    const ops = [\n      arithmetic, basicMath, control, convolution, creation, dynamic,\n      evaluation, logical, image, graph, matrices, normalization, reduction,\n      sliceJoin, spectral, transformation\n    ];\n    const mappersJson: OpMapper[] = [].concat.apply([], ops.map(op => op.json));\n\n    this.opMappers = mappersJson.reduce<{[key: string]: OpMapper}>(\n        (map, mapper: OpMapper) => {\n          map[mapper.tfOpName] = mapper;\n          return map;\n        },\n        {});\n  }\n\n  private isControlFlow(node: tensorflow.INodeDef) {\n    return CONTROL_FLOW_OPS.some(op => op === node.op);\n  }\n\n  private isDynamicShape(node: tensorflow.INodeDef) {\n    return DYNAMIC_SHAPE_OPS.some(op => op === node.op);\n  }\n  // Converts the model from Tensorflow GraphDef to local representation for\n  // deeplearn.js API\n  transformGraph(graph: tensorflow.IGraphDef): Graph {\n    const tfNodes = graph.node;\n    let withControlFlow = false;\n    let withDynamicShape = false;\n    const placeholders: Node[] = [];\n    const weights: Node[] = [];\n    const nodes = tfNodes.reduce<{[key: string]: Node}>((map, node) => {\n      map[node.name] = this.mapNode(node);\n      if (this.isControlFlow(node)) withControlFlow = true;\n      if (this.isDynamicShape(node)) withDynamicShape = true;\n      if (node.op === 'Placeholder') placeholders.push(map[node.name]);\n      if (node.op === 'Const') weights.push(map[node.name]);\n      return map;\n    }, {});\n\n    const inputs: Node[] = [];\n    const outputs: Node[] = [];\n    Object.keys(nodes).forEach(key => {\n      const node = nodes[key];\n      node.inputNames.forEach(name => {\n        const [nodeName, ] = getNodeNameAndIndex(name);\n        node.inputs.push(nodes[nodeName]);\n        nodes[nodeName].children.push(node);\n      });\n      if (node.inputs.length === 0) inputs.push(node);\n    });\n\n    Object.keys(nodes).forEach(key => {\n      const node = nodes[key];\n      if (node.children.length === 0) outputs.push(node);\n    });\n\n    return {\n      nodes,\n      inputs,\n      outputs,\n      weights,\n      placeholders,\n      withControlFlow,\n      withDynamicShape\n    };\n  }\n\n  private mapNode(node: tensorflow.INodeDef): Node {\n    const mapper = this.opMappers[node.op];\n    if (mapper === undefined) {\n      throw new Error('Tensorflow Op is not supported: ' + node.op);\n    }\n    const newNode: Node = {\n      name: node.name,\n      op: mapper.dlOpName,\n      category: mapper.category,\n      inputNames:\n          (node.input ||\n           []).map(input => input.startsWith('^') ? input.substr(1) : input),\n      inputs: [],\n      children: [],\n      params: {}\n    };\n\n    if (!!mapper.params) {\n      newNode.params = mapper.params.reduce<{[key: string]:\n                                                 ParamValue}>((map, param) => {\n        const inputIndex = param.tfInputIndex;\n        const inputParamLength = param.tfInputParamLength;\n        const type = param.type;\n        let value = undefined;\n        if (inputIndex === undefined) {\n          switch (param.type) {\n            case 'string':\n              value = this.getStringParam(\n                  node.attr, param.tfParamName, param.defaultValue as string);\n\n              if (value === undefined && !!param.tfParamNameDeprecated) {\n                value = this.getStringParam(\n                    node.attr, param.tfParamNameDeprecated,\n                    param.defaultValue as string);\n              }\n              break;\n            case 'number':\n              value = this.getNumberParam(\n                  node.attr, param.tfParamName,\n                  (param.defaultValue || 0) as number);\n              if (value === undefined && !!param.tfParamNameDeprecated) {\n                value = this.getNumberParam(\n                    node.attr, param.tfParamNameDeprecated,\n                    param.defaultValue as number);\n              }\n              break;\n            case 'number[]':\n              value = this.getNumericArrayParam(\n                  node.attr, param.tfParamName, param.defaultValue as number[]);\n              if (value === undefined && !!param.tfParamNameDeprecated) {\n                value = this.getNumericArrayParam(\n                    node.attr, param.tfParamNameDeprecated,\n                    param.defaultValue as number[]);\n              }\n              break;\n            case 'bool':\n              value = this.getBoolParam(\n                  node.attr, param.tfParamName, param.defaultValue as boolean);\n              if (value === undefined && !!param.tfParamNameDeprecated) {\n                value = this.getBoolParam(\n                    node.attr, param.tfParamNameDeprecated,\n                    param.defaultValue as boolean);\n              }\n              break;\n            case 'shape':\n              value = this.getTensorShapeParam(\n                  node.attr, param.tfParamName, param.defaultValue as number[]);\n              if (value === undefined && !!param.tfParamNameDeprecated) {\n                value = this.getTensorShapeParam(\n                    node.attr, param.tfParamNameDeprecated,\n                    param.defaultValue as number[]);\n              }\n              break;\n            case 'dtype':\n              value = this.getDtypeParam(\n                  node.attr, param.tfParamName, param.defaultValue as DataType);\n              if (value === undefined && !!param.tfParamNameDeprecated) {\n                value = this.getDtypeParam(\n                    node.attr, param.tfParamNameDeprecated,\n                    param.defaultValue as DataType);\n              }\n              break;\n            case 'tensor':\n            case 'tensors':\n              break;\n            default:\n              throw new Error(\n                  `Unsupported param type: ${param.type} for op: ${node.op}`);\n          }\n        }\n        map[param.dlParamName] = {value, inputIndex, type, inputParamLength};\n        return map;\n      }, {});\n    }\n    return newNode;\n  }\n\n  private getStringParam(\n      attrs: {[key: string]: tensorflow.IAttrValue}, name: string, def: string,\n      keepCase = false): string {\n    const param = attrs[name];\n    if (param !== undefined) {\n      const value = String.fromCharCode.apply(null, param.s);\n      return keepCase ? value : value.toLowerCase();\n    }\n    return def;\n  }\n\n  private getBoolParam(\n      attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n      def: boolean): boolean {\n    const param = attrs[name];\n    return param ? param.b : def;\n  }\n\n  private getNumberParam(\n      attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n      def: number): number {\n    const param = attrs[name] as tensorflow.AttrValue;\n    const value = (param ? param[param.value] : def) as number | Long;\n    return (typeof value === 'number') ? value : value['toInt']() as number;\n  }\n  private getDtypeParam(\n      attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n      def: DataType): DataType {\n    const param = attrs[name];\n    if (param && param.type) {\n      switch (param.type) {\n        case tensorflow.DataType.DT_FLOAT:\n          return 'float32';\n        case tensorflow.DataType.DT_INT32:\n          return 'int32';\n        case tensorflow.DataType.DT_BOOL:\n          return 'bool';\n        default:\n          return def;\n      }\n    }\n    return def;\n  }\n  private getTensorShapeParam(\n      attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n      def?: number[]): number[]|undefined {\n    const param = attrs[name];\n    if (param && param.shape) {\n      return param.shape.dim.map(\n          dim =>\n              (typeof dim.size === 'number') ? dim.size : dim.size['toInt']());\n    }\n    return def;\n  }\n\n  private getNumericArrayParam(\n      attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n      def: number[]): number[] {\n    const param = attrs[name];\n    if (param) {\n      return ((param.list.f && param.list.f.length ? param.list.f :\n                                                     param.list.i))\n                 .map(v => (typeof v === 'number') ? v : v['toInt']()) as\n          number[];\n    }\n    return def;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {Node} from '../types';\n\nimport {OpExecutor} from './types';\nimport {getParamValue} from './utils';\n\nexport let executeOp: OpExecutor = (node: Node, tensorMap: NamedTensorsMap,\n                                    context: ExecutionContext):\n                                       tfc.Tensor[] => {\n  switch (node.op) {\n    case 'add': {\n      return [tfc.add(\n          (getParamValue('a', node, tensorMap, context) as tfc.Tensor),\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'addN': {\n      return [tfc.addN((\n          getParamValue('tensors', node, tensorMap, context) as tfc.Tensor[]))];\n    }\n    case 'mod':\n      return [tfc.mod(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    case 'mul':\n      return [tfc.mul(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    case 'div': {\n      return [tfc.div(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'floorDiv': {\n      return [tfc.floorDiv(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'sub': {\n      return [tfc.sub(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'minimum': {\n      return [tfc.minimum(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'maximum': {\n      return [tfc.maximum(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'pow': {\n      return [tfc.pow(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'squaredDifference': {\n      return [tfc.squaredDifference(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'arithmetic';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {Node} from '../types';\n\nimport {OpExecutor} from './types';\nimport {getParamValue, getTensor} from './utils';\n\nexport let executeOp: OpExecutor = (node: Node, tensorMap: NamedTensorsMap,\n                                    context: ExecutionContext):\n                                       tfc.Tensor[] => {\n  switch (node.op) {\n    case 'abs':\n      return [tfc.abs(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'acos':\n      return [tfc.acos(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'acosh':\n      return [tfc.acosh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'asin':\n      return [tfc.asin(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'asinh':\n      return [tfc.asinh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'atan':\n      return [tfc.atan(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'atan2':\n      return [tfc.atan2(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('y', node, tensorMap, context) as tfc.Tensor)];\n    case 'atanh':\n      return [tfc.atanh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'ceil':\n      return [tfc.ceil(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'cos':\n      return [tfc.cos(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'cosh':\n      return [tfc.cosh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'elu':\n      return [tfc.elu(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'erf':\n      return [tfc.erf(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'exp':\n      return [tfc.exp(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'expm1': {\n      return [tfc.expm1(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'floor':\n      return [tfc.floor(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'log':\n      return [tfc.log(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'log1p': {\n      return [tfc.log1p(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'neg':\n      return [tfc.neg(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'reciprocal': {\n      return [tfc.reciprocal(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'relu':\n      return [tfc.relu(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'round': {\n      return [tfc.round(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'selu':\n      return [tfc.selu(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'sigmoid':\n      return [tfc.sigmoid(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'sin':\n      return [tfc.sin(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'sign': {\n      return [tfc.sign(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'sinh': {\n      return [tfc.sinh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'softplus': {\n      return [tfc.softplus(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'sqrt': {\n      return [tfc.sqrt(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'square': {\n      return [tfc.square(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'tanh': {\n      return [tfc.tanh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'tan':\n      return [tfc.tan(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'clipByValue':\n      return [tfc.clipByValue(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('clipValueMin', node, tensorMap, context) as number,\n          getParamValue('clipValueMax', node, tensorMap, context) as number)];\n    case 'rsqrt':\n      return [tfc.div(\n          tfc.scalar(1.0, 'float32'),\n          tfc.sqrt(getTensor(node.inputNames[0], tensorMap, context)))];\n    case 'prod':\n      return [tfc.prod(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('axes', node, tensorMap, context) as number[])];\n    case 'leakyRelu':\n      return [tfc.leakyRelu(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('alpha', node, tensorMap, context) as number)];\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'basic_math';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line:max-line-length\nimport {concat, DataType, slice, stack, Tensor, tensor, tidy, unstack, util} from '@tensorflow/tfjs-core';\n\nexport interface TensorWithState {\n  tensor?: Tensor;\n  written?: boolean;\n  read?: boolean;\n  cleared?: boolean;\n}\n/**\n * The TensorArray object keeps an array of Tensors.  It\n * allows reading from the array and writing to the array.\n */\nexport class TensorArray {\n  private static nextId = 0;\n  private tensors: TensorWithState[] = [];\n  private closed_ = false;\n  readonly id: number;\n  constructor(\n      public readonly name: string, public readonly dtype: DataType,\n      private maxSize: number, private elementShape: number[],\n      public readonly identicalElementShapes: boolean,\n      public readonly dynamicSize: boolean,\n      public readonly clearAfterRead: boolean) {\n    this.id = TensorArray.nextId++;\n  }\n\n  get closed() {\n    return this.closed_;\n  }\n\n  /**\n   * Close the current TensorArray.\n   */\n  clearAndClose() {\n    this.tensors.forEach(tensor => tensor.tensor.dispose());\n    this.tensors = [];\n    this.closed_ = true;\n  }\n\n  size(): number {\n    return this.tensors.length;\n  }\n\n  /**\n   * Read the value at location index in the TensorArray.\n   * @param index Number the index to read from.\n   */\n  read(index: number): Tensor {\n    if (this.closed_) {\n      throw new Error(`TensorArray ${this.name} has already been closed.`);\n    }\n\n    if (index < 0 || index >= this.tensors.length) {\n      throw new Error(`Tried to read from index ${index}, but array size is: ${\n          this.tensors.length}`);\n    }\n\n    const tensorWithState = this.tensors[index];\n    if (tensorWithState.cleared) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not read index ${\n              index} twice because it was cleared after a previous read ` +\n          `(perhaps try setting clear_after_read = false?).`);\n    }\n\n    if (this.clearAfterRead) {\n      tensorWithState.cleared = true;\n    }\n\n    tensorWithState.read = true;\n    return tensorWithState.tensor;\n  }\n\n  /**\n   * Helper method to read multiple tensors from the specified indices.\n   */\n  readMany(indices: number[]): Tensor[] {\n    return indices.map(index => this.read(index));\n  }\n\n  /**\n   * Write value into the index of the TensorArray.\n   * @param index number the index to write to.\n   * @param tensor\n   */\n  write(index: number, tensor: Tensor) {\n    if (this.closed_) {\n      throw new Error(`TensorArray ${this.name} has already been closed.`);\n    }\n\n    if (index < 0 || !this.dynamicSize && index >= this.maxSize) {\n      throw new Error(`Tried to write to index ${\n          index}, but array is not resizeable and size is: ${this.maxSize}`);\n    }\n\n    const t = this.tensors[index] || {};\n\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray ${\n          this.name}: Could not write to TensorArray index ${index},\n          because the value dtype is ${\n          tensor.dtype}, but TensorArray dtype is ${this.dtype}.`);\n    }\n\n    // Set the shape for the first time write to unknow shape tensor array\n    if (this.size() === 0 &&\n        (this.elementShape == null || this.elementShape.length === 0)) {\n      this.elementShape = tensor.shape;\n    }\n\n    this.assertShapesMatch(\n        this.elementShape, tensor.shape,\n        `TensorArray ${this.name}: Could not write to TensorArray index ${\n            index}.`);\n\n    if (t && t.read) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not write to TensorArray index ${\n              index}, because it has already been read.`);\n    }\n\n    if (t && t.written) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not write to TensorArray index ${\n              index}, because it has already been written.`);\n    }\n\n    t.tensor = tensor;\n    t.written = true;\n\n    this.tensors[index] = t;\n  }\n\n  /**\n   * Helper method to write multiple tensors to the specified indices.\n   */\n  writeMany(indices: number[], tensors: Tensor[]) {\n    if (indices.length !== tensors.length) {\n      throw new Error(\n          `TensorArray ${this.name}: could not write multiple tensors,` +\n          `because the index size: ${\n              indices.length} is not the same as tensors size: ${\n              tensors.length}.`);\n    }\n\n    indices.forEach((i, index) => this.write(i, tensors[index]));\n  }\n\n  /**\n   * Return selected values in the TensorArray as a packed Tensor. All of\n   * selected values must have been written and their shapes must all match.\n   * @param [indices] number[] Optional. Taking values in [0, max_value). If the\n   *    TensorArray is not dynamic, max_value=size(). If not specified returns\n   *    all tensors in the original order.\n   * @param [dtype]\n   */\n  gather(indices?: number[], dtype?: DataType): Tensor {\n    if (!!dtype && dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but gather requested dtype ${dtype}`);\n    }\n\n    if (!indices) {\n      indices = [];\n      for (let i = 0; i < this.size(); i++) {\n        indices.push(i);\n      }\n    }\n\n    if (indices.length === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n\n    // Read all the PersistentTensors into a vector to keep track of\n    // their memory.\n    const tensors = this.readMany(indices);\n\n    this.assertShapesMatch(\n        this.elementShape, tensors[0].shape, 'TensorArray shape mismatch: ');\n\n    return stack(tensors, 0);\n  }\n\n  /**\n   * Return the values in the TensorArray as a concatenated Tensor.\n   */\n  concat(dtype?: DataType): Tensor {\n    if (!!dtype && dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but concat requested dtype ${dtype}`);\n    }\n\n    if (this.size() === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n\n    const indices = [];\n    for (let i = 0; i < this.size(); i++) {\n      indices.push(i);\n    }\n    // Collect all the tensors from the tensors array.\n    const tensors = this.readMany(indices);\n\n    this.assertShapesMatch(\n        this.elementShape, tensors[0].shape,\n        `TensorArray shape mismatch: tensor array shape (${\n            this.elementShape}) vs first tensor shape (${tensors[0].shape})`);\n\n    return concat(tensors, 0);\n  }\n\n  /**\n   * Scatter the values of a Tensor in specific indices of a TensorArray.\n   * @param indices nummber[] values in [0, max_value). If the\n   *    TensorArray is not dynamic, max_value=size().\n   * @param tensor Tensor input tensor.\n   */\n  scatter(indices: number[], tensor: Tensor) {\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but tensor has dtype ${tensor.dtype}`);\n    }\n\n    if (indices.length !== tensor.shape[0]) {\n      throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${\n          indices.length} vs. ${tensor.shape[0]}`);\n    }\n\n    const maxIndex = Math.max(...indices);\n\n    if (!this.dynamicSize && maxIndex >= this.maxSize) {\n      throw new Error(\n          `Max index must be < array size (${maxIndex}  vs. ${this.maxSize})`);\n    }\n\n    this.writeMany(indices, unstack(tensor, 0));\n  }\n\n  /**\n   * Split the values of a Tensor into the TensorArray.\n   * @param length number[] with the lengths to use when splitting value along\n   *    its first dimension.\n   * @param tensor Tensor, the tensor to split.\n   */\n  split(length: number[], tensor: Tensor) {\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but tensor has dtype ${tensor.dtype}`);\n    }\n    let totalLength = 0;\n    const cumulativeLengths = length.map(len => {\n      totalLength += len;\n      return totalLength;\n    });\n\n    if (totalLength !== tensor.shape[0]) {\n      throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n    }\n\n    if (!this.dynamicSize && length.length !== this.maxSize) {\n      throw new Error(\n          `TensorArray's size is not equal to the size of lengths (${\n              this.maxSize} vs. ${length.length}), ` +\n          'and the TensorArray is not marked as dynamically resizeable');\n    }\n\n    const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n    const tensors: Tensor[] = [];\n    tidy(() => {\n      tensor = tensor.reshape([1, totalLength, elementPerRow]);\n      for (let i = 0; i < length.length; ++i) {\n        const previousLength = (i === 0) ? 0 : cumulativeLengths[i - 1];\n        const indices = [0, previousLength, 0];\n        const sizes = [1, length[i], elementPerRow];\n        tensors[i] = slice(tensor, indices, sizes).reshape(this.elementShape);\n      }\n      return tensors;\n    });\n    const indices = [];\n    for (let i = 0; i < length.length; i++) {\n      indices[i] = i;\n    }\n    this.writeMany(indices, tensors);\n  }\n\n  private assertShapesMatch(\n      shapeA: number[], shapeB: number[], errorMessagePrefix = ''): void {\n    util.assert(\n        this.arraysEqual(shapeA, shapeB),\n        errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n  }\n\n  private arraysEqual(n1: number[], n2: number[]) {\n    if (n1.length !== n2.length) {\n      return false;\n    }\n    for (let i = 0; i < n1.length; i++) {\n      if (n1[i] !== -1 && n2[i] !== -1 && n1[i] !== n2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {scalar} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {TensorArray} from '../../executor/tensor_array';\nimport {Node} from '../types';\n\nimport {getParamValue, getTensor} from './utils';\n\nexport async function executeOp(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): Promise<tfc.Tensor[]> {\n  switch (node.op) {\n    case 'loopCond':\n      return [\n        (getParamValue('pred', node, tensorMap, context) as tfc.Tensor).clone()\n      ];\n    case 'switch': {\n      const pred =\n          getParamValue('pred', node, tensorMap, context) as tfc.Tensor;\n      const data =\n          getParamValue('data', node, tensorMap, context) as tfc.Tensor;\n      // Outputs nodes :0 => false, :1 => true\n      return (await pred.data())[0] ? [undefined, data.clone()] :\n                                      [data.clone(), undefined];\n    }\n    case 'merge':\n      const inputName = node.inputNames.find(\n          name => getTensor(name, tensorMap, context) !== undefined);\n      return inputName ? [getTensor(inputName, tensorMap, context).clone()] :\n                         undefined;\n\n    case 'enter':\n      const frameId =\n          getParamValue('frameName', node, tensorMap, context) as string;\n      const data =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      context.enterFrame(frameId);\n      return [data.clone()];\n\n    case 'exit':\n      const tensor =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      context.exitFrame();\n      return [tensor.clone()];\n\n    case 'nextIteration':\n      const input =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      context.nextIteration();\n      return [input.clone()];\n\n    case 'tensorArray':\n      const size = getParamValue('size', node, tensorMap, context) as number;\n      const dtype =\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const dynamicSize =\n          getParamValue('dynamicSize', node, tensorMap, context) as boolean;\n      const clearAfterRead =\n          getParamValue('clearAfterRead', node, tensorMap, context) as boolean;\n      const identicalElementShapes =\n          getParamValue('identicalElementShapes', node, tensorMap, context) as\n          boolean;\n      const name = getParamValue('name', node, tensorMap, context) as string;\n      const tensorArray = new TensorArray(\n          name, dtype, size, elementShape, identicalElementShapes, dynamicSize,\n          clearAfterRead);\n      context.addTensorArray(tensorArray);\n      return [scalar(tensorArray.id), scalar(1.0)];\n\n    case 'tensorArrayWrite':\n      const id =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const index = getParamValue('index', node, tensorMap, context) as number;\n      const writeTensor =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      const writeTensorArray = context.getTensorArray(id);\n      writeTensorArray.write(index, writeTensor);\n      return [scalar(1.0)];\n\n    case 'tensorArrayRead':\n      const readId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const readIndex =\n          getParamValue('index', node, tensorMap, context) as number;\n      const readTensorArray = context.getTensorArray(readId);\n      return [readTensorArray.read(readIndex)];\n\n    case 'tensorArrayGather':\n      const gatherId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const gatherIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const gatherDtype =\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType;\n      const gatherTensorArray = context.getTensorArray(gatherId);\n      return [gatherTensorArray.gather(gatherIndices, gatherDtype)];\n\n    case 'tensorArrayScatter':\n      const scatterId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const scatterIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const scatterTensor =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      const scatterTensorArray = context.getTensorArray(scatterId);\n      scatterTensorArray.scatter(scatterIndices, scatterTensor);\n      return [scalar(1.0)];\n\n    case 'tensorArrayConcat':\n      const concatId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const concatTensorArray = context.getTensorArray(concatId);\n      const concatDtype =\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType;\n      return [concatTensorArray.concat(concatDtype)];\n\n    case 'tensorArraySplit':\n      const splitId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const splitTensor =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      const lengths =\n          getParamValue('lengths', node, tensorMap, context) as number[];\n      const splitTensorArray = context.getTensorArray(splitId);\n      splitTensorArray.split(lengths, splitTensor);\n      return [scalar(1.0)];\n\n    case 'tensorArraySize':\n      const sizeId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const sizeTensorArray = context.getTensorArray(sizeId);\n      return [scalar(sizeTensorArray.size(), 'int32')];\n\n    case 'tensorArrayClose':\n      const closeId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const closeTensorArray = context.getTensorArray(closeId);\n      closeTensorArray.clearAndClose();\n      return [];\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n}\n\nexport const CATEGORY = 'control';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {Node} from '../types';\n\nimport {OpExecutor} from './types';\nimport {getParamValue} from './utils';\n\nexport let executeOp: OpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): tfc.Tensor[] => {\n      switch (node.op) {\n        case 'conv1d': {\n          const stride =\n              getParamValue('stride', node, tensorMap, context) as number;\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as string)\n                  .toUpperCase();\n          const dilation =\n              getParamValue('dilation', node, tensorMap, context) as number;\n          return [tfc.conv1d(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor3D,\n              getParamValue('filter', node, tensorMap, context) as tfc.Tensor3D,\n              stride, pad as 'valid' | 'same', dataFormat as 'NWC' | 'NCW',\n              dilation)];\n        }\n        case 'conv2d': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as string)\n                  .toUpperCase();\n          const dilations =\n              getParamValue('dilations', node, tensorMap, context) as number[];\n          return [tfc.conv2d(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n                  tfc.Tensor4D,\n              getParamValue('filter', node, tensorMap, context) as tfc.Tensor4D,\n              [stride[1], stride[2]], pad as 'valid' | 'same',\n              dataFormat as 'NHWC' | 'NCHW', [dilations[0], dilations[1]])];\n        }\n        case 'conv2dTranspose': {\n          const shape = getParamValue(\n                            'outputShape', node, tensorMap,\n                            context) as [number, number, number] |\n              [number, number, number, number];\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          return [tfc.conv2dTranspose(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n                  tfc.Tensor4D,\n              getParamValue('filter', node, tensorMap, context) as tfc.Tensor4D,\n              shape, [stride[1], stride[2]], pad as 'valid' | 'same')];\n        }\n        case 'depthwiseConv2d': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const dilations =\n              getParamValue('dilations', node, tensorMap, context) as number[];\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as string)\n                  .toUpperCase();\n\n          return [tfc.depthwiseConv2d(\n              getParamValue('input', node, tensorMap, context) as tfc.Tensor3D |\n                  tfc.Tensor4D,\n              getParamValue('filter', node, tensorMap, context) as tfc.Tensor4D,\n              [stride[1], stride[2]], pad as 'valid' | 'same',\n              dataFormat as 'NHWC' | 'NCHW', [dilations[0], dilations[1]])];\n        }\n\n        case 'avgPool': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n          return [tfc.avgPool(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n                  tfc.Tensor4D,\n              [kernelSize[1], kernelSize[2]], [stride[1], stride[2]],\n              pad as 'valid' | 'same')];\n        }\n\n        case 'maxPool': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n          return [tfc.maxPool(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n                  tfc.Tensor4D,\n              [kernelSize[1], kernelSize[2]], [stride[1], stride[2]],\n              pad as 'valid' | 'same')];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'convolution';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {Node} from '../types';\n\nimport {OpExecutor} from './types';\nimport {getParamValue} from './utils';\n\nexport let executeOp: OpExecutor = (node: Node, tensorMap: NamedTensorsMap,\n                                    context: ExecutionContext):\n                                       tfc.Tensor[] => {\n  switch (node.op) {\n    case 'fill': {\n      const shape =\n          getParamValue('shape', node, tensorMap, context) as number[];\n      const dtype =\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType;\n      const value = getParamValue('value', node, tensorMap, context) as number;\n      return [tfc.fill(shape, value, dtype)];\n    }\n    case 'linspace': {\n      const start = getParamValue('start', node, tensorMap, context) as number;\n      const stop = getParamValue('stop', node, tensorMap, context) as number;\n      const num = getParamValue('num', node, tensorMap, context) as number;\n      return [tfc.linspace(start, stop, num)];\n    }\n    case 'oneHot': {\n      const indices =\n          getParamValue('indices', node, tensorMap, context) as tfc.Tensor1D;\n      const depth = getParamValue('depth', node, tensorMap, context) as number;\n      const onValue =\n          getParamValue('onValue', node, tensorMap, context) as number;\n      const offValue =\n          getParamValue('offValue', node, tensorMap, context) as number;\n      return [tfc.oneHot(indices, depth, onValue, offValue)];\n    }\n    case 'ones': {\n      return [tfc.ones(\n          getParamValue('shape', node, tensorMap, context) as number[],\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType)];\n    }\n    case 'onesLike': {\n      return [tfc.onesLike(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'randomUniform': {\n      return [tfc.randomUniform(\n          // tslint:disable-next-line:no-any\n          getParamValue('shape', node, tensorMap, context) as any,\n          getParamValue('minval', node, tensorMap, context) as number,\n          getParamValue('maxval', node, tensorMap, context) as number,\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType)];\n    }\n    case 'range': {\n      const start = getParamValue('start', node, tensorMap, context) as number;\n      const stop = getParamValue('stop', node, tensorMap, context) as number;\n      const step = getParamValue('step', node, tensorMap, context) as number;\n      return [tfc.range(\n          start, stop, step,\n          getParamValue('dtype', node, tensorMap, context) as 'float32' |\n              'int32')];\n    }\n    case 'truncatedNormal': {\n      const shape =\n          getParamValue('shape', node, tensorMap, context) as number[];\n      const mean = getParamValue('mean', node, tensorMap, context) as number;\n      const stdDev =\n          getParamValue('stdDev', node, tensorMap, context) as number;\n      const seed = getParamValue('seed', node, tensorMap, context) as number;\n      return [tfc.truncatedNormal(\n          shape, mean, stdDev,\n          getParamValue('dtype', node, tensorMap, context) as 'float32' |\n              'int32',\n          seed)];\n    }\n    case 'zeros': {\n      return [tfc.zeros(\n          getParamValue('shape', node, tensorMap, context) as number[],\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType)];\n    }\n    case 'zerosLike': {\n      return [tfc.zerosLike(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'creation';\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {Node} from '../types';\nimport {getParamValue} from './utils';\n\nexport async function executeOp(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): Promise<tfc.Tensor[]> {\n  switch (node.op) {\n    case 'nonMaxSuppression': {\n      const boxes =\n          getParamValue('boxes', node, tensorMap, context) as tfc.Tensor;\n      const scores =\n          getParamValue('scores', node, tensorMap, context) as tfc.Tensor;\n      const maxOutputSize =\n          getParamValue('maxOutputSize', node, tensorMap, context) as number;\n      const iouThreshold =\n          getParamValue('iouThreshold', node, tensorMap, context) as number;\n      const scoreThreshold =\n          getParamValue('scoreThreshold', node, tensorMap, context) as number;\n      return [await tfc.image.nonMaxSuppressionAsync(\n          boxes as tfc.Tensor2D, scores as tfc.Tensor1D, maxOutputSize,\n          iouThreshold, scoreThreshold)];\n    }\n    case 'whereAsync': {\n      return [await tfc.whereAsync(\n          getParamValue('condition', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'setdiff1dAsync': {\n      return await tfc.setdiff1dAsync(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('y', node, tensorMap, context) as tfc.Tensor);\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n}\n\nexport const CATEGORY = 'dynamic';\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {Node} from '../types';\n\nimport {OpExecutor} from './types';\nimport {getParamValue} from './utils';\n\nexport let executeOp: OpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): tfc.Tensor[] => {\n      switch (node.op) {\n        case 'topK': {\n          const x = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n          const k = getParamValue('k', node, tensorMap, context) as number;\n          const sorted =\n              getParamValue('sorted', node, tensorMap, context) as boolean;\n          const result = tfc.topk(x, k, sorted);\n          return [result.values, result.indices];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'evaluation';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {Node} from '../types';\n\nimport {OpExecutor} from './types';\nimport {getParamValue, getTensor} from './utils';\n\nexport let executeOp: OpExecutor = (node: Node, tensorMap: NamedTensorsMap,\n                                    context: ExecutionContext):\n                                       tfc.Tensor[] => {\n  switch (node.op) {\n    case 'const': {\n      return tensorMap[node.name];\n    }\n    case 'placeholder':\n      const def =\n          getParamValue('default', node, tensorMap, context) as tfc.Tensor;\n      return [getTensor(node.name, tensorMap, context) || def];\n    case 'identity':\n    case 'stopGradient':\n    case 'fakeQuantWithMinMaxVars':  // This op is currently ignored.\n      return [\n        (getParamValue('x', node, tensorMap, context) as tfc.Tensor).clone()\n      ];\n    case 'snapshot':\n      const snapshot =\n          (getParamValue('x', node, tensorMap, context) as tfc.Tensor);\n      return [snapshot.clone()];\n    case 'shape':\n      return [tfc.tensor1d(\n          (getParamValue('x', node, tensorMap, context) as tfc.Tensor).shape,\n          'int32')];\n    case 'shapeN':\n      return (getParamValue('x', node, tensorMap, context) as tfc.Tensor[])\n          .map((t: tfc.Tensor) => tfc.tensor1d(t.shape));\n    case 'size':\n      return [tfc.scalar(\n          (getParamValue('x', node, tensorMap, context) as tfc.Tensor).size,\n          'int32')];\n    case 'rank':\n      return [tfc.scalar(\n          (getParamValue('x', node, tensorMap, context) as tfc.Tensor).rank,\n          'int32')];\n    case 'noop':\n      return [];\n    case 'print':\n      const input = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n      const data =\n          getParamValue('data', node, tensorMap, context) as tfc.Tensor[];\n      const message =\n          getParamValue('message', node, tensorMap, context) as string;\n      const summarize =\n          getParamValue('summarize', node, tensorMap, context) as number;\n      console.warn(\n          'The graph has a tf.print() operation,' +\n          'usually used for debugging, which slows down performance.');\n      console.log(message);\n      for (let i = 0; i < data.length; i++) {\n        console.log(\n            Array.prototype.slice.call(data[0].dataSync()).slice(0, summarize));\n      }\n      return [input];\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'graph';\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {Node} from '../types';\n\nimport {OpExecutor} from './types';\nimport {getParamValue} from './utils';\n\nexport let executeOp: OpExecutor = (node: Node, tensorMap: NamedTensorsMap,\n                                    context: ExecutionContext):\n                                       tfc.Tensor[] => {\n  switch (node.op) {\n    case 'resizeBilinear': {\n      const images =\n          getParamValue('images', node, tensorMap, context) as tfc.Tensor;\n      const size = getParamValue('size', node, tensorMap, context) as number[];\n      const alignCorners =\n          getParamValue('alignCorners', node, tensorMap, context) as boolean;\n      return [tfc.image.resizeBilinear(\n          images as tfc.Tensor3D | tfc.Tensor4D, [size[0], size[1]],\n          alignCorners)];\n    }\n    case 'resizeNearestNeighbor': {\n      const images =\n          getParamValue('images', node, tensorMap, context) as tfc.Tensor;\n      const size = getParamValue('size', node, tensorMap, context) as number[];\n      const alignCorners =\n          getParamValue('alignCorners', node, tensorMap, context) as boolean;\n      return [tfc.image.resizeNearestNeighbor(\n          images as tfc.Tensor3D | tfc.Tensor4D, [size[0], size[1]],\n          alignCorners)];\n    }\n    case 'cropAndResize': {\n      const image =\n          getParamValue('image', node, tensorMap, context) as tfc.Tensor;\n      const boxes =\n          getParamValue('boxes', node, tensorMap, context) as tfc.Tensor;\n      const boxInd =\n          getParamValue('boxInd', node, tensorMap, context) as tfc.Tensor;\n      const cropSize =\n          getParamValue('cropSize', node, tensorMap, context) as number[];\n      const method =\n          getParamValue('method', node, tensorMap, context) as string;\n      const extrapolationValue =\n          getParamValue('extrapolationValue', node, tensorMap, context) as\n          number;\n      return [tfc.image.cropAndResize(\n          image as tfc.Tensor4D, boxes as tfc.Tensor2D, boxInd as tfc.Tensor1D,\n          cropSize as [number, number], method as 'bilinear' | 'nearest',\n          extrapolationValue)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'image';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {Node} from '../types';\n\nimport {OpExecutor} from './types';\nimport {getParamValue} from './utils';\n\nexport let executeOp: OpExecutor = (node: Node, tensorMap: NamedTensorsMap,\n                                    context: ExecutionContext):\n                                       tfc.Tensor[] => {\n  switch (node.op) {\n    case 'equal': {\n      return [tfc.equal(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'notEqual': {\n      return [tfc.notEqual(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'greater': {\n      return [tfc.greater(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'greaterEqual': {\n      return [tfc.greaterEqual(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'less': {\n      return [tfc.less(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'lessEqual': {\n      return [tfc.lessEqual(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'logicalAnd': {\n      return [tfc.logicalAnd(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'logicalNot': {\n      return [tfc.logicalNot(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'logicalOr': {\n      return [tfc.logicalOr(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'where': {\n      return [tfc.where(\n          getParamValue('condition', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'logical';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {Node} from '../types';\n\nimport {OpExecutor} from './types';\nimport {getParamValue} from './utils';\n\nexport let executeOp: OpExecutor = (node: Node, tensorMap: NamedTensorsMap,\n                                    context: ExecutionContext):\n                                       tfc.Tensor[] => {\n  switch (node.op) {\n    case 'matMul':\n      return [tfc.matMul(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor2D,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor2D,\n          getParamValue('transposeA', node, tensorMap, context) as boolean,\n          getParamValue('transposeB', node, tensorMap, context) as boolean)];\n    case 'transpose':\n      return [tfc.transpose(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('perm', node, tensorMap, context) as number[])];\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'matrices';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {Node} from '../types';\n\nimport {OpExecutor} from './types';\nimport {getParamValue} from './utils';\n\nexport let executeOp: OpExecutor = (node: Node, tensorMap: NamedTensorsMap,\n                                    context: ExecutionContext):\n                                       tfc.Tensor[] => {\n  switch (node.op) {\n    case 'batchNormalization': {\n      return [tfc.batchNorm(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('mean', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('variance', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('offset', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('scale', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('epsilon', node, tensorMap, context) as number)];\n    }\n    case 'localResponseNormalization': {\n      return [tfc.localResponseNormalization(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n              tfc.Tensor4D,\n          getParamValue('radius', node, tensorMap, context) as number,\n          getParamValue('bias', node, tensorMap, context) as number,\n          getParamValue('alpha', node, tensorMap, context) as number,\n          getParamValue('beta', node, tensorMap, context) as number)];\n    }\n    case 'softmax': {\n      return [tfc.softmax(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'logSoftmax': {\n      return [tfc.logSoftmax(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'sparseToDense': {\n      return [tfc.sparseToDense(\n          getParamValue('sparseIndices', node, tensorMap, context) as\n              tfc.Tensor,\n          getParamValue('outputShape', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('sparseValues', node, tensorMap, context) as number[],\n          getParamValue('defaultValue', node, tensorMap, context) as\n              tfc.Scalar)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'normalization';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {Node} from '../types';\n\nimport {OpExecutor} from './types';\nimport {getParamValue} from './utils';\n\nexport let executeOp: OpExecutor = (node: Node, tensorMap: NamedTensorsMap,\n                                    context: ExecutionContext):\n                                       tfc.Tensor[] => {\n  switch (node.op) {\n    case 'max': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.max(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'mean': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.mean(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'min': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.min(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'sum': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.sum(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'all': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.all(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'any': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.any(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'argMax': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      return [tfc.argMax(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis)];\n    }\n    case 'argMin': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      return [tfc.argMin(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis)];\n    }\n    case 'prod': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.prod(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'reduction';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {Node} from '../types';\n\nimport {OpExecutor} from './types';\nimport {getParamValue} from './utils';\n\nexport let executeOp: OpExecutor = (node: Node, tensorMap: NamedTensorsMap,\n                                    context: ExecutionContext):\n                                       tfc.Tensor[] => {\n  switch (node.op) {\n    case 'concat': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      const inputs =\n          getParamValue('tensors', node, tensorMap, context) as tfc.Tensor[];\n      return [tfc.concat(inputs, axis)];\n    }\n    case 'gather': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      const input = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n      const indices =\n          getParamValue('indices', node, tensorMap, context) as tfc.Tensor1D;\n      return [tfc.gather(input, indices, axis)];\n    }\n    case 'reverse': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const input = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n      return [tfc.reverse(input, axis)];\n    }\n    case 'slice': {\n      // tslint:disable-next-line:no-any\n      const begin = getParamValue('begin', node, tensorMap, context) as any;\n      // tslint:disable-next-line:no-any\n      const size = getParamValue('size', node, tensorMap, context) as any;\n      return [tfc.slice(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, begin,\n          size)];\n    }\n    case 'stridedSlice': {\n      const begin =\n          getParamValue('begin', node, tensorMap, context) as number[];\n      const end = getParamValue('end', node, tensorMap, context) as number[];\n      const strides =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const beginMask =\n          getParamValue('beginMask', node, tensorMap, context) as number;\n      const endMask =\n          getParamValue('endMask', node, tensorMap, context) as number;\n      const ellipsisMask =\n          getParamValue('ellipsisMask', node, tensorMap, context) as number;\n      const newAxisMask =\n          getParamValue('newAxisMask', node, tensorMap, context) as number;\n      const shrinkAxisMask =\n          getParamValue('shrinkAxisMask', node, tensorMap, context) as number;\n      const tensor = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n      if (begin.length === 1 && tensor.shape.length > 1) {\n        for (let i = 1; i < tensor.shape.length; i++) {\n          begin.push(0);\n          end.push(tensor.shape[i]);\n          strides.push(strides[0]);\n        }\n      }\n      return [tfc.stridedSlice(\n          tensor, begin, end, strides, beginMask, endMask, ellipsisMask,\n          newAxisMask, shrinkAxisMask)];\n    }\n    case 'stack': {\n      return tfc.tidy(() => {\n        const axis = getParamValue('axis', node, tensorMap, context) as number;\n        const tensors =\n            getParamValue('tensors', node, tensorMap, context) as tfc.Tensor[];\n        // Reshape the tensors to the first tensor's shape if they don't match.\n        const shape = tensors[0].shape;\n        const squeezedShape = tensors[0].squeeze().shape;\n        const mapped = tensors.map(tensor => {\n          const sameShape = tfc.util.arraysEqual(tensor.shape, shape);\n          if (!sameShape &&\n              !tfc.util.arraysEqual(tensor.squeeze().shape, squeezedShape)) {\n            throw new Error('the input tensors shape does not match');\n          }\n          return sameShape ? tensor : tensor.reshape(shape);\n        });\n        return [tfc.stack(mapped, axis)];\n      });\n    }\n    case 'unstack': {\n      return tfc.tidy(() => {\n        const axis = getParamValue('axis', node, tensorMap, context) as number;\n        const tensor =\n            getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n        return tfc.unstack(tensor, axis);\n      });\n    }\n    case 'tile': {\n      const reps = getParamValue('reps', node, tensorMap, context) as number[];\n      return [tfc.tile(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, reps)];\n    }\n    case 'split': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      const numOrSizeSplits =\n          getParamValue('numOrSizeSplits', node, tensorMap, context) as number |\n          number[];\n      return tfc.split(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          numOrSizeSplits, axis);\n    }\n    case 'scatterNd': {\n      const indices =\n          getParamValue('indices', node, tensorMap, context) as tfc.Tensor;\n      const values =\n          getParamValue('values', node, tensorMap, context) as tfc.Tensor;\n      const shape =\n          getParamValue('shape', node, tensorMap, context) as number[];\n      return [tfc.scatterND(indices, values, shape)];\n    }\n    case 'gatherNd': {\n      const x = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n      const indices =\n          getParamValue('indices', node, tensorMap, context) as tfc.Tensor;\n      return [tfc.gatherND(x, indices)];\n    }\n    case 'sparseToDense': {\n      const indices =\n          getParamValue('sparseIndices', node, tensorMap, context) as\n          tfc.Tensor;\n      const shape =\n          getParamValue('outputShape', node, tensorMap, context) as number[];\n      const sparseValues =\n          getParamValue('sparseValues', node, tensorMap, context) as tfc.Tensor;\n      const defaultValue =\n          getParamValue('defaultValue', node, tensorMap, context) as tfc.Scalar;\n      return [tfc.sparseToDense(indices, sparseValues, shape, defaultValue)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'slice_join';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {Node} from '../types';\n\nimport {OpExecutor} from './types';\nimport {getParamValue} from './utils';\n\nexport let executeOp: OpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): tfc.Tensor[] => {\n      switch (node.op) {\n        case 'fft': {\n          return [tfc.fft(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n        }\n        case 'ifft': {\n          return [tfc.ifft(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n        }\n        case 'rfft': {\n          return [tfc.rfft(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n        }\n        case 'irfft': {\n          return [tfc.irfft(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'spectral';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {Node} from '../types';\n\nimport {OpExecutor} from './types';\nimport {getParamValue, split} from './utils';\n\nexport let executeOp: OpExecutor = (node: Node, tensorMap: NamedTensorsMap,\n                                    context: ExecutionContext):\n                                       tfc.Tensor[] => {\n  switch (node.op) {\n    case 'cast': {\n      return [tfc.cast(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('dtype', node, tensorMap, context) as 'int32' |\n              'float32' | 'bool')];\n    }\n    case 'expandDims': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      return [tfc.expandDims(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis)];\n    }\n    case 'squeeze': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      return [tfc.squeeze(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis)];\n    }\n\n    case 'reshape': {\n      return [tfc.reshape(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('shape', node, tensorMap, context) as number[])];\n    }\n    case 'pad': {\n      return [tfc.pad(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          split(\n              getParamValue('padding', node, tensorMap, context) as number[],\n              2) as Array<[number, number]>,\n          getParamValue('constantValue', node, tensorMap, context) as number)];\n    }\n    case 'spaceToBatchND': {\n      const blockShape =\n          getParamValue('blockShape', node, tensorMap, context) as number[];\n      const paddings = split(\n          getParamValue('paddings', node, tensorMap, context) as number[], 2);\n      return [tfc.spaceToBatchND(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          blockShape, paddings)];\n    }\n    case 'batchToSpaceND': {\n      const blockShape =\n          getParamValue('blockShape', node, tensorMap, context) as number[];\n      const crops = split(\n          getParamValue('crops', node, tensorMap, context) as number[], 2);\n      return [tfc.batchToSpaceND(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          blockShape, crops)];\n    }\n    case 'depthToSpace': {\n      const blockSize =\n          getParamValue('blockSize', node, tensorMap, context) as number;\n      const dataFormat =\n          (getParamValue('dataFormat', node, tensorMap, context) as\n           string).toUpperCase() as 'NHWC' |\n          'NCHW';\n      return [tfc.depthToSpace(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor4D,\n          blockSize, dataFormat)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'transformation';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../data/types';\nimport {ExecutionContext} from '../executor/execution_context';\n\nimport * as arithmetic from './executors/arithmetic_executor';\nimport * as basicMath from './executors/basic_math_executor';\nimport * as control from './executors/control_executor';\nimport * as convolution from './executors/convolution_executor';\nimport * as creation from './executors/creation_executor';\nimport * as dynamic from './executors/dynamic_executor';\nimport * as evaluation from './executors/evaluation_executor';\nimport * as graph from './executors/graph_executor';\nimport * as image from './executors/image_executor';\nimport * as logical from './executors/logical_executor';\nimport * as matrices from './executors/matrices_executor';\nimport * as normalization from './executors/normalization_executor';\nimport * as reduction from './executors/reduction_executor';\nimport * as sliceJoin from './executors/slice_join_executor';\nimport * as spectral from './executors/spectral_executor';\nimport * as transformation from './executors/transformation_executor';\nimport {Node} from './types';\n\n/**\n * Executes the op defined by the node object.\n * @param node\n * @param tensorMap contains tensors for executed nodes and weights\n */\nexport function executeOp(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): tfc.Tensor[]|Promise<tfc.Tensor[]> {\n  switch (node.category) {\n    case 'arithmetic':\n      return arithmetic.executeOp(node, tensorMap, context);\n    case 'basic_math':\n      return basicMath.executeOp(node, tensorMap, context);\n    case 'control':\n      return control.executeOp(node, tensorMap, context);\n    case 'convolution':\n      return convolution.executeOp(node, tensorMap, context);\n    case 'creation':\n      return creation.executeOp(node, tensorMap, context);\n    case 'dynamic':\n      return dynamic.executeOp(node, tensorMap, context);\n    case 'evaluation':\n      return evaluation.executeOp(node, tensorMap, context);\n    case 'image':\n      return image.executeOp(node, tensorMap, context);\n    case 'graph':\n      return graph.executeOp(node, tensorMap, context);\n    case 'logical':\n      return logical.executeOp(node, tensorMap, context);\n    case 'matrices':\n      return matrices.executeOp(node, tensorMap, context);\n    case 'normalization':\n      return normalization.executeOp(node, tensorMap, context);\n    case 'reduction':\n      return reduction.executeOp(node, tensorMap, context);\n    case 'slice_join':\n      return sliceJoin.executeOp(node, tensorMap, context);\n    case 'spectral':\n      return spectral.executeOp(node, tensorMap, context);\n    case 'transformation':\n      return transformation.executeOp(node, tensorMap, context);\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap, TensorArrayMap} from '../data/types';\n\nimport {TensorArray} from './tensor_array';\n\nexport interface ExecutionContextInfo {\n  id: number;           // the unique id of the context info\n  frameName: string;    // The frame name of the loop, this comes from\n                        // the TensorFlow NodeDef.\n  iterationId: number;  // The iteration id of the loop\n}\n\n/**\n * ExecutionContext captures the runtime environment of the node. It keeps\n * track of the current frame and iteration for the control flow ops.\n *\n * For example, typical Dynamic RNN model may contain loops, for which\n * TensorFlow will generate graphs with Enter/Exit nodes to control the\n * current execution frame, and NextIteration Nodes for iteration id increment.\n * For model with branch logic, TensorFLow will generate Switch/Merge ops.\n */\nexport class ExecutionContext {\n  private rootContext = {id: 0, frameName: '', iterationId: 0};\n  private contexts: ExecutionContextInfo[] = [this.rootContext];\n  private lastId = 0;\n  private _currentContextIds: string[];\n\n  constructor(\n      public readonly weightMap: NamedTensorsMap,\n      public readonly tensorArrayMap: TensorArrayMap) {\n    this.generateCurrentContextIds();\n  }\n\n  private newFrame(id: number, frameName: string) {\n    return {id, frameName, iterationId: 0};\n  }\n\n  /**\n   * Set the current context\n   * @param contexts: ExecutionContextInfo[] the current path of execution\n   * frames\n   */\n  set currentContext(contexts: ExecutionContextInfo[]) {\n    if (this.contexts !== contexts) {\n      this.contexts = contexts;\n      this.generateCurrentContextIds();\n    }\n  }\n\n  get currentContext(): ExecutionContextInfo[] {\n    return this.contexts;\n  }\n\n  /**\n   * Returns the current context in string format.\n   */\n  get currentContextId(): string {\n    return this._currentContextIds[0];\n  }\n\n  /**\n   * Returns the current context and all parent contexts in string format.\n   * This allow access to the nodes in the current and parent frames.\n   */\n  get currentContextIds(): string[] {\n    return this._currentContextIds;\n  }\n\n  private generateCurrentContextIds() {\n    const names = [];\n    for (let i = 0; i < this.contexts.length - 1; i++) {\n      const contexts = this.contexts.slice(0, this.contexts.length - i);\n      names.push(this.contextIdforContexts(contexts));\n    }\n    names.push('');\n    this._currentContextIds = names;\n  }\n\n  private contextIdforContexts(contexts: ExecutionContextInfo[]) {\n    return contexts ?\n        contexts\n            .map(\n                context => (context.id === 0 && context.iterationId === 0) ?\n                    '' :\n                    `${context.frameName}-${context.iterationId}`)\n            .join('/') :\n        '';\n  }\n\n  /**\n   * Enter a new frame, a new context is pushed on the current context list.\n   * @param frameId new frame id\n   */\n  enterFrame(frameId: string) {\n    if (this.contexts) {\n      this.lastId++;\n      this.contexts = this.contexts.slice();\n      this.contexts.push(this.newFrame(this.lastId, frameId));\n      this._currentContextIds.unshift(this.contextIdforContexts(this.contexts));\n    }\n  }\n\n  /**\n   * Exit the current frame, the last context is removed from the current\n   * context list.\n   */\n  exitFrame() {\n    if (this.contexts && this.contexts.length > 1) {\n      this.contexts = this.contexts.slice();\n      this.contexts.splice(-1);\n      this.currentContextIds.shift();\n    } else {\n      throw new Error('Cannot exit frame, the context is empty');\n    }\n  }\n\n  /**\n   * Enter the next iteration of a loop, the iteration id of last context is\n   * increased.\n   */\n  nextIteration() {\n    if (this.contexts && this.contexts.length > 0) {\n      this.contexts = this.contexts.slice();\n      this.lastId++;\n      const context =\n          Object.assign({}, this.contexts[this.contexts.length - 1]) as\n          ExecutionContextInfo;\n      context.iterationId += 1;\n      context.id = this.lastId;\n      this.contexts.splice(-1, 1, context);\n      this._currentContextIds.splice(\n          0, 1, this.contextIdforContexts(this.contexts));\n    } else {\n      throw new Error('Cannot increase frame iteration, the context is empty');\n    }\n  }\n\n  getWeight(name: string): Tensor[] {\n    return this.weightMap[name];\n  }\n\n  addTensorArray(tensorArray: TensorArray) {\n    this.tensorArrayMap[tensorArray.id] = tensorArray;\n  }\n\n  getTensorArray(id: number): TensorArray {\n    return this.tensorArrayMap[id];\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, Tensor, tidy, util} from '@tensorflow/tfjs-core';\n\n// tslint:disable-next-line:max-line-length\nimport {NamedTensorMap, NamedTensorsMap, TensorArrayMap, TensorInfo} from '../data/types';\n// tslint:disable-next-line:max-line-length\nimport {getNodeNameAndIndex, getParamValue, getTensor, getTensorsForCurrentContenxt, parseNodeName} from '../operations/executors/utils';\nimport {executeOp} from '../operations/operation_executor';\nimport {Graph, Node} from '../operations/types';\n\nimport {ExecutionContext, ExecutionContextInfo} from './execution_context';\n\ninterface NodeWithContexts {\n  contexts: ExecutionContextInfo[];\n  node: Node;\n}\n\nexport class GraphExecutor {\n  private compiledMap: Map<string, Node[]> = new Map();\n  private _weightMap: NamedTensorsMap = {};\n  private weightIds: number[];\n  private placeholders: Node[];\n  private _outputs: Node[];\n  private SEPERATOR = ',';\n  get weightMap(): NamedTensorsMap {\n    return this._weightMap;\n  }\n  set weightMap(weightMap: NamedTensorsMap) {\n    const weightIds = Object.keys(weightMap).map(\n        key => weightMap[key].map(tensor => tensor.id));\n    this.weightIds = [].concat.apply([], weightIds);\n    this._weightMap = weightMap;\n  }\n\n  get inputs(): TensorInfo[] {\n    return this.placeholders.map(node => {\n      return {\n        name: node.name,\n        shape: node.params['shape'] ? node.params['shape'].value as number[] :\n                                      undefined,\n        dtype: node.params['dtype'] ? node.params['dtype'].value as DataType :\n                                      undefined\n      };\n    });\n  }\n\n  get outputs(): TensorInfo[] {\n    return this._outputs.map(node => {\n      return {\n        name: node.name,\n        shape: node.params['shape'] ? node.params['shape'].value as number[] :\n                                      undefined,\n        dtype: node.params['dtype'] ? node.params['dtype'].value as DataType :\n                                      undefined\n      };\n    });\n  }\n\n  get inputNodes(): string[] {\n    return this.placeholders.map(node => node.name);\n  }\n\n  get outputNodes(): string[] {\n    return this.outputs.map(node => node.name);\n  }\n\n  constructor(private graph: Graph) {\n    this.placeholders = graph.placeholders;\n    this._outputs = graph.outputs;\n    this.compile();\n  }\n\n  get isControlFlowModel(): boolean {\n    return this.graph.withControlFlow;\n  }\n\n  get isDynamicShapeModel(): boolean {\n    return this.graph.withDynamicShape;\n  }\n\n  /**\n   * Compiles the inference graph to generate the topology order of op nodes,\n   * cache the result for inference execution.\n   */\n  private compile(startNodes?: Node[]) {\n    // Do not compile for graph with control flow, since the execution order\n    // requires runtime evaluation of the output tensors.\n    if (this.graph.withControlFlow || this.graph.withDynamicShape) {\n      return;\n    }\n    const compiledOrder = [];\n    const inputs = startNodes || this.graph.placeholders;\n    const sortedNodeNames = inputs.map(node => node.name).sort();\n    const nameKey = sortedNodeNames.join(this.SEPERATOR);\n\n    // do nothing is the compiled graph cache contains the input.\n    if (this.compiledMap.get(nameKey)) {\n      return;\n    }\n\n    const stack = [...inputs, ...this.graph.weights];\n    const visited: {[key: string]: boolean} = {};\n    while (stack.length > 0) {\n      const node = stack.pop();\n      visited[node.name] = true;\n      compiledOrder.push(node);\n      node.children.forEach((childNode) => {\n        if (!visited[childNode.name] && childNode.inputNames.every(name => {\n              const [nodeName, ] = getNodeNameAndIndex(name);\n              return visited[nodeName];\n            })) {\n          stack.push(childNode);\n        }\n      });\n    }\n    this.compiledMap.set(nameKey, compiledOrder);\n  }\n\n  /**\n   * Executes the inference for given input tensors.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   */\n  execute(\n      inputs: NamedTensorsMap, strictInputCheck = true,\n      outputs?: string|string[]): NamedTensorMap {\n    const names = Object.keys(inputs).sort();\n    this.checkInput(inputs, strictInputCheck);\n    this.checkInputShapeAndType(inputs, strictInputCheck);\n\n    this.compile(names.map(name => this.graph.nodes[name]));\n    const outputNames = this.calculateOutputs(outputs);\n    this.checkOutput(\n        this.compiledMap.get(names.join(this.SEPERATOR)), outputNames);\n\n    const tensorArrayMap: TensorArrayMap = {};\n    const result = tidy(() => {\n      const context = new ExecutionContext(this._weightMap, tensorArrayMap);\n      const tensorMap = {...this.weightMap, ...inputs};\n      const tensorsToKeep = this.getFrozenTensorIds(tensorMap);\n      const intermediateTensorConsumerCount: {[key: number]: number} = {};\n\n      const compiledNodes = this.compiledMap.get(names.join(this.SEPERATOR));\n      for (let i = 0; i < compiledNodes.length; i++) {\n        const node = compiledNodes[i];\n        if (!tensorMap[node.name]) {\n          tensorMap[node.name] =\n              executeOp(node, tensorMap, context) as Tensor[];\n          this.checkTensorForDisposal(\n              node.name, node, tensorMap, context, tensorsToKeep, outputNames,\n              intermediateTensorConsumerCount);\n        }\n        // stop the execution if all outputs are found.\n        if (outputNames.every(name => !!tensorMap[name])) {\n          break;\n        }\n      }\n      return this.findOutputs(tensorMap, context, outputNames);\n    });\n    return result;\n  }\n\n  private getFrozenTensorIds(tensorMap: NamedTensorsMap): Set<number> {\n    const ids = [].concat.apply(\n        [],\n        Object.keys(tensorMap)\n            .map(key => tensorMap[key])\n            .map(tensors => tensors.map(tensor => tensor.id)));\n    return new Set(ids);\n  }\n  private checkTensorForDisposal(\n      nodeName: string, node: Node, tensorMap: NamedTensorsMap,\n      context: ExecutionContext, tensorsToKeep: Set<number>,\n      outputNames: string[],\n      intermediateTensorConsumerCount: {[key: string]: number}) {\n    // Skip output nodes and any control flow nodes, since its dependency is\n    // tricky to track correctly.\n    if (node.category === 'control' || outputNames.indexOf(nodeName) !== -1) {\n      return;\n    }\n\n    tensorMap[nodeName].forEach(tensor => {\n      if (tensor != null) {\n        intermediateTensorConsumerCount[tensor.id] =\n            (intermediateTensorConsumerCount[tensor.id] || 0) +\n            node.children.length;\n      }\n    });\n    node.inputs.forEach(input => {\n      // Skip any control flow nodes, since its dependency is tricky to track\n      // correctly.\n      if (input.category !== 'control') {\n        const tensors =\n            getTensorsForCurrentContenxt(input.name, tensorMap, context);\n        if (tensors != null) {\n          tensors.forEach(tensor => {\n            if (tensor && !tensorsToKeep.has(tensor.id)) {\n              const count = intermediateTensorConsumerCount[tensor.id];\n              if (count === 1) {\n                tensor.dispose();\n                delete intermediateTensorConsumerCount[tensor.id];\n              } else if (count != null) {\n                // only intermediate nodes has count set, inputs and weights are\n                // not.\n                intermediateTensorConsumerCount[tensor.id]--;\n              }\n            }\n          });\n        }\n      }\n    });\n  }\n  /**\n   * Executes the inference for given input tensors in Async fashion.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   */\n  async executeAsync(inputs: NamedTensorsMap, outputs?: string|string[]):\n      Promise<NamedTensorMap> {\n    this.checkInput(inputs, false);\n    this.checkInputShapeAndType(inputs, false);\n    const tensorArrayMap: TensorArrayMap = {};\n    const context = new ExecutionContext(this._weightMap, tensorArrayMap);\n    const outputNames = this.calculateOutputs(outputs);\n    // Graph with control flow op requires runtime evaluation of the execution\n    // order, while without control flow the execution order is pre-determined\n    // in the compile method.\n    const tensors =\n        await this.executeWithControlFlow(inputs, context, outputNames);\n    const results = this.findOutputs(tensors, context, outputs);\n\n    // dispose all the intermediate tensors\n    const outputIds = Object.keys(results).map(key => results[key].id);\n    const inputIdArray =\n        Object.keys(inputs).map(key => inputs[key].map(input => input.id));\n    const inputIds = [].concat.apply([], inputIdArray);\n    Object.keys(tensors).forEach(key => {\n      const tensorArray = tensors[key];\n      tensorArray.forEach(tensor => {\n        if (tensor && outputIds.indexOf(tensor.id) === -1 &&\n            inputIds.indexOf(tensor.id) === -1 &&\n            this.weightIds.indexOf(tensor.id) === -1) {\n          tensor.dispose();\n        }\n      });\n    });\n    return results;\n  }\n\n  /**\n   * When there are control flow nodes in the graph, the graph execution use\n   * ExecutionContext to keep track of the frames and loop iterators.\n   * @param inputs placeholder tensors for the graph.\n   * @param context the execution context object for current execution.\n   */\n  private async executeWithControlFlow(\n      inputs: NamedTensorsMap, context: ExecutionContext,\n      outputNames: string[]): Promise<NamedTensorsMap> {\n    const names = Object.keys(inputs);\n    const inputNodes = names.map(name => this.graph.nodes[name]);\n    const stack: NodeWithContexts[] =\n        [...inputNodes, ...this.graph.weights].map(node => {\n          return {node, contexts: context.currentContext};\n        });\n    const tensorMap = {...this.weightMap, ...inputs};\n    const intermediateTensorConsumerCount: {[key: number]: number} = {};\n    const tensorsToKeep = this.getFrozenTensorIds(tensorMap);\n    const added: {[key: string]: boolean} = {};\n    while (stack.length > 0) {\n      const promises = this.processStack(\n          inputNodes, stack, context, tensorMap, added, tensorsToKeep,\n          outputNames, intermediateTensorConsumerCount);\n      await Promise.all(promises);\n    }\n\n    return tensorMap;\n  }\n\n  private processStack(\n      inputNodes: Node[], stack: NodeWithContexts[], context: ExecutionContext,\n      tensorMap: NamedTensorsMap, added: {[key: string]: boolean},\n      tensorsToKeep: Set<number>, outputNames: string[],\n      intermediateTensorConsumerCount: {[key: number]: number}) {\n    const promises: Array<Promise<Tensor[]>> = [];\n    while (stack.length > 0) {\n      const item = stack.pop();\n      context.currentContext = item.contexts;\n      let nodeName = '';\n      // The tensor of the Enter op with isConstant set should be set\n      // in the parent scope, so it will be available as constant for the\n      // whole loop.\n      if (item.node.op === 'enter' &&\n          getParamValue('isConstant', item.node, tensorMap, context)) {\n        [nodeName] = getNodeNameAndIndex(item.node.name, context);\n      }\n\n      // only process nodes that are not provided as input nodes.\n      if (inputNodes.indexOf(item.node) === -1) {\n        const tensors = executeOp(item.node, tensorMap, context);\n        if (!nodeName) {\n          [nodeName] = getNodeNameAndIndex(item.node.name, context);\n        }\n\n        const currentContext = context.currentContext;\n        if (tensors instanceof Promise) {\n          promises.push(tensors.then(t => {\n            tensorMap[nodeName] = t;\n            context.currentContext = currentContext;\n            this.checkTensorForDisposal(\n                nodeName, item.node, tensorMap, context, tensorsToKeep,\n                outputNames, intermediateTensorConsumerCount);\n            this.processChildNodes(item.node, stack, context, tensorMap, added);\n            return t;\n          }));\n        } else {\n          tensorMap[nodeName] = tensors;\n          this.checkTensorForDisposal(\n              nodeName, item.node, tensorMap, context, tensorsToKeep,\n              outputNames, intermediateTensorConsumerCount);\n          this.processChildNodes(item.node, stack, context, tensorMap, added);\n        }\n      } else {\n        this.processChildNodes(item.node, stack, context, tensorMap, added);\n      }\n    }\n    return promises;\n  }\n\n  private processChildNodes(\n      node: Node, stack: NodeWithContexts[], context: ExecutionContext,\n      tensorMap: NamedTensorsMap, added: {[key: string]: boolean}) {\n    node.children.forEach((childNode) => {\n      const [nodeName, ] = getNodeNameAndIndex(childNode.name, context);\n      if (!added[nodeName]) {\n        // Merge op can be pushed if any of its inputs has value.\n        if (childNode.op === 'merge') {\n          if (childNode.inputNames.some(name => {\n                return !!getTensor(name, tensorMap, context);\n              })) {\n            added[nodeName] = true;\n            stack.push({contexts: context.currentContext, node: childNode});\n          }\n        } else  // Otherwise all inputs must to have value.\n            if (childNode.inputNames.every(name => {\n                  return !!getTensor(name, tensorMap, context);\n                })) {\n          added[nodeName] = true;\n          stack.push({contexts: context.currentContext, node: childNode});\n        }\n      }\n    });\n  }\n\n  private calculateOutputs(outputs?: string|string[]): string[] {\n    if (outputs && !(outputs instanceof Array)) {\n      outputs = [outputs];\n    }\n    return (outputs || this.graph.outputs.map(node => node.name)) as string[];\n  }\n\n  private findOutputs(\n      tensorMap: NamedTensorsMap, context: ExecutionContext,\n      outputs?: string|string[]): NamedTensorMap {\n    const requestedOutputs = this.calculateOutputs(outputs);\n    return requestedOutputs.reduce<NamedTensorMap>((map, name) => {\n      map[name] = getTensor(name, tensorMap, context);\n      return map;\n    }, {});\n  }\n  /**\n   * Releases the memory used by the weight tensors.\n   */\n  dispose() {\n    Object.keys(this.weightMap)\n        .forEach(\n            key => this.weightMap[key].forEach(tensor => tensor.dispose()));\n  }\n\n  private checkInputShapeAndType(\n      inputs: NamedTensorsMap, strictInputCheck = true) {\n    this.placeholders.forEach(node => {\n      const inputTensors = inputs[node.name];\n      // do nothing if not strict input check and input tensors is not for\n      // the placeholders.\n      if (!strictInputCheck && !inputTensors) {\n        return;\n      }\n\n      const input = inputTensors[0];\n      if (node.params['shape'] && node.params['shape'].value) {\n        const shape = node.params['shape'].value as number[];\n        const match = shape.length === input.shape.length &&\n            input.shape.every(\n                (dim, index) => shape[index] === -1 || shape[index] === dim);\n        util.assert(\n            match,\n            `The shape of dict['${\n                node.name}'] provided in model.execute(dict) must be [${\n                shape}], but was [${input.shape}]`);\n      }\n      if (node.params['dtype'] && node.params['dtype'].value) {\n        util.assert(\n            input.dtype === node.params['dtype'].value as string,\n            `The dtype of dict['${\n                node.name}'] provided in model.execute(dict) must be ${\n                node.params['dtype'].value}, but was ${input.dtype}`);\n      }\n    });\n  }\n\n  private checkInput(inputs: NamedTensorsMap, strictInputCheck = true) {\n    const inputKeys = Object.keys(inputs);\n    const missing: string[] = [];\n    const extra: string[] = [];\n\n    this.inputNodes.forEach(name => {\n      if (inputKeys.indexOf(name) === -1) missing.push(name);\n    });\n\n    inputKeys.forEach(name => {\n      if (this.inputNodes.indexOf(name) === -1) extra.push(name);\n    });\n\n    const notInGraph = extra.filter(name => !this.graph.nodes[name]);\n\n    if (missing.length > 0 && strictInputCheck) {\n      throw new Error(\n          `The dict provided in model.execute(dict) has the keys ` +\n          `[${inputKeys}], but is missing the required keys: [${missing}].`);\n    }\n\n    if (extra.length > 0 && strictInputCheck) {\n      throw new Error(\n          `The dict provided in model.execute(dict) has ` +\n          `unused keys: [${extra}]. Please provide only the following keys: ` +\n          `[${this.inputNodes}].`);\n    }\n\n    if (notInGraph.length > 0) {\n      throw new Error(\n          `The dict provided in model.execute(dict) has ` +\n          `keys: [${notInGraph}] not part of model graph.`);\n    }\n  }\n\n  private checkOutput(compiledNodes: Node[], outputs: string[]) {\n    const compiledNodeNames = compiledNodes.map(node => node.name);\n    const extra: string[] = [];\n    outputs.forEach(name => {\n      const [nodeName] = parseNodeName(name);\n      if (compiledNodeNames.indexOf(nodeName) === -1) extra.push(nodeName);\n    });\n\n    if (extra.length > 0) {\n      throw new Error(\n          `The following outputs are not generated by the execution: ` +\n          `[${extra}].`);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {tensorflow} from '../data/compiled_api';\nimport {NamedTensorsMap, TensorInfo} from '../data/types';\nimport {OperationMapper} from '../operations/operation_mapper';\n\nimport {GraphExecutor} from './graph_executor';\n\nexport const TFHUB_SEARCH_PARAM = '?tfjs-format=file';\nexport const DEFAULT_MODEL_NAME = 'tensorflowjs_model.pb';\nexport const DEFAULT_MANIFEST_NAME = 'weights_manifest.json';\n/**\n * A `tf.FrozenModel` is a directed, acyclic graph of built from\n * SavedModel GraphDef and allows inference exeuction.\n */\n\n/** @doc {heading: 'Models', subheading: 'Classes'} */\nexport class FrozenModel implements tfc.InferenceModel {\n  private executor: GraphExecutor;\n  private version = 'n/a';\n  private handler: tfc.io.IOHandler;\n  // Returns the version information for the tensorflow model GraphDef.\n  get modelVersion(): string {\n    return this.version;\n  }\n\n  get inputNodes(): string[] {\n    return this.executor.inputNodes;\n  }\n\n  get outputNodes(): string[] {\n    return this.executor.outputNodes;\n  }\n\n  get inputs(): TensorInfo[] {\n    return this.executor.inputs;\n  }\n\n  get outputs(): TensorInfo[] {\n    return this.executor.outputs;\n  }\n\n  get weights(): NamedTensorsMap {\n    return this.executor.weightMap;\n  }\n\n  /**\n   * @param modelUrl url for the model file generated by scripts/convert.py\n   * script.\n   * @param weightManifestUrl url for the weight file generated by\n   * scripts/convert.py script.\n   * @param requestOption options for Request, which allows to send credentials\n   * and custom headers.\n   * @param onProgress Optional, progress callback function, fired periodically\n   * before the load is completed.\n   */\n  constructor(\n      private modelUrl: string, private weightManifestUrl: string,\n      private requestOption?: RequestInit, private weightPrefix?: string,\n      private onProgress?: Function) {}\n\n  private findIOHandler() {\n    const path = [this.modelUrl, this.weightManifestUrl];\n    if (this.requestOption || this.weightPrefix) {\n      this.handler = tfc.io.browserHTTPRequest(\n          path, this.requestOption, this.weightPrefix, null, this.onProgress);\n    } else {\n      const handlers = tfc.io.getLoadHandlers(path, this.onProgress);\n      if (handlers.length === 0) {\n        // For backward compatibility: if no load handler can be found,\n        // assume it is a relative http path.\n        handlers.push(tfc.io.browserHTTPRequest(\n            path, this.requestOption, this.weightPrefix, null,\n            this.onProgress));\n      } else if (handlers.length > 1) {\n        throw new Error(\n            `Found more than one (${handlers.length}) load handlers for ` +\n            `URL '${[path]}'`);\n      }\n      this.handler = handlers[0];\n    }\n  }\n\n  /**\n   * Loads the model and weight files, construct the in memory weight map and\n   * compile the inference graph.\n   */\n  async load(): Promise<boolean> {\n    this.findIOHandler();\n    if (this.handler.load == null) {\n      throw new Error(\n          'Cannot proceed with model loading because the IOHandler provided ' +\n          'does not have the `load` method implemented.');\n    }\n    const artifacts = await this.handler.load();\n    const graph = tensorflow.GraphDef.decode(\n        new Uint8Array(artifacts.modelTopology as ArrayBuffer));\n\n    this.version = `${graph.versions.producer}.${graph.versions.minConsumer}`;\n    const weightMap =\n        tfc.io.decodeWeights(artifacts.weightData, artifacts.weightSpecs);\n    this.executor =\n        new GraphExecutor(OperationMapper.Instance.transformGraph(graph));\n    this.executor.weightMap = this.convertTensorMapToTensorsMap(weightMap);\n    return true;\n  }\n\n  /**\n   * Execute the inference for the input tensors.\n   *\n   * @param input The input tensors, when there is single input for the model,\n   * inputs param should be a `tf.Tensor`. For models with mutliple inputs,\n   * inputs params should be in either `tf.Tensor`[] if the input order is\n   * fixed, or otherwise NamedTensorMap format.\n   *\n   * For model with multiple inputs, we recommend you use NamedTensorMap as the\n   * input type, if you use `tf.Tensor`[], the order of the array needs to\n   * follow the\n   * order of inputNodes array. @see {@link FrozenModel.inputNodes}\n   *\n   * You can also feed any intermediate nodes using the NamedTensorMap as the\n   * input type. For example, given the graph\n   *    InputNode => Intermediate => OutputNode,\n   * you can execute the subgraph Intermediate => OutputNode by calling\n   *    frozenModel.execute('IntermediateNode' : tf.tensor(...));\n   *\n   * This is useful for models that uses tf.dynamic_rnn, where the intermediate\n   * state needs to be fed manually.\n   *\n   * For batch inference execution, the tensors for each input need to be\n   * concatenated together. For example with mobilenet, the required input shape\n   * is [1, 244, 244, 3], which represents the [batch, height, width, channel].\n   * If we are provide a batched data of 100 images, the input tensor should be\n   * in the shape of [100, 244, 244, 3].\n   *\n   * @param config Prediction configuration for specifying the batch size and\n   * output node names. Currently the batch size option is ignored for frozen\n   * model.\n   *\n   * @returns Inference result tensors. The output would be single `tf.Tensor`\n   * if model has single output node, otherwise Tensor[] or NamedTensorMap[]\n   * will be returned for model with multiple outputs.\n   */\n  predict(\n      inputs: tfc.Tensor|tfc.Tensor[]|tfc.NamedTensorMap,\n      config?: tfc.ModelPredictConfig): tfc.Tensor\n      |tfc.Tensor[]|tfc.NamedTensorMap {\n    return this.execute_(inputs, true, this.outputNodes);\n  }\n\n  private constructTensorMap(inputs: tfc.Tensor|tfc.Tensor[]) {\n    const inputArray = inputs instanceof tfc.Tensor ? [inputs] : inputs;\n    if (inputArray.length !== this.inputNodes.length) {\n      throw new Error(\n          'Input tensor count mismatch,' +\n          `the frozen model has ${this.inputNodes.length} placeholders, ` +\n          `while there are ${inputArray.length} input tensors.`);\n    }\n    return this.inputNodes.reduce((map, inputName, i) => {\n      map[inputName] = inputArray[i];\n      return map;\n    }, {} as tfc.NamedTensorMap);\n  }\n  /**\n   * Executes infrerence for the model for given input tensors.\n   * @param inputs tensor, tensor array or tensor map of the inputs for the\n   * model, keyed by the input node names.\n   * @param outputs output node name from the Tensorflow model, if no\n   * outputs are specified, the default outputs of the model would be used.\n   * You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   *\n   * @returns A single tensor if provided with a single output or no outputs\n   * are provided and there is only one default output, otherwise return a\n   * tensor array. The order of the tensor array is the same as the outputs\n   * if provided, otherwise the order of outputNodes attribute of the model.\n   */\n  execute(\n      inputs: tfc.Tensor|tfc.Tensor[]|tfc.NamedTensorMap,\n      outputs?: string|string[]): tfc.Tensor|tfc.Tensor[] {\n    return this.execute_(inputs, false, outputs);\n  }\n\n  private execute_(\n      inputs: tfc.Tensor|tfc.Tensor[]|tfc.NamedTensorMap,\n      strictInputCheck = true, outputs?: string|string[]): tfc.Tensor\n      |tfc.Tensor[] {\n    outputs = outputs || this.outputNodes;\n    if (inputs instanceof tfc.Tensor || Array.isArray(inputs)) {\n      inputs = this.constructTensorMap(inputs);\n    }\n    if (this.executor.isControlFlowModel || this.executor.isDynamicShapeModel) {\n      throw new Error(\n          'The model contains control flow or dynamic shape ops, ' +\n          'please use executeAsync method');\n    }\n    const result = this.executor.execute(\n        this.convertTensorMapToTensorsMap(inputs), strictInputCheck, outputs);\n    const keys = Object.keys(result);\n    return (Array.isArray(outputs) && outputs.length > 1) ?\n        outputs.map(node => result[node]) :\n        result[keys[0]];\n  }\n  /**\n   * Executes inference for the model for given input tensors in async\n   * fashion, use this method when your model contains control flow ops.\n   * @param inputs tensor, tensor array or tensor map of the inputs for the\n   * model, keyed by the input node names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   *\n   * @returns A Promise of single tensor if provided with a single output or\n   * no outputs are provided and there is only one default output, otherwise\n   * return a tensor map.\n   */\n  async executeAsync(\n      inputs: tfc.Tensor|tfc.Tensor[]|tfc.NamedTensorMap,\n      outputs?: string|string[]): Promise<tfc.Tensor|tfc.Tensor[]> {\n    if (!(this.executor.isControlFlowModel ||\n          this.executor.isDynamicShapeModel)) {\n      throw new Error(\n          'The model does not contain control flow or dynamic shape ops, ' +\n          'please use execute method for better performance.');\n    }\n    outputs = outputs || this.outputNodes;\n    if (inputs instanceof tfc.Tensor || Array.isArray(inputs)) {\n      inputs = this.constructTensorMap(inputs);\n    }\n\n    const result = await this.executor.executeAsync(\n        this.convertTensorMapToTensorsMap(inputs), outputs);\n    const keys = Object.keys(result);\n    return Array.isArray(outputs) && outputs.length > 1 ?\n        outputs.map(node => result[node]) :\n        result[keys[0]];\n  }\n\n  private convertTensorMapToTensorsMap(map: tfc.NamedTensorMap):\n      NamedTensorsMap {\n    return Object.keys(map).reduce((newMap: NamedTensorsMap, key) => {\n      newMap[key] = [map[key]];\n      return newMap;\n    }, {});\n  }\n  /**\n   * Releases the memory used by the weight tensors.\n   */\n  dispose() {\n    this.executor.dispose();\n  }\n}\n\nexport async function loadFrozenModel(\n    modelUrl: string, weightsManifestUrl: string, requestOption?: RequestInit,\n    onProgress?: Function): Promise<FrozenModel> {\n  const model = new FrozenModel(\n      modelUrl, weightsManifestUrl, requestOption, null, onProgress);\n  await model.load();\n  return model;\n}\n\n/**\n * Load the frozen model hosted by TF-Hub.\n *\n * Example of loading the MobileNetV2 model and making a prediction with a zero\n * input.\n *\n * ```js\n * const TFHUB_MOBILENET =\n *   'https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/classification/2';\n * const model = await tf.loadTfHubModule(TFHUB_MOBILENET);\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n *\n * @param tfhubModelUrl url for the model hosted by TF-Hub, i.e.\n * 'https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/classification/2'.\n * @param requestOption options for Request, which allows to send credentials\n * and custom headers.\n * @param onProgress Optional, progress callback function, fired periodically\n * before the load is completed.\n */\n/** @doc {heading: 'Models', subheading: 'Loading'} */\nexport async function loadTfHubModule(\n    tfhubModuleUrl: string, requestOption?: RequestInit,\n    onProgress?: Function): Promise<FrozenModel> {\n  if (!tfhubModuleUrl.endsWith('/')) {\n    tfhubModuleUrl = tfhubModuleUrl + '/';\n  }\n  return loadFrozenModel(\n      `${tfhubModuleUrl}${DEFAULT_MODEL_NAME}${TFHUB_SEARCH_PARAM}`,\n      `${tfhubModuleUrl}${DEFAULT_MANIFEST_NAME}${TFHUB_SEARCH_PARAM}`,\n      requestOption, onProgress);\n}\n","/** Namespace tensorflow_json. */\nexport namespace tensorflow_json {\n  /** Properties of an Any. */\n  export interface IAny {\n    /** Any typeUrl */\n    typeUrl?: (string|null);\n\n    /** Any value */\n    value?: (Uint8Array|null);\n  }\n\n  /** DataType enum. */\n  export enum DataType {\n    DT_INVALID = 0,\n    DT_FLOAT = 1,\n    DT_DOUBLE = 2,\n    DT_INT32 = 3,\n    DT_UINT8 = 4,\n    DT_INT16 = 5,\n    DT_INT8 = 6,\n    DT_STRING = 7,\n    DT_COMPLEX64 = 8,\n    DT_INT64 = 9,\n    DT_BOOL = 10,\n    DT_QINT8 = 11,\n    DT_QUINT8 = 12,\n    DT_QINT32 = 13,\n    DT_BFLOAT16 = 14,\n    DT_FLOAT_REF = 101,\n    DT_DOUBLE_REF = 102,\n    DT_INT32_REF = 103,\n    DT_UINT8_REF = 104,\n    DT_INT16_REF = 105,\n    DT_INT8_REF = 106,\n    DT_STRING_REF = 107,\n    DT_COMPLEX64_REF = 108,\n    DT_INT64_REF = 109,\n    DT_BOOL_REF = 110,\n    DT_QINT8_REF = 111,\n    DT_QUINT8_REF = 112,\n    DT_QINT32_REF = 113,\n    DT_BFLOAT16_REF = 114\n  }\n\n  /** Properties of a TensorShape. */\n  export interface ITensorShape {\n    /** TensorShape dim */\n    dim?: (tensorflow_json.TensorShape.IDim[]|null);\n\n    /** TensorShape unknownRank */\n    unknownRank?: (boolean|null);\n  }\n\n  export namespace TensorShape {\n    /** Properties of a Dim. */\n    export interface IDim {\n      /** Dim size */\n      size?: (number|string|null);\n\n      /** Dim name */\n      name?: (string|null);\n    }\n  }\n\n  /** Properties of a Tensor. */\n  export interface ITensor {\n    /** Tensor dtype */\n    dtype?: (tensorflow_json.DataType|null);\n\n    /** Tensor tensorShape */\n    tensorShape?: (tensorflow_json.ITensorShape|null);\n\n    /** Tensor versionNumber */\n    versionNumber?: (number|null);\n\n    /** Tensor tensorContent */\n    tensorContent?: (Uint8Array|null);\n\n    /** Tensor floatVal */\n    floatVal?: (number[]|null);\n\n    /** Tensor doubleVal */\n    doubleVal?: (number[]|null);\n\n    /** Tensor intVal */\n    intVal?: (number[]|null);\n\n    /** Tensor stringVal */\n    stringVal?: (Uint8Array[]|null);\n\n    /** Tensor scomplexVal */\n    scomplexVal?: (number[]|null);\n\n    /** Tensor int64Val */\n    int64Val?: ((number | string)[]|null);\n\n    /** Tensor boolVal */\n    boolVal?: (boolean[]|null);\n\n    /** Tensor uint32Val */\n    uint32Val?: (number[]|null);\n\n    /** Tensor uint64Val */\n    uint64Val?: ((number | string)[]|null);\n  }\n\n  /** Properties of an AttrValue. */\n  export interface IAttrValue {\n    /** AttrValue list */\n    list?: (tensorflow_json.AttrValue.IListValue|null);\n\n    /** AttrValue s */\n    s?: (string|null);\n\n    /** AttrValue i */\n    i?: (number|string|null);\n\n    /** AttrValue f */\n    f?: (number|null);\n\n    /** AttrValue b */\n    b?: (boolean|null);\n\n    /** AttrValue type */\n    type?: (tensorflow_json.DataType|null);\n\n    /** AttrValue shape */\n    shape?: (tensorflow_json.ITensorShape|null);\n\n    /** AttrValue tensor */\n    tensor?: (tensorflow_json.ITensor|null);\n\n    /** AttrValue placeholder */\n    placeholder?: (string|null);\n\n    /** AttrValue func */\n    func?: (tensorflow_json.INameAttrList|null);\n  }\n\n  export namespace AttrValue {\n    /** Properties of a ListValue. */\n    export interface IListValue {\n      /** ListValue s */\n      s?: (string[]|null);\n\n      /** ListValue i */\n      i?: ((number | string)[]|null);\n\n      /** ListValue f */\n      f?: (number[]|null);\n\n      /** ListValue b */\n      b?: (boolean[]|null);\n\n      /** ListValue type */\n      type?: (tensorflow_json.DataType[]|null);\n\n      /** ListValue shape */\n      shape?: (tensorflow_json.ITensorShape[]|null);\n\n      /** ListValue tensor */\n      tensor?: (tensorflow_json.ITensor[]|null);\n\n      /** ListValue func */\n      func?: (tensorflow_json.INameAttrList[]|null);\n    }\n  }\n\n  /** Properties of a NameAttrList. */\n  export interface INameAttrList {\n    /** NameAttrList name */\n    name?: (string|null);\n\n    /** NameAttrList attr */\n    attr?: ({[k: string]: tensorflow_json.IAttrValue}|null);\n  }\n\n  /** Properties of a NodeDef. */\n  export interface INodeDef {\n    /** NodeDef name */\n    name?: (string|null);\n\n    /** NodeDef op */\n    op?: (string|null);\n\n    /** NodeDef input */\n    input?: (string[]|null);\n\n    /** NodeDef device */\n    device?: (string|null);\n\n    /** NodeDef attr */\n    attr?: ({[k: string]: tensorflow_json.IAttrValue}|null);\n  }\n\n  /** Properties of a VersionDef. */\n  export interface IVersionDef {\n    /** VersionDef producer */\n    producer?: (number|null);\n\n    /** VersionDef minConsumer */\n    minConsumer?: (number|null);\n\n    /** VersionDef badConsumers */\n    badConsumers?: (number[]|null);\n  }\n\n  /** Properties of a GraphDef. */\n  export interface IGraphDef {\n    /** GraphDef node */\n    node?: (tensorflow_json.INodeDef[]|null);\n\n    /** GraphDef versions */\n    versions?: (tensorflow_json.IVersionDef|null);\n\n    /** GraphDef library */\n    library?: (tensorflow_json.IFunctionDefLibrary|null);\n  }\n\n  /** Properties of a CollectionDef. */\n  export interface ICollectionDef {\n    /** CollectionDef nodeList */\n    nodeList?: (tensorflow_json.CollectionDef.INodeList|null);\n\n    /** CollectionDef bytesList */\n    bytesList?: (tensorflow_json.CollectionDef.IBytesList|null);\n\n    /** CollectionDef int64List */\n    int64List?: (tensorflow_json.CollectionDef.IInt64List|null);\n\n    /** CollectionDef floatList */\n    floatList?: (tensorflow_json.CollectionDef.IFloatList|null);\n\n    /** CollectionDef anyList */\n    anyList?: (tensorflow_json.CollectionDef.IAnyList|null);\n  }\n\n  export namespace CollectionDef {\n    /** Properties of a NodeList. */\n    export interface INodeList {\n      /** NodeList value */\n      value?: (string[]|null);\n    }\n\n    /** Properties of a BytesList. */\n    export interface IBytesList {\n      /** BytesList value */\n      value?: (Uint8Array[]|null);\n    }\n\n    /** Properties of an Int64List. */\n    export interface IInt64List {\n      /** Int64List value */\n      value?: ((number | string)[]|null);\n    }\n\n    /** Properties of a FloatList. */\n    export interface IFloatList {\n      /** FloatList value */\n      value?: (number[]|null);\n    }\n\n    /** Properties of an AnyList. */\n    export interface IAnyList {\n      /** AnyList value */\n      value?: (tensorflow_json.IAny[]|null);\n    }\n  }\n\n  /** Properties of a SaverDef. */\n  export interface ISaverDef {\n    /** SaverDef filenameTensorName */\n    filenameTensorName?: (string|null);\n\n    /** SaverDef saveTensorName */\n    saveTensorName?: (string|null);\n\n    /** SaverDef restoreOpName */\n    restoreOpName?: (string|null);\n\n    /** SaverDef maxToKeep */\n    maxToKeep?: (number|null);\n\n    /** SaverDef sharded */\n    sharded?: (boolean|null);\n\n    /** SaverDef keepCheckpointEveryNHours */\n    keepCheckpointEveryNHours?: (number|null);\n\n    /** SaverDef version */\n    version?: (tensorflow_json.SaverDef.CheckpointFormatVersion|null);\n  }\n\n  export namespace SaverDef {\n    /** CheckpointFormatVersion enum. */\n    export enum CheckpointFormatVersion {LEGACY = 0, V1 = 1, V2 = 2}\n  }\n\n  /** Properties of a TensorInfo. */\n  export interface ITensorInfo {\n    /** TensorInfo name */\n    name?: (string|null);\n\n    /** TensorInfo cooSparse */\n    cooSparse?: (tensorflow_json.TensorInfo.ICooSparse|null);\n\n    /** TensorInfo dtype */\n    dtype?: (tensorflow_json.DataType|null);\n\n    /** TensorInfo tensorShape */\n    tensorShape?: (tensorflow_json.ITensorShape|null);\n  }\n\n  export namespace TensorInfo {\n    /** Properties of a CooSparse. */\n    export interface ICooSparse {\n      /** CooSparse valuesTensorName */\n      valuesTensorName?: (string|null);\n\n      /** CooSparse indicesTensorName */\n      indicesTensorName?: (string|null);\n\n      /** CooSparse denseShapeTensorName */\n      denseShapeTensorName?: (string|null);\n    }\n  }\n\n  /** Properties of a SignatureDef. */\n  export interface ISignatureDef {\n    /** SignatureDef inputs */\n    inputs?: ({[k: string]: tensorflow_json.ITensorInfo}|null);\n\n    /** SignatureDef outputs */\n    outputs?: ({[k: string]: tensorflow_json.ITensorInfo}|null);\n\n    /** SignatureDef methodName */\n    methodName?: (string|null);\n  }\n\n  /** Properties of an AssetFileDef. */\n  export interface IAssetFileDef {\n    /** AssetFileDef tensorInfo */\n    tensorInfo?: (tensorflow_json.ITensorInfo|null);\n\n    /** AssetFileDef filename */\n    filename?: (string|null);\n  }\n\n  /** Properties of an OpDef. */\n  export interface IOpDef {\n    /** OpDef name */\n    name?: (string|null);\n\n    /** OpDef inputArg */\n    inputArg?: (tensorflow_json.OpDef.IArgDef[]|null);\n\n    /** OpDef outputArg */\n    outputArg?: (tensorflow_json.OpDef.IArgDef[]|null);\n\n    /** OpDef attr */\n    attr?: (tensorflow_json.OpDef.IAttrDef[]|null);\n\n    /** OpDef deprecation */\n    deprecation?: (tensorflow_json.OpDef.IOpDeprecation|null);\n\n    /** OpDef summary */\n    summary?: (string|null);\n\n    /** OpDef description */\n    description?: (string|null);\n\n    /** OpDef isCommutative */\n    isCommutative?: (boolean|null);\n\n    /** OpDef isAggregate */\n    isAggregate?: (boolean|null);\n\n    /** OpDef isStateful */\n    isStateful?: (boolean|null);\n\n    /** OpDef allowsUninitializedInput */\n    allowsUninitializedInput?: (boolean|null);\n  }\n\n  export namespace OpDef {\n    /** Properties of an ArgDef. */\n    export interface IArgDef {\n      /** ArgDef name */\n      name?: (string|null);\n\n      /** ArgDef description */\n      description?: (string|null);\n\n      /** ArgDef type */\n      type?: (tensorflow_json.DataType|null);\n\n      /** ArgDef typeAttr */\n      typeAttr?: (string|null);\n\n      /** ArgDef numberAttr */\n      numberAttr?: (string|null);\n\n      /** ArgDef typeListAttr */\n      typeListAttr?: (string|null);\n\n      /** ArgDef isRef */\n      isRef?: (boolean|null);\n    }\n\n    /** Properties of an AttrDef. */\n    export interface IAttrDef {\n      /** AttrDef name */\n      name?: (string|null);\n\n      /** AttrDef type */\n      type?: (string|null);\n\n      /** AttrDef defaultValue */\n      defaultValue?: (tensorflow_json.IAttrValue|null);\n\n      /** AttrDef description */\n      description?: (string|null);\n\n      /** AttrDef hasMinimum */\n      hasMinimum?: (boolean|null);\n\n      /** AttrDef minimum */\n      minimum?: (number|string|null);\n\n      /** AttrDef allowedValues */\n      allowedValues?: (tensorflow_json.IAttrValue|null);\n    }\n\n    /** Properties of an OpDeprecation. */\n    export interface IOpDeprecation {\n      /** OpDeprecation version */\n      version?: (number|null);\n\n      /** OpDeprecation explanation */\n      explanation?: (string|null);\n    }\n  }\n\n  /** Properties of an OpList. */\n  export interface IOpList {\n    /** OpList op */\n    op?: (tensorflow_json.IOpDef[]|null);\n  }\n\n  /** Properties of a MetaGraphDef. */\n  export interface IMetaGraphDef {\n    /** MetaGraphDef metaInfoDef */\n    metaInfoDef?: (tensorflow_json.MetaGraphDef.IMetaInfoDef|null);\n\n    /** MetaGraphDef graphDef */\n    graphDef?: (tensorflow_json.IGraphDef|null);\n\n    /** MetaGraphDef saverDef */\n    saverDef?: (tensorflow_json.ISaverDef|null);\n\n    /** MetaGraphDef collectionDef */\n    collectionDef?: ({[k: string]: tensorflow_json.ICollectionDef}|null);\n\n    /** MetaGraphDef signatureDef */\n    signatureDef?: ({[k: string]: tensorflow_json.ISignatureDef}|null);\n\n    /** MetaGraphDef assetFileDef */\n    assetFileDef?: (tensorflow_json.IAssetFileDef[]|null);\n  }\n\n  export namespace MetaGraphDef {\n    /** Properties of a MetaInfoDef. */\n    export interface IMetaInfoDef {\n      /** MetaInfoDef metaGraphVersion */\n      metaGraphVersion?: (string|null);\n\n      /** MetaInfoDef strippedOpList */\n      strippedOpList?: (tensorflow_json.IOpList|null);\n\n      /** MetaInfoDef anyInfo */\n      anyInfo?: (tensorflow_json.IAny|null);\n\n      /** MetaInfoDef tags */\n      tags?: (string[]|null);\n\n      /** MetaInfoDef tensorflowVersion */\n      tensorflowVersion?: (string|null);\n\n      /** MetaInfoDef tensorflowGitVersion */\n      tensorflowGitVersion?: (string|null);\n    }\n  }\n\n  /** Properties of a SavedModel. */\n  export interface ISavedModel {\n    /** SavedModel savedModelSchemaVersion */\n    savedModelSchemaVersion?: (number|string|null);\n\n    /** SavedModel metaGraphs */\n    metaGraphs?: (tensorflow_json.IMetaGraphDef[]|null);\n  }\n\n  /** Properties of a FunctionDefLibrary. */\n  export interface IFunctionDefLibrary {\n    /** FunctionDefLibrary function */\n    'function'?: (tensorflow_json.IFunctionDef[]|null);\n\n    /** FunctionDefLibrary gradient */\n    gradient?: (tensorflow_json.IGradientDef[]|null);\n  }\n\n  /** Properties of a FunctionDef. */\n  export interface IFunctionDef {\n    /** FunctionDef signature */\n    signature?: (tensorflow_json.IOpDef|null);\n\n    /** FunctionDef attr */\n    attr?: ({[k: string]: tensorflow_json.IAttrValue}|null);\n\n    /** FunctionDef nodeDef */\n    nodeDef?: (tensorflow_json.INodeDef[]|null);\n\n    /** FunctionDef ret */\n    ret?: ({[k: string]: string}|null);\n  }\n\n  /** Properties of a GradientDef. */\n  export interface IGradientDef {\n    /** GradientDef functionName */\n    functionName?: (string|null);\n\n    /** GradientDef gradientFunc */\n    gradientFunc?: (string|null);\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType} from '@tensorflow/tfjs-core';\nimport {tensorflow_json} from '../data/compiled_api_json';\nimport {getNodeNameAndIndex} from './executors/utils';\nimport * as arithmetic from './op_list/arithmetic';\nimport * as basicMath from './op_list/basic_math';\nimport * as control from './op_list/control';\nimport * as convolution from './op_list/convolution';\nimport * as creation from './op_list/creation';\nimport * as dynamic from './op_list/dynamic';\nimport * as evaluation from './op_list/evaluation';\nimport * as graph from './op_list/graph';\nimport * as image from './op_list/image';\nimport * as logical from './op_list/logical';\nimport * as matrices from './op_list/matrices';\nimport * as normalization from './op_list/normalization';\nimport * as reduction from './op_list/reduction';\nimport * as sliceJoin from './op_list/slice_join';\nimport * as spectral from './op_list/spectral';\nimport * as transformation from './op_list/transformation';\nimport {Graph, Node, OpMapper, ParamValue} from './types';\n\nconst CONTROL_FLOW_OPS = ['Switch', 'Merge', 'Enter', 'Exit', 'NextIteration'];\nconst DYNAMIC_SHAPE_OPS =\n    ['NonMaxSuppressionV2', 'NonMaxSuppressionV3', 'Where'];\n\nexport class OperationMapper {\n  private static _instance: OperationMapper;\n\n  private opMappers: {[key: string]: OpMapper};\n\n  // Singleton instance for the mapper\n  public static get Instance() {\n    return this._instance || (this._instance = new this());\n  }\n\n  // Loads the op mapping from the JSON file.\n  private constructor() {\n    const ops = [\n      arithmetic, basicMath, control, convolution, creation, dynamic,\n      evaluation, logical, image, graph, matrices, normalization, reduction,\n      sliceJoin, spectral, transformation\n    ];\n    const mappersJson: OpMapper[] = [].concat.apply([], ops.map(op => op.json));\n\n    this.opMappers = mappersJson.reduce<{[key: string]: OpMapper}>(\n        (map, mapper: OpMapper) => {\n          map[mapper.tfOpName] = mapper;\n          return map;\n        },\n        {});\n  }\n\n  private isControlFlow(node: tensorflow_json.INodeDef) {\n    return CONTROL_FLOW_OPS.some(op => op === node.op);\n  }\n\n  private isDynamicShape(node: tensorflow_json.INodeDef) {\n    return DYNAMIC_SHAPE_OPS.some(op => op === node.op);\n  }\n  // Converts the model from Tensorflow GraphDef to local representation for\n  // Tensorflow.js API\n  transformGraph(graph: tensorflow_json.IGraphDef): Graph {\n    const tfNodes = graph.node;\n    let withControlFlow = false;\n    let withDynamicShape = false;\n    const placeholders: Node[] = [];\n    const weights: Node[] = [];\n    const nodes = tfNodes.reduce<{[key: string]: Node}>((map, node) => {\n      map[node.name] = this.mapNode(node);\n      if (this.isControlFlow(node)) withControlFlow = true;\n      if (this.isDynamicShape(node)) withDynamicShape = true;\n      if (node.op === 'Placeholder') placeholders.push(map[node.name]);\n      if (node.op === 'Const') weights.push(map[node.name]);\n      return map;\n    }, {});\n\n    const inputs: Node[] = [];\n    const outputs: Node[] = [];\n    Object.keys(nodes).forEach(key => {\n      const node = nodes[key];\n      node.inputNames.forEach(name => {\n        const [nodeName, ] = getNodeNameAndIndex(name);\n        node.inputs.push(nodes[nodeName]);\n        nodes[nodeName].children.push(node);\n      });\n      if (node.inputs.length === 0) inputs.push(node);\n    });\n\n    Object.keys(nodes).forEach(key => {\n      const node = nodes[key];\n      if (node.children.length === 0) outputs.push(node);\n    });\n\n    return {\n      nodes,\n      inputs,\n      outputs,\n      weights,\n      placeholders,\n      withControlFlow,\n      withDynamicShape\n    };\n  }\n\n  private mapNode(node: tensorflow_json.INodeDef): Node {\n    const mapper = this.opMappers[node.op];\n    if (mapper === undefined) {\n      throw new Error('Tensorflow Op is not supported: ' + node.op);\n    }\n    const newNode: Node = {\n      name: node.name,\n      op: mapper.dlOpName,\n      category: mapper.category,\n      inputNames:\n          (node.input ||\n           []).map(input => input.startsWith('^') ? input.substr(1) : input),\n      inputs: [],\n      children: [],\n      params: {}\n    };\n\n    if (!!mapper.params) {\n      newNode.params = mapper.params.reduce<{[key: string]:\n                                                 ParamValue}>((map, param) => {\n        const inputIndex = param.tfInputIndex;\n        const inputParamLength = param.tfInputParamLength;\n        const type = param.type;\n        let value = undefined;\n        if (inputIndex === undefined) {\n          switch (param.type) {\n            case 'string':\n              value = this.getStringParam(\n                  node.attr, param.tfParamName, param.defaultValue as string);\n\n              if (value === undefined && !!param.tfParamNameDeprecated) {\n                value = this.getStringParam(\n                    node.attr, param.tfParamNameDeprecated,\n                    param.defaultValue as string);\n              }\n              break;\n            case 'number':\n              value = this.getNumberParam(\n                  node.attr, param.tfParamName,\n                  (param.defaultValue || 0) as number);\n              if (value === undefined && !!param.tfParamNameDeprecated) {\n                value = this.getNumberParam(\n                    node.attr, param.tfParamNameDeprecated,\n                    param.defaultValue as number);\n              }\n              break;\n            case 'number[]':\n              value = this.getNumericArrayParam(\n                  node.attr, param.tfParamName, param.defaultValue as number[]);\n              if (value === undefined && !!param.tfParamNameDeprecated) {\n                value = this.getNumericArrayParam(\n                    node.attr, param.tfParamNameDeprecated,\n                    param.defaultValue as number[]);\n              }\n              break;\n            case 'bool':\n              value = this.getBoolParam(\n                  node.attr, param.tfParamName, param.defaultValue as boolean);\n              if (value === undefined && !!param.tfParamNameDeprecated) {\n                value = this.getBoolParam(\n                    node.attr, param.tfParamNameDeprecated,\n                    param.defaultValue as boolean);\n              }\n              break;\n            case 'shape':\n              value = this.getTensorShapeParam(\n                  node.attr, param.tfParamName, param.defaultValue as number[]);\n              if (value === undefined && !!param.tfParamNameDeprecated) {\n                value = this.getTensorShapeParam(\n                    node.attr, param.tfParamNameDeprecated,\n                    param.defaultValue as number[]);\n              }\n              break;\n            case 'dtype':\n              value = this.getDtypeParam(\n                  node.attr, param.tfParamName, param.defaultValue as DataType);\n              if (value === undefined && !!param.tfParamNameDeprecated) {\n                value = this.getDtypeParam(\n                    node.attr, param.tfParamNameDeprecated,\n                    param.defaultValue as DataType);\n              }\n              break;\n            case 'tensor':\n            case 'tensors':\n              break;\n            default:\n              throw new Error(\n                  `Unsupported param type: ${param.type} for op: ${node.op}`);\n          }\n        }\n        map[param.dlParamName] = {value, inputIndex, type, inputParamLength};\n        return map;\n      }, {});\n    }\n    return newNode;\n  }\n\n  private decodeBase64(text: string): string {\n    if (typeof atob !== 'undefined') {\n      return atob(text);\n    } else if (typeof Buffer !== 'undefined') {\n      return new Buffer(text, 'base64').toString();\n    } else {\n      throw new Error(\n          'Unable to decode base64 in this environment. ' +\n          'Missing built-in atob() or Buffer()');\n    }\n  }\n\n  private getStringParam(\n      attrs: {[key: string]: tensorflow_json.IAttrValue}, name: string,\n      def: string, keepCase = false): string {\n    const param = attrs[name];\n    if (param !== undefined) {\n      const value = Array.isArray(param.s) ?\n          String.fromCharCode.apply(null, param.s) :\n          this.decodeBase64(param.s);\n      return keepCase ? value : value.toLowerCase();\n    }\n    return def;\n  }\n\n  private getBoolParam(\n      attrs: {[key: string]: tensorflow_json.IAttrValue}, name: string,\n      def: boolean): boolean {\n    const param = attrs[name];\n    return param ? param.b : def;\n  }\n\n  private getNumberParam(\n      attrs: {[key: string]: tensorflow_json.IAttrValue}, name: string,\n      def: number): number {\n    const param = attrs[name] || {};\n    const value = param['i'] ? param['i'] : (param['f'] ? param['f'] : def);\n    return (typeof value === 'number') ?\n        value :\n        parseInt(value as string, 10) as number;\n  }\n  private getDtypeParam(\n      attrs: {[key: string]: tensorflow_json.IAttrValue}, name: string,\n      def: DataType): DataType {\n    const param = attrs[name];\n    if (param && param.type) {\n      // tslint:disable-next-line:no-any\n      let type: any = param.type;\n      if (typeof (param.type) === 'string') {\n        type = tensorflow_json.DataType[param.type];\n      }\n      switch (type) {\n        case tensorflow_json.DataType.DT_FLOAT:\n          return 'float32';\n        case tensorflow_json.DataType.DT_INT32:\n          return 'int32';\n        case tensorflow_json.DataType.DT_BOOL:\n          return 'bool';\n        default:\n          return def;\n      }\n    }\n    return def;\n  }\n  private getTensorShapeParam(\n      attrs: {[key: string]: tensorflow_json.IAttrValue}, name: string,\n      def?: number[]): number[]|undefined {\n    const param = attrs[name];\n    if (param && param.shape) {\n      if (param.shape.unknownRank) {\n        return undefined;\n      }\n      if (param.shape.dim != null) {\n        return param.shape.dim.map(\n            dim => (typeof dim.size === 'number') ?\n                dim.size :\n                parseInt(dim.size as string, 10));\n      }\n    }\n    return def;\n  }\n\n  private getNumericArrayParam(\n      attrs: {[key: string]: tensorflow_json.IAttrValue}, name: string,\n      def: number[]): number[] {\n    const param = attrs[name];\n    if (param) {\n      return ((param.list.f && param.list.f.length ? param.list.f :\n                                                     param.list.i))\n                 .map(\n                     v => (typeof v === 'number') ?\n                         v :\n                         parseInt(v as string, 10)) as number[];\n    }\n    return def;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {tensorflow_json} from '../data/compiled_api_json';\nimport {NamedTensorsMap, TensorInfo} from '../data/types';\nimport {OperationMapper} from '../operations/operation_mapper_json';\n\nimport {GraphExecutor} from './graph_executor';\n\nexport const TFHUB_SEARCH_PARAM = '?tfjs-format=file';\nexport const DEFAULT_MODEL_NAME = 'model.json';\n/**\n * A `tf.FrozenModel` is a directed, acyclic graph of built from\n * SavedModel GraphDef and allows inference exeuction.\n */\n\nexport class FrozenModel implements tfc.InferenceModel {\n  private executor: GraphExecutor;\n  private version = 'n/a';\n  private handler: tfc.io.IOHandler;\n  // Returns the version information for the tensorflow model GraphDef.\n  get modelVersion(): string {\n    return this.version;\n  }\n\n  get inputNodes(): string[] {\n    return this.executor.inputNodes;\n  }\n\n  get outputNodes(): string[] {\n    return this.executor.outputNodes;\n  }\n\n  get inputs(): TensorInfo[] {\n    return this.executor.inputs;\n  }\n\n  get outputs(): TensorInfo[] {\n    return this.executor.outputs;\n  }\n\n  get weights(): NamedTensorsMap {\n    return this.executor.weightMap;\n  }\n\n  /**\n   * @param modelUrl url for the model file generated by scripts/convert.py\n   * script.\n   * @param weightManifestUrl url for the weight file generated by\n   * scripts/convert.py script.\n   * @param requestOption options for Request, which allows to send credentials\n   * and custom headers.\n   * @param onProgress Optional, progress callback function, fired periodically\n   * before the load is completed.\n   */\n  constructor(\n      private modelUrl: string, private requestOption?: RequestInit,\n      private weightPrefix?: string, private onProgress?: Function) {}\n\n  private findIOHandler() {\n    const path = this.modelUrl;\n    if (this.requestOption || this.weightPrefix) {\n      this.handler = tfc.io.browserHTTPRequest(\n          path, this.requestOption, this.weightPrefix, null, this.onProgress);\n    } else {\n      const handlers = tfc.io.getLoadHandlers(path, this.onProgress);\n      if (handlers.length === 0) {\n        // For backward compatibility: if no load handler can be found,\n        // assume it is a relative http path.\n        handlers.push(tfc.io.browserHTTPRequest(\n            path, this.requestOption, this.weightPrefix, null,\n            this.onProgress));\n      } else if (handlers.length > 1) {\n        throw new Error(\n            `Found more than one (${handlers.length}) load handlers for ` +\n            `URL '${[path]}'`);\n      }\n      this.handler = handlers[0];\n    }\n  }\n\n  /**\n   * Loads the model and weight files, construct the in memory weight map and\n   * compile the inference graph.\n   */\n  async load(): Promise<boolean> {\n    this.findIOHandler();\n    if (this.handler.load == null) {\n      throw new Error(\n          'Cannot proceed with model loading because the IOHandler provided ' +\n          'does not have the `load` method implemented.');\n    }\n    const artifacts = await this.handler.load();\n    const graph = artifacts.modelTopology as tensorflow_json.IGraphDef;\n\n    this.version = `${graph.versions.producer}.${graph.versions.minConsumer}`;\n    const weightMap =\n        tfc.io.decodeWeights(artifacts.weightData, artifacts.weightSpecs);\n    this.executor =\n        new GraphExecutor(OperationMapper.Instance.transformGraph(graph));\n    this.executor.weightMap = this.convertTensorMapToTensorsMap(weightMap);\n    return true;\n  }\n\n  /**\n   * Execute the inference for the input tensors.\n   *\n   * @param input The input tensors, when there is single input for the model,\n   * inputs param should be a `tf.Tensor`. For models with mutliple inputs,\n   * inputs params should be in either `tf.Tensor`[] if the input order is\n   * fixed, or otherwise NamedTensorMap format.\n   *\n   * For model with multiple inputs, we recommend you use NamedTensorMap as the\n   * input type, if you use `tf.Tensor`[], the order of the array needs to\n   * follow the\n   * order of inputNodes array. @see {@link FrozenModel.inputNodes}\n   *\n   * You can also feed any intermediate nodes using the NamedTensorMap as the\n   * input type. For example, given the graph\n   *    InputNode => Intermediate => OutputNode,\n   * you can execute the subgraph Intermediate => OutputNode by calling\n   *    frozenModel.execute('IntermediateNode' : tf.tensor(...));\n   *\n   * This is useful for models that uses tf.dynamic_rnn, where the intermediate\n   * state needs to be fed manually.\n   *\n   * For batch inference execution, the tensors for each input need to be\n   * concatenated together. For example with mobilenet, the required input shape\n   * is [1, 244, 244, 3], which represents the [batch, height, width, channel].\n   * If we are provide a batched data of 100 images, the input tensor should be\n   * in the shape of [100, 244, 244, 3].\n   *\n   * @param config Prediction configuration for specifying the batch size and\n   * output node names. Currently the batch size option is ignored for frozen\n   * model.\n   *\n   * @returns Inference result tensors. The output would be single `tf.Tensor`\n   * if model has single output node, otherwise Tensor[] or NamedTensorMap[]\n   * will be returned for model with multiple outputs.\n   */\n  predict(\n      inputs: tfc.Tensor|tfc.Tensor[]|tfc.NamedTensorMap,\n      config?: tfc.ModelPredictConfig): tfc.Tensor\n      |tfc.Tensor[]|tfc.NamedTensorMap {\n    return this.execute_(inputs, true, this.outputNodes);\n  }\n\n  private constructTensorMap(inputs: tfc.Tensor|tfc.Tensor[]) {\n    const inputArray = inputs instanceof tfc.Tensor ? [inputs] : inputs;\n    if (inputArray.length !== this.inputNodes.length) {\n      throw new Error(\n          'Input tensor count mismatch,' +\n          `the frozen model has ${this.inputNodes.length} placeholders, ` +\n          `while there are ${inputArray.length} input tensors.`);\n    }\n    return this.inputNodes.reduce((map, inputName, i) => {\n      map[inputName] = inputArray[i];\n      return map;\n    }, {} as tfc.NamedTensorMap);\n  }\n  /**\n   * Executes inference for the model for given input tensors.\n   * @param inputs tensor, tensor array or tensor map of the inputs for the\n   * model, keyed by the input node names.\n   * @param outputs output node name from the Tensorflow model, if no\n   * outputs are specified, the default outputs of the model would be used.\n   * You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   *\n   * @returns A single tensor if provided with a single output or no outputs\n   * are provided and there is only one default output, otherwise return a\n   * tensor array. The order of the tensor array is the same as the outputs\n   * if provided, otherwise the order of outputNodes attribute of the model.\n   */\n  execute(\n      inputs: tfc.Tensor|tfc.Tensor[]|tfc.NamedTensorMap,\n      outputs?: string|string[]): tfc.Tensor|tfc.Tensor[] {\n    return this.execute_(inputs, false, outputs);\n  }\n\n  private execute_(\n      inputs: tfc.Tensor|tfc.Tensor[]|tfc.NamedTensorMap,\n      strictInputCheck = true, outputs?: string|string[]): tfc.Tensor\n      |tfc.Tensor[] {\n    outputs = outputs || this.outputNodes;\n    if (inputs instanceof tfc.Tensor || Array.isArray(inputs)) {\n      inputs = this.constructTensorMap(inputs);\n    }\n    if (this.executor.isControlFlowModel || this.executor.isDynamicShapeModel) {\n      throw new Error(\n          'The model contains control flow or dynamic shape ops, ' +\n          'please use executeAsync method');\n    }\n    const result = this.executor.execute(\n        this.convertTensorMapToTensorsMap(inputs), strictInputCheck, outputs);\n    const keys = Object.keys(result);\n    return (Array.isArray(outputs) && outputs.length > 1) ?\n        outputs.map(node => result[node]) :\n        result[keys[0]];\n  }\n  /**\n   * Executes inference for the model for given input tensors in async\n   * fashion, use this method when your model contains control flow ops.\n   * @param inputs tensor, tensor array or tensor map of the inputs for the\n   * model, keyed by the input node names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   *\n   * @returns A Promise of single tensor if provided with a single output or\n   * no outputs are provided and there is only one default output, otherwise\n   * return a tensor map.\n   */\n  async executeAsync(\n      inputs: tfc.Tensor|tfc.Tensor[]|tfc.NamedTensorMap,\n      outputs?: string|string[]): Promise<tfc.Tensor|tfc.Tensor[]> {\n    if (!(this.executor.isControlFlowModel ||\n          this.executor.isDynamicShapeModel)) {\n      throw new Error(\n          'The model does not contain control flow or dynamic shape ops, ' +\n          'please use execute method for better performance.');\n    }\n    outputs = outputs || this.outputNodes;\n    if (inputs instanceof tfc.Tensor || Array.isArray(inputs)) {\n      inputs = this.constructTensorMap(inputs);\n    }\n\n    const result = await this.executor.executeAsync(\n        this.convertTensorMapToTensorsMap(inputs), outputs);\n    const keys = Object.keys(result);\n    return Array.isArray(outputs) && outputs.length > 1 ?\n        outputs.map(node => result[node]) :\n        result[keys[0]];\n  }\n\n  private convertTensorMapToTensorsMap(map: tfc.NamedTensorMap):\n      NamedTensorsMap {\n    return Object.keys(map).reduce((newMap: NamedTensorsMap, key) => {\n      newMap[key] = [map[key]];\n      return newMap;\n    }, {});\n  }\n  /**\n   * Releases the memory used by the weight tensors.\n   */\n  dispose() {\n    this.executor.dispose();\n  }\n}\n\n/**\n * Load the frozen model through url.\n *\n * Example of loading the MobileNetV2 model and making a prediction with a zero\n * input.\n *\n * ```js\n * const GOOGLE_CLOUD_STORAGE_DIR =\n *     'https://storage.googleapis.com/tfjs-models/savedmodel/';\n * const MODEL_URL = 'mobilenet_v2_1.0_224/model.json';\n * const model = await tf.loadFrozenModel(GOOGLE_CLOUD_STORAGE_DIR + MODEL_URL);\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n *\n * @param modelUrl url for the model file generated by scripts/convert.py\n * script.\n * @param weightManifestUrl url for the weight file generated by\n * scripts/convert.py script.\n * @param requestOption options for Request, which allows to send credentials\n * and custom headers.\n * @param onProgress Optional, progress callback function, fired periodically\n * before the load is completed.\n */\nexport async function loadFrozenModel(\n    modelUrl: string, requestOption?: RequestInit,\n    onProgress?: Function): Promise<FrozenModel> {\n  const model = new FrozenModel(modelUrl, requestOption, null, onProgress);\n  await model.load();\n  return model;\n}\n\n/**\n * Load the frozen model hosted by TF-Hub.\n *\n * Example of loading the MobileNetV2 model and making a prediction with a zero\n * input.\n *\n * ```js\n * const TFHUB_MOBILENET =\n *   'https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/classification/2';\n * const model = await tf.loadTfHubModule(TFHUB_MOBILENET);\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n *\n * @param tfhubModelUrl url for the model hosted by TF-Hub, i.e.\n * 'https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/classification/2'.\n * @param requestOption options for Request, which allows to send credentials\n * and custom headers.\n * @param onProgress Optional, progress callback function, fired periodically\n * before the load is completed.\n */\nexport async function loadTfHubModule(\n    tfhubModuleUrl: string, requestOption?: RequestInit,\n    onProgress?: Function): Promise<FrozenModel> {\n  if (!tfhubModuleUrl.endsWith('/')) {\n    tfhubModuleUrl = tfhubModuleUrl + '/';\n  }\n  return loadFrozenModel(\n      `${tfhubModuleUrl}${DEFAULT_MODEL_NAME}${TFHUB_SEARCH_PARAM}`,\n      requestOption, onProgress);\n}\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '0.8.4';\nexport {version};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {deprecationWarn, io} from '@tensorflow/tfjs-core';\n\nimport {DEFAULT_MANIFEST_NAME, FrozenModel, loadFrozenModel as loadFrozenModelPB, loadTfHubModule} from './executor/frozen_model';\nimport {loadFrozenModel as loadFrozenModelJSON} from './executor/frozen_model_json';\n\nexport {FrozenModel, loadTfHubModule} from './executor/frozen_model';\nexport {FrozenModel as GraphModel} from './executor/frozen_model';\nexport {FrozenModel as FrozenModelJSON} from './executor/frozen_model_json';\nexport {version as version_converter} from './version';\n\n/**\n * Deprecated. Use `tf.loadGraphModel`.\n *\n * Load the frozen model through url.\n *\n * Example of loading the MobileNetV2 model and making a prediction with a zero\n * input.\n *\n * ```js\n * const GOOGLE_CLOUD_STORAGE_DIR =\n *     'https://storage.googleapis.com/tfjs-models/savedmodel/';\n * const MODEL_URL = 'mobilenet_v2_1.0_224/tensorflowjs_model.pb';\n * const WEIGHTS_URL =\n *     'mobilenet_v2_1.0_224/weights_manifest.json';\n * const model = await tf.loadFrozenModel(GOOGLE_CLOUD_STORAGE_DIR + MODEL_URL,\n *      GOOGLE_CLOUD_STORAGE_DIR + WEIGHTS_URL);\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n *\n * @param modelUrl url for the model file generated by scripts/convert.py\n *    script.\n * @param weightManifestUrl url for the weight file generated by\n *    scripts/convert.py script.\n * @param requestOption options for Request, which allows to send credentials\n *    and custom headers.\n * @param onProgress Optional, progress callback function, fired periodically\n *    before the load is completed.\n */\n/** @doc {heading: 'Models', subheading: 'Loading'} */\nexport function loadFrozenModel(\n    modelUrl: string, weightsManifestUrl?: string, requestOption?: RequestInit,\n    onProgress?: Function): Promise<FrozenModel> {\n  deprecationWarn(\n      'tf.loadFrozenModel() is going away. ' +\n      'Use tf.loadGraphModel() instead, and note the positional argument changes.');\n\n  if (modelUrl && modelUrl.endsWith('.json')) {\n    return (loadFrozenModelJSON(modelUrl, requestOption, onProgress) as\n                // tslint:disable-next-line:no-any\n                Promise<any>) as Promise<FrozenModel>;\n  }\n  // if users are using the new loadGraphModel API, the weightManifestUrl\n  // will be omitted. We will build the url using the model URL path and\n  // default manifest file name.\n  if (modelUrl != null && weightsManifestUrl == null) {\n    weightsManifestUrl = getWeightsManifestUrl(modelUrl);\n  }\n  return loadFrozenModelPB(\n      modelUrl, weightsManifestUrl, requestOption, onProgress);\n}\n\nfunction getWeightsManifestUrl(modelUrl: string): string {\n  let weightsManifestUrl: string;\n  if (modelUrl != null) {\n    const path = modelUrl.substr(0, modelUrl.lastIndexOf('/'));\n    weightsManifestUrl = path + '/' + DEFAULT_MANIFEST_NAME;\n  }\n  return weightsManifestUrl;\n}\n\n/**\n * Load a graph model given a URL to the model definition.\n *\n * Example of loading MobileNetV2 from a URL and making a prediction with a\n * zeros input:\n *\n * ```js\n * const modelUrl =\n *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/tensorflowjs_model.pb';\n * const model = await tf.loadGraphModel(modelUrl);\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n *\n * Example of loading MobileNetV2 from a TF Hub URL and making a prediction with\n * a zeros input:\n *\n * ```js\n * const modelUrl =\n *    'https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/classification/2';\n * const model = await tf.loadGraphModel(modelUrl, {fromTFHub: true});\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n * @param modelUrl url for the model file generated by scripts/convert.py\n *    script or a TF Hub url.\n * @param options options for the Request, which allows to send credentials\n *    and custom headers.\n */\n/** @doc {heading: 'Models', subheading: 'Loading'} */\nexport function loadGraphModel(\n    modelUrl: string, options: io.LoadOptions = {}): Promise<FrozenModel> {\n  if (options == null) {\n    options = {};\n  }\n\n  if (options.fromTFHub) {\n    return loadTfHubModule(modelUrl, options.requestInit, options.onProgress);\n  }\n  let weightsManifestUrl: string = undefined;\n\n  if (modelUrl && modelUrl.endsWith('.json')) {\n    return (loadFrozenModelJSON(\n                modelUrl, options.requestInit, options.onProgress) as\n                // tslint:disable-next-line:no-any\n                Promise<any>) as Promise<FrozenModel>;\n  }\n  // if users are using the new loadGraphModel API, the weightManifestUrl will\n  // be omitted. We will build the url using the model URL path and default\n  // manifest file name.\n  if (modelUrl != null && weightsManifestUrl == null) {\n    weightsManifestUrl = getWeightsManifestUrl(modelUrl);\n  }\n  return loadFrozenModelPB(\n      modelUrl, weightsManifestUrl, options.requestInit, options.onProgress);\n}\n"],"names":["asPromise","fn","ctx","params","Array","arguments","length","offset","index","pending","Promise","resolve","reject","err","apply","base64","exports","string","p","n","charAt","Math","ceil","b64","s64","i","encode","buffer","start","end","t","parts","chunk","j","b","push","String","fromCharCode","slice","join","decode","c","charCodeAt","undefined","Error","test","EventEmitter","this","_listeners","prototype","on","evt","off","listeners","splice","emit","args","factory","Float32Array","f32","f8b","Uint8Array","le","writeFloat_f32_cpy","val","buf","pos","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","isNaN","round","exponent","floor","log","LN2","pow","readFloat_ieee754","readUint","uint","mantissa","NaN","Infinity","bind","writeUintLE","writeUintBE","readUintLE","readUintBE","Float64Array","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","inquire","moduleName","mod","eval","replace","Object","keys","e","utf8","len","read","write","c1","c2","pool","alloc","size","SIZE","MAX","slab","call","LongBits","zero","toNumber","zzEncode","zzDecode","zeroHash","fromNumber","value","from","util","isString","Long","parseInt","fromString","low","high","unsigned","toLong","Boolean","fromHash","hash","toHash","mask","part0","part1","part2","merge","dst","src","ifNotSet","newError","name","CustomError","message","properties","defineProperty","get","captureStackTrace","stack","create","constructor","toString","require$$0","require$$1","require$$2","float","require$$3","require$$4","require$$5","require$$6","require$$7","global","window","self","emptyArray","freeze","emptyObject","isNode","process","versions","node","isInteger","Number","isFinite","isObject","isset","isSet","obj","prop","hasOwnProperty","isArray","Buffer","utf8Write","_Buffer_from","_Buffer_allocUnsafe","newBuffer","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","bits","fromBits","lcFirst","str","toLowerCase","substring","ProtocolError","oneOfGetter","fieldNames","fieldMap","oneOfSetter","toJSONOptions","longs","enums","bytes","json","_configure","encoding","allocUnsafe","Writer","BufferWriter","Op","next","noop","State","writer","head","tail","states","writeByte","writeVarint32","VarintOp","writeVarint64","writeFixed32","subarray","_push","uint32","int32","sint32","uint64","int64","sint64","bool","fixed32","sfixed32","fixed64","sfixed64","double","writeBytes","set","fork","reset","ldelim","finish","BufferWriter_","writeBytesBuffer","copy","writeStringBuffer","byteLength","Reader","BufferReader","indexOutOfRange","reader","writeLength","RangeError","create_array","readLongVarint","readFixed32_end","readFixed64","isBuffer","_slice","skip","skipType","wireType","BufferReader_","utf8Slice","min","Service","rpcImpl","requestDelimited","responseDelimited","TypeError","rpcCall","method","requestCtor","responseCtor","request","callback","response","setTimeout","endedByRPC","protobuf","configure","build","rpc","roots","$Reader","$protobuf","$util","$root","valuesById","values","tensorflow","Any","ks","typeUrl","r","l","m","DataType","TensorShape","dim","unknownRank","Dim","Tensor","floatVal","doubleVal","intVal","stringVal","scomplexVal","int64Val","boolVal","uint32Val","uint64Val","dtype","tensorShape","versionNumber","tensorContent","AttrValue","$oneOfFields","list","s","f","type","shape","tensor","placeholder","func","ListValue","NameAttrList","attr","k","NodeDef","input","op","device","VersionDef","badConsumers","producer","minConsumer","GraphDef","library","FunctionDefLibrary","CollectionDef","nodeList","bytesList","int64List","floatList","anyList","NodeList","BytesList","Int64List","FloatList","AnyList","SaverDef","filenameTensorName","saveTensorName","restoreOpName","maxToKeep","sharded","keepCheckpointEveryNHours","version","CheckpointFormatVersion","TensorInfo","cooSparse","CooSparse","valuesTensorName","indicesTensorName","denseShapeTensorName","SignatureDef","inputs","outputs","methodName","AssetFileDef","tensorInfo","filename","OpDef","inputArg","outputArg","deprecation","summary","description","isCommutative","isAggregate","isStateful","allowsUninitializedInput","ArgDef","AttrDef","OpDeprecation","typeAttr","numberAttr","typeListAttr","isRef","defaultValue","hasMinimum","minimum","allowedValues","explanation","OpList","MetaGraphDef","collectionDef","signatureDef","assetFileDef","metaInfoDef","graphDef","saverDef","MetaInfoDef","tags","metaGraphVersion","strippedOpList","anyInfo","tensorflowVersion","tensorflowGitVersion","SavedModel","metaGraphs","savedModelSchemaVersion","gradient","FunctionDef","GradientDef","nodeDef","ret","signature","functionName","gradientFunc","paramName","tensorMap","context","param","inputIndex","getTensor","inputNames","inputParamLength","map","data","dataSync","tensorsMap","_a","nodeName","contextId","currentContextIds","find","getNodeNameWithContextId","currentContextId","inputName","lastIndexOf","arr","res","tfOpName","dlOpName","category","tfInputIndex","dlParamName","tfParamName","notSupported","tfInputParamLength","notSupprted","unsupported","tfParamNameDeprecated","CONTROL_FLOW_OPS","DYNAMIC_SHAPE_OPS","ops","arithmetic","basicMath","control","convolution","creation","dynamic","evaluation","logical","image","graph","matrices","normalization","reduction","sliceJoin","spectral","transformation","mappersJson","concat","opMappers","reduce","mapper","OperationMapper","_instance","some","withControlFlow","withDynamicShape","placeholders","weights","nodes","_this","mapNode","isControlFlow","isDynamicShape","forEach","key","children","newNode","startsWith","substr","getStringParam","getNumberParam","getNumericArrayParam","getBoolParam","getTensorShapeParam","getDtypeParam","attrs","def","keepCase","DT_FLOAT","DT_INT32","DT_BOOL","v","executeOp","tfc.add","getParamValue","tfc.addN","tfc.mod","tfc.mul","tfc.div","tfc.floorDiv","tfc.sub","tfc.minimum","tfc.maximum","tfc.pow","tfc.squaredDifference","tfc.abs","tfc.acos","tfc.acosh","tfc.asin","tfc.asinh","tfc.atan","tfc.atan2","tfc.atanh","tfc.ceil","tfc.cos","tfc.cosh","tfc.elu","tfc.erf","tfc.exp","tfc.expm1","tfc.floor","tfc.log","tfc.log1p","tfc.neg","tfc.reciprocal","tfc.relu","tfc.round","tfc.selu","tfc.sigmoid","tfc.sin","tfc.sign","tfc.sinh","tfc.softplus","tfc.sqrt","tfc.square","tfc.tanh","tfc.tan","tfc.clipByValue","tfc.scalar","tfc.prod","tfc.leakyRelu","maxSize","elementShape","identicalElementShapes","dynamicSize","clearAfterRead","id","TensorArray","nextId","closed_","tensors","dispose","tensorWithState","cleared","indices","assertShapesMatch","written","readMany","maxIndex","max","writeMany","unstack","totalLength","cumulativeLengths","elementPerRow","tidy","reshape","indices_1","sizes","shapeA","shapeB","errorMessagePrefix","assert","arraysEqual","n1","n2","clone","pred","data_1","_b","frameId","enterFrame","exitFrame","nextIteration","name_1","tensorArray","addTensorArray","scalar","writeTensor","getTensorArray","readId","readIndex","gatherId","gatherIndices","gatherDtype","gather","scatterId","scatterIndices","scatterTensor","scatter","concatId","concatTensorArray","concatDtype","splitId","splitTensor","lengths","split","sizeId","sizeTensorArray","closeId","clearAndClose","stride","pad","dataFormat","toUpperCase","dilation","tfc.conv1d","dilations","tfc.conv2d","tfc.conv2dTranspose","tfc.depthwiseConv2d","kernelSize","tfc.avgPool","tfc.maxPool","tfc.fill","stop_1","num","tfc.linspace","depth","onValue","offValue","tfc.oneHot","tfc.ones","tfc.onesLike","tfc.randomUniform","stop_2","step","tfc.range","mean","stdDev","seed","tfc.truncatedNormal","tfc.zeros","tfc.zerosLike","boxes","scores","maxOutputSize","iouThreshold","scoreThreshold","tfc.image","nonMaxSuppressionAsync","tfc.whereAsync","tfc.setdiff1dAsync","x","sorted","result","tfc.topk","tfc.tensor1d","rank","summarize","console","warn","images","alignCorners","resizeBilinear","resizeNearestNeighbor","boxInd","cropSize","extrapolationValue","cropAndResize","tfc.equal","tfc.notEqual","tfc.greater","tfc.greaterEqual","tfc.less","tfc.lessEqual","tfc.logicalAnd","tfc.logicalNot","tfc.logicalOr","tfc.where","tfc.matMul","tfc.transpose","tfc.batchNorm","tfc.localResponseNormalization","tfc.softmax","tfc.logSoftmax","tfc.sparseToDense","axis","keepDims","tfc.max","tfc.mean","tfc.min","tfc.sum","tfc.all","tfc.any","tfc.argMax","tfc.argMin","tfc.concat","tfc.gather","tfc.reverse","begin","tfc.slice","strides","beginMask","endMask","ellipsisMask","newAxisMask","shrinkAxisMask","tfc.stridedSlice","tfc.tidy","squeezedShape","squeeze","mapped","sameShape","tfc.util","tfc.stack","tfc.unstack","reps","tfc.tile","numOrSizeSplits","tfc.split","tfc.scatterND","tfc.gatherND","sparseValues","tfc.fft","tfc.ifft","tfc.rfft","tfc.irfft","tfc.cast","tfc.expandDims","tfc.squeeze","tfc.reshape","tfc.pad","blockShape","paddings","tfc.spaceToBatchND","crops","tfc.batchToSpaceND","blockSize","tfc.depthToSpace","arithmetic.executeOp","basicMath.executeOp","control.executeOp","convolution.executeOp","creation.executeOp","dynamic.executeOp","evaluation.executeOp","image.executeOp","graph.executeOp","logical.executeOp","matrices.executeOp","normalization.executeOp","reduction.executeOp","sliceJoin.executeOp","spectral.executeOp","transformation.executeOp","weightMap","tensorArrayMap","frameName","iterationId","rootContext","generateCurrentContextIds","ExecutionContext","contexts","_currentContextIds","names","contextIdforContexts","lastId","newFrame","unshift","shift","assign","Map","_outputs","compile","GraphExecutor","_weightMap","weightIds","startNodes","compiledOrder","nameKey","sort","SEPERATOR","compiledMap","visited","pop","childNode","every","strictInputCheck","checkInput","checkInputShapeAndType","outputNames","calculateOutputs","checkOutput","tensorsToKeep","getFrozenTensorIds","intermediateTensorConsumerCount","compiledNodes","checkTensorForDisposal","findOutputs","ids","Set","indexOf","getTensorsForCurrentContenxt","has","count","executeWithControlFlow","results","outputIds","inputIdArray","inputIds","inputNodes","currentContext","added","promises","processStack","all","item","currentContext_1","then","processChildNodes","this_1","inputTensors","shape_1","match","inputKeys","missing","extra","notInGraph","filter","compiledNodeNames","TFHUB_SEARCH_PARAM","DEFAULT_MODEL_NAME","DEFAULT_MANIFEST_NAME","modelUrl","weightManifestUrl","requestOption","weightPrefix","onProgress","FrozenModel","executor","outputNodes","path","handler","tfc.io","browserHTTPRequest","handlers","getLoadHandlers","findIOHandler","load","artifacts","modelTopology","decodeWeights","weightData","weightSpecs","Instance","transformGraph","convertTensorMapToTensorsMap","config","execute_","inputArray","tfc.Tensor","constructTensorMap","isControlFlowModel","isDynamicShapeModel","execute","executeAsync","newMap","tensorflow_json","weightsManifestUrl","model","tfhubModuleUrl","endsWith","loadFrozenModel","text","atob","decodeBase64","deprecationWarn","loadFrozenModelJSON","getWeightsManifestUrl","loadFrozenModelPB","options","fromTFHub","loadTfHubModule","requestInit"],"mappings":";;;;;;;;;;;;;;;;s5DACA,cAAiBA,UAmBjB,SAASA,UAAUC,EAAIC,GAKnB,IAJA,IAAIC,EAAU,IAAIC,MAAMC,UAAUC,OAAS,GACvCC,EAAU,EACVC,EAAU,EACVC,GAAU,EACPD,EAAQH,UAAUC,QACrBH,EAAOI,KAAYF,UAAUG,KACjC,OAAO,IAAIE,QAAQ,SAAkBC,EAASC,GAC1CT,EAAOI,GAAU,SAAkBM,GAC/B,GAAIJ,EAEA,GADAA,GAAU,EACNI,EACAD,EAAOC,OACN,CAGD,IAFA,IAAIV,EAAS,IAAIC,MAAMC,UAAUC,OAAS,GACtCC,EAAS,EACNA,EAASJ,EAAOG,QACnBH,EAAOI,KAAYF,UAAUE,GACjCI,EAAQG,MAAM,KAAMX,KAIhC,IACIF,EAAGa,MAAMZ,GAAO,KAAMC,GACxB,MAAOU,GACDJ,IACAA,GAAU,EACVG,EAAOC,uDCxCvB,IAAIE,EAASC,EAObD,EAAOT,OAAS,SAAgBW,GAC5B,IAAIC,EAAID,EAAOX,OACf,IAAKY,EACD,OAAO,EAEX,IADA,IAAIC,EAAI,IACCD,EAAI,EAAI,GAA0B,MAArBD,EAAOG,OAAOF,MAC9BC,EACN,OAAOE,KAAKC,KAAqB,EAAhBL,EAAOX,QAAc,EAAIa,GAU9C,IANA,IAAII,EAAM,IAAInB,MAAM,IAGhBoB,EAAM,IAAIpB,MAAM,KAGXqB,EAAI,EAAGA,EAAI,IAChBD,EAAID,EAAIE,GAAKA,EAAI,GAAKA,EAAI,GAAKA,EAAI,GAAKA,EAAI,GAAKA,EAAI,GAAKA,EAAI,EAAIA,EAAI,GAAK,IAAMA,IASrFV,EAAOW,OAAS,SAAgBC,EAAQC,EAAOC,GAM3C,IALA,IAIIC,EAJAC,EAAQ,KACRC,KACAP,EAAI,EACJQ,EAAI,EAEDL,EAAQC,GAAK,CAChB,IAAIK,EAAIP,EAAOC,KACf,OAAQK,GACJ,KAAK,EACDD,EAAMP,KAAOF,EAAIW,GAAK,GACtBJ,GAAS,EAAJI,IAAU,EACfD,EAAI,EACJ,MACJ,KAAK,EACDD,EAAMP,KAAOF,EAAIO,EAAII,GAAK,GAC1BJ,GAAS,GAAJI,IAAW,EAChBD,EAAI,EACJ,MACJ,KAAK,EACDD,EAAMP,KAAOF,EAAIO,EAAII,GAAK,GAC1BF,EAAMP,KAAOF,EAAQ,GAAJW,GACjBD,EAAI,EAGRR,EAAI,QACHM,IAAUA,OAAaI,KAAKC,OAAOC,aAAavB,MAAMsB,OAAQJ,IAC/DP,EAAI,GASZ,OANIQ,IACAD,EAAMP,KAAOF,EAAIO,GACjBE,EAAMP,KAAO,GACH,IAANQ,IACAD,EAAMP,KAAO,KAEjBM,GACIN,GACAM,EAAMI,KAAKC,OAAOC,aAAavB,MAAMsB,OAAQJ,EAAMM,MAAM,EAAGb,KACzDM,EAAMQ,KAAK,KAEfH,OAAOC,aAAavB,MAAMsB,OAAQJ,EAAMM,MAAM,EAAGb,KAa5DV,EAAOyB,OAAS,SAAgBvB,EAAQU,EAAQpB,GAI5C,IAHA,IAEIuB,EAFAF,EAAQrB,EACR0B,EAAI,EAECR,EAAI,EAAGA,EAAIR,EAAOX,QAAS,CAChC,IAAImC,EAAIxB,EAAOyB,WAAWjB,KAC1B,GAAU,KAANgB,GAAYR,EAAI,EAChB,MACJ,QAAqBU,KAAhBF,EAAIjB,EAAIiB,IACT,MAAMG,MAnBI,oBAoBd,OAAQX,GACJ,KAAK,EACDH,EAAIW,EACJR,EAAI,EACJ,MACJ,KAAK,EACDN,EAAOpB,KAAYuB,GAAK,GAAS,GAAJW,IAAW,EACxCX,EAAIW,EACJR,EAAI,EACJ,MACJ,KAAK,EACDN,EAAOpB,MAAiB,GAAJuB,IAAW,GAAS,GAAJW,IAAW,EAC/CX,EAAIW,EACJR,EAAI,EACJ,MACJ,KAAK,EACDN,EAAOpB,MAAiB,EAAJuB,IAAU,EAAIW,EAClCR,EAAI,GAIhB,GAAU,IAANA,EACA,MAAMW,MA1CQ,oBA2ClB,OAAOrC,EAASqB,GAQpBb,EAAO8B,KAAO,SAAc5B,GACxB,MAAO,mEAAmE4B,KAAK5B,mBCxIlE6B,aAQjB,SAASA,eAOLC,KAAKC,cAUTF,aAAaG,UAAUC,GAAK,SAAYC,EAAKlD,EAAIC,GAK7C,OAJC6C,KAAKC,WAAWG,KAASJ,KAAKC,WAAWG,QAAYhB,MAClDlC,GAAMA,EACNC,IAAMA,GAAO6C,OAEVA,MASXD,aAAaG,UAAUG,IAAM,SAAaD,EAAKlD,GAC3C,QAAY0C,IAARQ,EACAJ,KAAKC,mBAEL,QAAWL,IAAP1C,EACA8C,KAAKC,WAAWG,WAGhB,IADA,IAAIE,EAAYN,KAAKC,WAAWG,GACvB1B,EAAI,EAAGA,EAAI4B,EAAU/C,QACtB+C,EAAU5B,GAAGxB,KAAOA,EACpBoD,EAAUC,OAAO7B,EAAG,KAElBA,EAGlB,OAAOsB,MASXD,aAAaG,UAAUM,KAAO,SAAcJ,GACxC,IAAIE,EAAYN,KAAKC,WAAWG,GAChC,GAAIE,EAAW,CAGX,IAFA,IAAIG,KACA/B,EAAI,EACDA,EAAIpB,UAAUC,QACjBkD,EAAKrB,KAAK9B,UAAUoB,MACxB,IAAKA,EAAI,EAAGA,EAAI4B,EAAU/C,QACtB+C,EAAU5B,GAAGxB,GAAGa,MAAMuC,EAAU5B,KAAKvB,IAAKsD,GAElD,OAAOT,MCxEX,YAAiBU,QAAQA,SAqFzB,SAASA,QAAQzC,GAwNb,MArN4B,oBAAjB0C,aAA8B,WAErC,IAAIC,EAAM,IAAID,eAAgB,IAC1BE,EAAM,IAAIC,WAAWF,EAAIhC,QACzBmC,EAAiB,MAAXF,EAAI,GAEd,SAASG,EAAmBC,EAAKC,EAAKC,GAClCP,EAAI,GAAKK,EACTC,EAAIC,GAAWN,EAAI,GACnBK,EAAIC,EAAM,GAAKN,EAAI,GACnBK,EAAIC,EAAM,GAAKN,EAAI,GACnBK,EAAIC,EAAM,GAAKN,EAAI,GAGvB,SAASO,EAAmBH,EAAKC,EAAKC,GAClCP,EAAI,GAAKK,EACTC,EAAIC,GAAWN,EAAI,GACnBK,EAAIC,EAAM,GAAKN,EAAI,GACnBK,EAAIC,EAAM,GAAKN,EAAI,GACnBK,EAAIC,EAAM,GAAKN,EAAI,GAQvB,SAASQ,EAAkBH,EAAKC,GAK5B,OAJAN,EAAI,GAAKK,EAAIC,GACbN,EAAI,GAAKK,EAAIC,EAAM,GACnBN,EAAI,GAAKK,EAAIC,EAAM,GACnBN,EAAI,GAAKK,EAAIC,EAAM,GACZP,EAAI,GAGf,SAASU,EAAkBJ,EAAKC,GAK5B,OAJAN,EAAI,GAAKK,EAAIC,GACbN,EAAI,GAAKK,EAAIC,EAAM,GACnBN,EAAI,GAAKK,EAAIC,EAAM,GACnBN,EAAI,GAAKK,EAAIC,EAAM,GACZP,EAAI,GAjBf3C,EAAQsD,aAAeR,EAAKC,EAAqBI,EAEjDnD,EAAQuD,aAAeT,EAAKK,EAAqBJ,EAmBjD/C,EAAQwD,YAAcV,EAAKM,EAAoBC,EAE/CrD,EAAQyD,YAAcX,EAAKO,EAAoBD,EA9CV,GAiD9B,WAEP,SAASM,EAAmBC,EAAWX,EAAKC,EAAKC,GAC7C,IAAIU,EAAOZ,EAAM,EAAI,EAAI,EAGzB,GAFIY,IACAZ,GAAOA,GACC,IAARA,EACAW,EAAU,EAAIX,EAAM,EAAmB,EAAqB,WAAYC,EAAKC,QAC5E,GAAIW,MAAMb,GACXW,EAAU,WAAYV,EAAKC,QAC1B,GAAIF,EAAM,sBACXW,GAAWC,GAAQ,GAAK,cAAgB,EAAGX,EAAKC,QAC/C,GAAIF,EAAM,uBACXW,GAAWC,GAAQ,GAAKvD,KAAKyD,MAAMd,EAAM,0BAA4B,EAAGC,EAAKC,OAC5E,CACD,IAAIa,EAAW1D,KAAK2D,MAAM3D,KAAK4D,IAAIjB,GAAO3C,KAAK6D,KAE/CP,GAAWC,GAAQ,GAAKG,EAAW,KAAO,GAD0B,QAArD1D,KAAKyD,MAAMd,EAAM3C,KAAK8D,IAAI,GAAIJ,GAAY,YACI,EAAGd,EAAKC,IAO7E,SAASkB,EAAkBC,EAAUpB,EAAKC,GACtC,IAAIoB,EAAOD,EAASpB,EAAKC,GACrBU,EAAsB,GAAdU,GAAQ,IAAU,EAC1BP,EAAWO,IAAS,GAAK,IACzBC,EAAkB,QAAPD,EACf,OAAoB,MAAbP,EACDQ,EACAC,IACAZ,GAAOa,EAAAA,GACM,IAAbV,EACO,sBAAPH,EAA+BW,EAC/BX,EAAOvD,KAAK8D,IAAI,EAAGJ,EAAW,MAAQQ,EAAW,SAd3DvE,EAAQsD,aAAeI,EAAmBgB,KAAK,KAAMC,aACrD3E,EAAQuD,aAAeG,EAAmBgB,KAAK,KAAME,aAgBrD5E,EAAQwD,YAAcY,EAAkBM,KAAK,KAAMG,YACnD7E,EAAQyD,YAAcW,EAAkBM,KAAK,KAAMI,YAvC5C,GA4CiB,oBAAjBC,aAA8B,WAErC,IAAIC,EAAM,IAAID,eAAe,IACzBnC,EAAM,IAAIC,WAAWmC,EAAIrE,QACzBmC,EAAiB,MAAXF,EAAI,GAEd,SAASqC,EAAoBjC,EAAKC,EAAKC,GACnC8B,EAAI,GAAKhC,EACTC,EAAIC,GAAWN,EAAI,GACnBK,EAAIC,EAAM,GAAKN,EAAI,GACnBK,EAAIC,EAAM,GAAKN,EAAI,GACnBK,EAAIC,EAAM,GAAKN,EAAI,GACnBK,EAAIC,EAAM,GAAKN,EAAI,GACnBK,EAAIC,EAAM,GAAKN,EAAI,GACnBK,EAAIC,EAAM,GAAKN,EAAI,GACnBK,EAAIC,EAAM,GAAKN,EAAI,GAGvB,SAASsC,EAAoBlC,EAAKC,EAAKC,GACnC8B,EAAI,GAAKhC,EACTC,EAAIC,GAAWN,EAAI,GACnBK,EAAIC,EAAM,GAAKN,EAAI,GACnBK,EAAIC,EAAM,GAAKN,EAAI,GACnBK,EAAIC,EAAM,GAAKN,EAAI,GACnBK,EAAIC,EAAM,GAAKN,EAAI,GACnBK,EAAIC,EAAM,GAAKN,EAAI,GACnBK,EAAIC,EAAM,GAAKN,EAAI,GACnBK,EAAIC,EAAM,GAAKN,EAAI,GAQvB,SAASuC,EAAmBlC,EAAKC,GAS7B,OARAN,EAAI,GAAKK,EAAIC,GACbN,EAAI,GAAKK,EAAIC,EAAM,GACnBN,EAAI,GAAKK,EAAIC,EAAM,GACnBN,EAAI,GAAKK,EAAIC,EAAM,GACnBN,EAAI,GAAKK,EAAIC,EAAM,GACnBN,EAAI,GAAKK,EAAIC,EAAM,GACnBN,EAAI,GAAKK,EAAIC,EAAM,GACnBN,EAAI,GAAKK,EAAIC,EAAM,GACZ8B,EAAI,GAGf,SAASI,EAAmBnC,EAAKC,GAS7B,OARAN,EAAI,GAAKK,EAAIC,GACbN,EAAI,GAAKK,EAAIC,EAAM,GACnBN,EAAI,GAAKK,EAAIC,EAAM,GACnBN,EAAI,GAAKK,EAAIC,EAAM,GACnBN,EAAI,GAAKK,EAAIC,EAAM,GACnBN,EAAI,GAAKK,EAAIC,EAAM,GACnBN,EAAI,GAAKK,EAAIC,EAAM,GACnBN,EAAI,GAAKK,EAAIC,EAAM,GACZ8B,EAAI,GAzBfhF,EAAQqF,cAAgBvC,EAAKmC,EAAsBC,EAEnDlF,EAAQsF,cAAgBxC,EAAKoC,EAAsBD,EA2BnDjF,EAAQuF,aAAezC,EAAKqC,EAAqBC,EAEjDpF,EAAQwF,aAAe1C,EAAKsC,EAAqBD,EA9DZ,GAiE9B,WAEP,SAASM,EAAoB9B,EAAW+B,EAAMC,EAAM3C,EAAKC,EAAKC,GAC1D,IAAIU,EAAOZ,EAAM,EAAI,EAAI,EAGzB,GAFIY,IACAZ,GAAOA,GACC,IAARA,EACAW,EAAU,EAAGV,EAAKC,EAAMwC,GACxB/B,EAAU,EAAIX,EAAM,EAAmB,EAAqB,WAAYC,EAAKC,EAAMyC,QAChF,GAAI9B,MAAMb,GACbW,EAAU,EAAGV,EAAKC,EAAMwC,GACxB/B,EAAU,WAAYV,EAAKC,EAAMyC,QAC9B,GAAI3C,EAAM,uBACbW,EAAU,EAAGV,EAAKC,EAAMwC,GACxB/B,GAAWC,GAAQ,GAAK,cAAgB,EAAGX,EAAKC,EAAMyC,OACnD,CACH,IAAIpB,EACJ,GAAIvB,EAAM,wBAENW,GADAY,EAAWvB,EAAM,UACM,EAAGC,EAAKC,EAAMwC,GACrC/B,GAAWC,GAAQ,GAAKW,EAAW,cAAgB,EAAGtB,EAAKC,EAAMyC,OAC9D,CACH,IAAI5B,EAAW1D,KAAK2D,MAAM3D,KAAK4D,IAAIjB,GAAO3C,KAAK6D,KAC9B,OAAbH,IACAA,EAAW,MAEfJ,EAAqB,kBADrBY,EAAWvB,EAAM3C,KAAK8D,IAAI,GAAIJ,MACY,EAAGd,EAAKC,EAAMwC,GACxD/B,GAAWC,GAAQ,GAAKG,EAAW,MAAQ,GAAgB,QAAXQ,EAAqB,WAAa,EAAGtB,EAAKC,EAAMyC,KAQ5G,SAASC,EAAmBvB,EAAUqB,EAAMC,EAAM1C,EAAKC,GACnD,IAAI2C,EAAKxB,EAASpB,EAAKC,EAAMwC,GACzBI,EAAKzB,EAASpB,EAAKC,EAAMyC,GACzB/B,EAAoB,GAAZkC,GAAM,IAAU,EACxB/B,EAAW+B,IAAO,GAAK,KACvBvB,EAAW,YAAmB,QAALuB,GAAgBD,EAC7C,OAAoB,OAAb9B,EACDQ,EACAC,IACAZ,GAAOa,EAAAA,GACM,IAAbV,EACO,OAAPH,EAAgBW,EAChBX,EAAOvD,KAAK8D,IAAI,EAAGJ,EAAW,OAASQ,EAAW,kBAf5DvE,EAAQqF,cAAgBI,EAAoBf,KAAK,KAAMC,YAAa,EAAG,GACvE3E,EAAQsF,cAAgBG,EAAoBf,KAAK,KAAME,YAAa,EAAG,GAiBvE5E,EAAQuF,aAAeK,EAAmBlB,KAAK,KAAMG,WAAY,EAAG,GACpE7E,EAAQwF,aAAeI,EAAmBlB,KAAK,KAAMI,WAAY,EAAG,GAnD7D,GAuDJ9E,EAKX,SAAS2E,YAAY3B,EAAKC,EAAKC,GAC3BD,EAAIC,GAAyB,IAAbF,EAChBC,EAAIC,EAAM,GAAMF,IAAQ,EAAK,IAC7BC,EAAIC,EAAM,GAAMF,IAAQ,GAAK,IAC7BC,EAAIC,EAAM,GAAMF,IAAQ,GAG5B,SAAS4B,YAAY5B,EAAKC,EAAKC,GAC3BD,EAAIC,GAAYF,IAAQ,GACxBC,EAAIC,EAAM,GAAMF,IAAQ,GAAK,IAC7BC,EAAIC,EAAM,GAAMF,IAAQ,EAAK,IAC7BC,EAAIC,EAAM,GAAmB,IAAbF,EAGpB,SAAS6B,WAAW5B,EAAKC,GACrB,OAAQD,EAAIC,GACJD,EAAIC,EAAM,IAAM,EAChBD,EAAIC,EAAM,IAAM,GAChBD,EAAIC,EAAM,IAAM,MAAQ,EAGpC,SAAS4B,WAAW7B,EAAKC,GACrB,OAAQD,EAAIC,IAAY,GAChBD,EAAIC,EAAM,IAAM,GAChBD,EAAIC,EAAM,IAAM,EAChBD,EAAIC,EAAM,MAAQ,EC5U9B,cAAiB6C,QAQjB,SAASA,QAAQC,YACb,IACI,IAAIC,IAAMC,KAAK,QAAQC,QAAQ,IAAI,MAAzBD,CAAgCF,YAC1C,GAAIC,MAAQA,IAAI3G,QAAU8G,OAAOC,KAAKJ,KAAK3G,QACvC,OAAO2G,IACb,MAAOK,IACT,OAAO,mDCRX,IAAIC,EAAOvG,EAOXuG,EAAKjH,OAAS,SAAqBW,GAG/B,IAFA,IAAIuG,EAAM,EACN/E,EAAI,EACChB,EAAI,EAAGA,EAAIR,EAAOX,SAAUmB,GACjCgB,EAAIxB,EAAOyB,WAAWjB,IACd,IACJ+F,GAAO,EACF/E,EAAI,KACT+E,GAAO,EACe,QAAZ,MAAJ/E,IAAkE,QAAZ,MAA3BxB,EAAOyB,WAAWjB,EAAI,OACrDA,EACF+F,GAAO,GAEPA,GAAO,EAEf,OAAOA,GAUXD,EAAKE,KAAO,SAAmB9F,EAAQC,EAAOC,GAE1C,GADUA,EAAMD,EACN,EACN,MAAO,GAKX,IAJA,IAGIE,EAHAC,EAAQ,KACRC,KACAP,EAAI,EAEDG,EAAQC,IACXC,EAAIH,EAAOC,MACH,IACJI,EAAMP,KAAOK,EACRA,EAAI,KAAOA,EAAI,IACpBE,EAAMP,MAAY,GAAJK,IAAW,EAAsB,GAAlBH,EAAOC,KAC/BE,EAAI,KAAOA,EAAI,KACpBA,IAAU,EAAJA,IAAU,IAAwB,GAAlBH,EAAOC,OAAkB,IAAwB,GAAlBD,EAAOC,OAAkB,EAAsB,GAAlBD,EAAOC,MAAiB,MAC1GI,EAAMP,KAAO,OAAUK,GAAK,IAC5BE,EAAMP,KAAO,OAAc,KAAJK,IAEvBE,EAAMP,MAAY,GAAJK,IAAW,IAAwB,GAAlBH,EAAOC,OAAkB,EAAsB,GAAlBD,EAAOC,KACnEH,EAAI,QACHM,IAAUA,OAAaI,KAAKC,OAAOC,aAAavB,MAAMsB,OAAQJ,IAC/DP,EAAI,GAGZ,OAAIM,GACIN,GACAM,EAAMI,KAAKC,OAAOC,aAAavB,MAAMsB,OAAQJ,EAAMM,MAAM,EAAGb,KACzDM,EAAMQ,KAAK,KAEfH,OAAOC,aAAavB,MAAMsB,OAAQJ,EAAMM,MAAM,EAAGb,KAU5D8F,EAAKG,MAAQ,SAAoBzG,EAAQU,EAAQpB,GAI7C,IAHA,IACIoH,EACAC,EAFAhG,EAAQrB,EAGHkB,EAAI,EAAGA,EAAIR,EAAOX,SAAUmB,GACjCkG,EAAK1G,EAAOyB,WAAWjB,IACd,IACLE,EAAOpB,KAAYoH,EACZA,EAAK,MACZhG,EAAOpB,KAAYoH,GAAM,EAAU,IACnChG,EAAOpB,KAAuB,GAAXoH,EAAgB,KACV,QAAZ,MAALA,IAA0E,QAAZ,OAAjCC,EAAK3G,EAAOyB,WAAWjB,EAAI,MAChEkG,EAAK,QAAiB,KAALA,IAAgB,KAAY,KAALC,KACtCnG,EACFE,EAAOpB,KAAYoH,GAAM,GAAU,IACnChG,EAAOpB,KAAYoH,GAAM,GAAK,GAAK,IACnChG,EAAOpB,KAAYoH,GAAM,EAAK,GAAK,IACnChG,EAAOpB,KAAuB,GAAXoH,EAAgB,MAEnChG,EAAOpB,KAAYoH,GAAM,GAAU,IACnChG,EAAOpB,KAAYoH,GAAM,EAAK,GAAK,IACnChG,EAAOpB,KAAuB,GAAXoH,EAAgB,KAG3C,OAAOpH,EAASqB,YCtGHiG,KA6BjB,SAASA,KAAKC,EAAOxF,EAAOyF,GACxB,IAAIC,EAASD,GAAQ,KACjBE,EAASD,IAAS,EAClBE,EAAS,KACT3H,EAASyH,EACb,OAAO,SAAoBD,GACvB,GAAIA,EAAO,GAAKA,EAAOE,EACnB,OAAOH,EAAMC,GACbxH,EAASwH,EAAOC,IAChBE,EAAOJ,EAAME,GACbzH,EAAS,GAEb,IAAI0D,EAAM3B,EAAM6F,KAAKD,EAAM3H,EAAQA,GAAUwH,GAG7C,OAFa,EAATxH,IACAA,EAAwB,GAAL,EAATA,IACP0D,GC5Cf,aAAiBmE,SAYjB,SAASA,SAASvB,EAAIC,GASlB/D,KAAK8D,GAAKA,IAAO,EAMjB9D,KAAK+D,GAAKA,IAAO,EAQrB,IAAIuB,KAAOD,SAASC,KAAO,IAAID,SAAS,EAAG,GAE3CC,KAAKC,SAAW,WAAa,OAAO,GACpCD,KAAKE,SAAWF,KAAKG,SAAW,WAAa,OAAOzF,MACpDsF,KAAK/H,OAAS,WAAa,OAAO,GAOlC,IAAImI,SAAWL,SAASK,SAAW,mBAOnCL,SAASM,WAAa,SAAoBC,GACtC,GAAc,IAAVA,EACA,OAAON,KACX,IAAIzD,EAAO+D,EAAQ,EACf/D,IACA+D,GAASA,GACb,IAAI9B,EAAK8B,IAAU,EACf7B,GAAM6B,EAAQ9B,GAAM,aAAe,EAUvC,OATIjC,IACAkC,GAAMA,IAAO,EACbD,GAAMA,IAAO,IACPA,EAAK,aACPA,EAAK,IACCC,EAAK,aACPA,EAAK,KAGV,IAAIsB,SAASvB,EAAIC,IAQ5BsB,SAASQ,KAAO,SAAcD,GAC1B,GAAqB,iBAAVA,EACP,OAAOP,SAASM,WAAWC,GAC/B,GAAIE,QAAKC,SAASH,GAAQ,CAEtB,IAAIE,QAAKE,KAGL,OAAOX,SAASM,WAAWM,SAASL,EAAO,KAF3CA,EAAQE,QAAKE,KAAKE,WAAWN,GAIrC,OAAOA,EAAMO,KAAOP,EAAMQ,KAAO,IAAIf,SAASO,EAAMO,MAAQ,EAAGP,EAAMQ,OAAS,GAAKd,MAQvFD,SAASnF,UAAUqF,SAAW,SAAkBc,GAC5C,IAAKA,GAAYrG,KAAK+D,KAAO,GAAI,CAC7B,IAAID,EAAgB,GAAV9D,KAAK8D,KAAW,EACtBC,GAAM/D,KAAK+D,KAAW,EAG1B,OAFKD,IACDC,EAAKA,EAAK,IAAM,KACXD,EAAU,WAALC,GAElB,OAAO/D,KAAK8D,GAAe,WAAV9D,KAAK+D,IAQ1BsB,SAASnF,UAAUoG,OAAS,SAAgBD,GACxC,OAAOP,QAAKE,KACN,IAAIF,QAAKE,KAAe,EAAVhG,KAAK8D,GAAkB,EAAV9D,KAAK+D,GAAQwC,QAAQF,KAE9CF,IAAe,EAAVnG,KAAK8D,GAAQsC,KAAgB,EAAVpG,KAAK+D,GAAQsC,SAAUE,QAAQF,KAGnE,IAAI1G,WAAaN,OAAOa,UAAUP,WAOlC0F,SAASmB,SAAW,SAAkBC,GAClC,OAAIA,IAASf,SACFJ,KACJ,IAAID,UACL1F,WAAWyF,KAAKqB,EAAM,GACtB9G,WAAWyF,KAAKqB,EAAM,IAAM,EAC5B9G,WAAWyF,KAAKqB,EAAM,IAAM,GAC5B9G,WAAWyF,KAAKqB,EAAM,IAAM,MAAQ,GAEpC9G,WAAWyF,KAAKqB,EAAM,GACtB9G,WAAWyF,KAAKqB,EAAM,IAAM,EAC5B9G,WAAWyF,KAAKqB,EAAM,IAAM,GAC5B9G,WAAWyF,KAAKqB,EAAM,IAAM,MAAQ,IAQ9CpB,SAASnF,UAAUwG,OAAS,WACxB,OAAOrH,OAAOC,aACO,IAAjBU,KAAK8D,GACL9D,KAAK8D,KAAO,EAAK,IACjB9D,KAAK8D,KAAO,GAAK,IACjB9D,KAAK8D,KAAO,GACK,IAAjB9D,KAAK+D,GACL/D,KAAK+D,KAAO,EAAK,IACjB/D,KAAK+D,KAAO,GAAK,IACjB/D,KAAK+D,KAAO,KAQpBsB,SAASnF,UAAUsF,SAAW,WAC1B,IAAImB,EAAS3G,KAAK+D,IAAM,GAGxB,OAFA/D,KAAK+D,KAAQ/D,KAAK+D,IAAM,EAAI/D,KAAK8D,KAAO,IAAM6C,KAAU,EACxD3G,KAAK8D,IAAQ9D,KAAK8D,IAAM,EAAsB6C,KAAU,EACjD3G,MAOXqF,SAASnF,UAAUuF,SAAW,WAC1B,IAAIkB,IAAmB,EAAV3G,KAAK8D,IAGlB,OAFA9D,KAAK8D,KAAQ9D,KAAK8D,KAAO,EAAI9D,KAAK+D,IAAM,IAAM4C,KAAU,EACxD3G,KAAK+D,IAAQ/D,KAAK+D,KAAO,EAAqB4C,KAAU,EACjD3G,MAOXqF,SAASnF,UAAU3C,OAAS,WACxB,IAAIqJ,EAAS5G,KAAK8D,GACd+C,GAAS7G,KAAK8D,KAAO,GAAK9D,KAAK+D,IAAM,KAAO,EAC5C+C,EAAS9G,KAAK+D,KAAO,GACzB,OAAiB,IAAV+C,EACU,IAAVD,EACED,EAAQ,MACNA,EAAQ,IAAM,EAAI,EAClBA,EAAQ,QAAU,EAAI,EACxBC,EAAQ,MACNA,EAAQ,IAAM,EAAI,EAClBA,EAAQ,QAAU,EAAI,EAC1BC,EAAQ,IAAM,EAAI,mDCrM7B,IAAIhB,EAAO7H,EAoOX,SAAS8I,EAAMC,EAAKC,EAAKC,GACrB,IAAK,IAAI5C,EAAOD,OAAOC,KAAK2C,GAAMvI,EAAI,EAAGA,EAAI4F,EAAK/G,SAAUmB,OACnCkB,IAAjBoH,EAAI1C,EAAK5F,KAAsBwI,IAC/BF,EAAI1C,EAAK5F,IAAMuI,EAAI3C,EAAK5F,KAChC,OAAOsI,EAoBX,SAASG,EAASC,GAEd,SAASC,EAAYC,EAASC,GAE1B,KAAMvH,gBAAgBqH,GAClB,OAAO,IAAIA,EAAYC,EAASC,GAKpClD,OAAOmD,eAAexH,KAAM,WAAayH,IAAK,WAAa,OAAOH,KAG9DzH,MAAM6H,kBACN7H,MAAM6H,kBAAkB1H,KAAMqH,GAE9BhD,OAAOmD,eAAexH,KAAM,SAAW4F,OAAO,IAAK/F,OAAS8H,OAAS,KAErEJ,GACAR,EAAM/G,KAAMuH,GAWpB,OARCF,EAAYnH,UAAYmE,OAAOuD,OAAO/H,MAAMK,YAAY2H,YAAcR,EAEvEhD,OAAOmD,eAAeH,EAAYnH,UAAW,QAAUuH,IAAK,WAAa,OAAOL,KAEhFC,EAAYnH,UAAU4H,SAAW,WAC7B,OAAO9H,KAAKoH,KAAO,KAAOpH,KAAKsH,SAG5BD,EAvRXvB,EAAK7I,UAAY8K,UAGjBjC,EAAK9H,OAASgK,SAGdlC,EAAK/F,aAAekI,aAGpBnC,EAAKoC,MAAQC,QAGbrC,EAAK9B,QAAUoE,UAGftC,EAAKtB,KAAO6D,OAGZvC,EAAKhB,KAAOwD,OAGZxC,EAAKT,SAAWkD,SAGhBzC,EAAK0C,OAA2B,oBAAXC,QAA0BA,aACf,IAAXD,gBAA0BA,gBACf,oBAAXE,MAA0BA,MACjC1I,eAQd8F,EAAK6C,WAAatE,OAAOuE,OAASvE,OAAOuE,cAOzC9C,EAAK+C,YAAcxE,OAAOuE,OAASvE,OAAOuE,cAQ1C9C,EAAKgD,OAASvC,QAAQT,EAAK0C,OAAOO,SAAWjD,EAAK0C,OAAOO,QAAQC,UAAYlD,EAAK0C,OAAOO,QAAQC,SAASC,MAQ1GnD,EAAKoD,UAAYC,OAAOD,WAAwC,SAAmBtD,GAC/E,MAAwB,iBAAVA,GAAsBwD,SAASxD,IAAUtH,KAAK2D,MAAM2D,KAAWA,GAQjFE,EAAKC,SAAW,SAAkBH,GAC9B,MAAwB,iBAAVA,GAAsBA,aAAiBvG,QAQzDyG,EAAKuD,SAAW,SAAkBzD,GAC9B,OAAOA,GAA0B,iBAAVA,GAW3BE,EAAKwD,MAQLxD,EAAKyD,MAAQ,SAAeC,EAAKC,GAC7B,IAAI7D,EAAQ4D,EAAIC,GAChB,QAAa,MAAT7D,IAAiB4D,EAAIE,eAAeD,MACZ,iBAAV7D,IAAuBvI,MAAMsM,QAAQ/D,GAASA,EAAMrI,OAAS8G,OAAOC,KAAKsB,GAAOrI,QAAU,IAehHuI,EAAK8D,OAAS,WACV,IACI,IAAIA,EAAS9D,EAAK9B,QAAQ,UAAU4F,OAEpC,OAAOA,EAAO1J,UAAU2J,UAAYD,EAAoC,KAC1E,MAAOrF,GAEL,OAAO,MAPD,GAYduB,EAAKgE,aAAe,KAGpBhE,EAAKiE,oBAAsB,KAO3BjE,EAAKkE,UAAY,SAAmBC,GAEhC,MAA8B,iBAAhBA,EACRnE,EAAK8D,OACD9D,EAAKiE,oBAAoBE,GACzB,IAAInE,EAAKzI,MAAM4M,GACnBnE,EAAK8D,OACD9D,EAAKgE,aAAaG,GACI,oBAAfnJ,WACHmJ,EACA,IAAInJ,WAAWmJ,IAOjCnE,EAAKzI,MAA8B,oBAAfyD,WAA6BA,WAAwCzD,MAezFyI,EAAKE,KAAkCF,EAAK0C,OAAO0B,SAAsCpE,EAAK0C,OAAO0B,QAAQlE,MACtEF,EAAK0C,OAAOxC,MACvCF,EAAK9B,QAAQ,QAOzB8B,EAAKqE,OAAS,mBAOdrE,EAAKsE,QAAU,wBAOftE,EAAKuE,QAAU,6CAOfvE,EAAKwE,WAAa,SAAoB1E,GAClC,OAAOA,EACDE,EAAKT,SAASQ,KAAKD,GAAOc,SAC1BZ,EAAKT,SAASK,UASxBI,EAAKyE,aAAe,SAAsB9D,EAAMJ,GAC5C,IAAImE,EAAO1E,EAAKT,SAASmB,SAASC,GAClC,OAAIX,EAAKE,KACEF,EAAKE,KAAKyE,SAASD,EAAK1G,GAAI0G,EAAKzG,GAAIsC,GACzCmE,EAAKjF,SAASgB,QAAQF,KAkBjCP,EAAKiB,MAAQA,EAObjB,EAAK4E,QAAU,SAAiBC,GAC5B,OAAOA,EAAItM,OAAO,GAAGuM,cAAgBD,EAAIE,UAAU,IA0CvD/E,EAAKqB,SAAWA,EAmBhBrB,EAAKgF,cAAgB3D,EAAS,iBAoB9BrB,EAAKiF,YAAc,SAAkBC,GAEjC,IADA,IAAIC,KACKvM,EAAI,EAAGA,EAAIsM,EAAWzN,SAAUmB,EACrCuM,EAASD,EAAWtM,IAAM,EAO9B,OAAO,WACH,IAAK,IAAI4F,EAAOD,OAAOC,KAAKtE,MAAOtB,EAAI4F,EAAK/G,OAAS,EAAGmB,GAAK,IAAKA,EAC9D,GAA0B,IAAtBuM,EAAS3G,EAAK5F,UAA+BkB,IAAlBI,KAAKsE,EAAK5F,KAAuC,OAAlBsB,KAAKsE,EAAK5F,IACpE,OAAO4F,EAAK5F,KAiB5BoH,EAAKoF,YAAc,SAAkBF,GAQjC,OAAO,SAAS5D,GACZ,IAAK,IAAI1I,EAAI,EAAGA,EAAIsM,EAAWzN,SAAUmB,EACjCsM,EAAWtM,KAAO0I,UACXpH,KAAKgL,EAAWtM,MAoBvCoH,EAAKqF,eACDC,MAAO/L,OACPgM,MAAOhM,OACPiM,MAAOjM,OACPkM,MAAM,GAIVzF,EAAK0F,WAAa,WACd,IAAI5B,EAAS9D,EAAK8D,OAEbA,GAML9D,EAAKgE,aAAeF,EAAO/D,OAAS/E,WAAW+E,MAAQ+D,EAAO/D,MAE1D,SAAqBD,EAAO6F,GACxB,OAAO,IAAI7B,EAAOhE,EAAO6F,IAEjC3F,EAAKiE,oBAAsBH,EAAO8B,aAE9B,SAA4B1G,GACxB,OAAO,IAAI4E,EAAO5E,KAbtBc,EAAKgE,aAAehE,EAAKiE,oBAAsB,eC7YtC4B,OAIbC,aAEAvG,WAAYS,QAAKT,SACjBrH,OAAY8H,QAAK9H,OACjBwG,KAAYsB,QAAKtB,KAWrB,SAASqH,GAAG3O,EAAIuH,EAAKxD,GAMjBjB,KAAK9C,GAAKA,EAMV8C,KAAKyE,IAAMA,EAMXzE,KAAK8L,UAAOlM,EAMZI,KAAKiB,IAAMA,EAIf,SAAS8K,QAUT,SAASC,MAAMC,GAMXjM,KAAKkM,KAAOD,EAAOC,KAMnBlM,KAAKmM,KAAOF,EAAOE,KAMnBnM,KAAKyE,IAAMwH,EAAOxH,IAMlBzE,KAAK8L,KAAOG,EAAOG,OAQvB,SAAST,SAML3L,KAAKyE,IAAM,EAMXzE,KAAKkM,KAAO,IAAIL,GAAGE,KAAM,EAAG,GAM5B/L,KAAKmM,KAAOnM,KAAKkM,KAMjBlM,KAAKoM,OAAS,KAqDlB,SAASC,UAAUpL,EAAKC,EAAKC,GACzBD,EAAIC,GAAa,IAANF,EAGf,SAASqL,cAAcrL,EAAKC,EAAKC,GAC7B,KAAOF,EAAM,KACTC,EAAIC,KAAe,IAANF,EAAY,IACzBA,KAAS,EAEbC,EAAIC,GAAOF,EAYf,SAASsL,SAAS9H,EAAKxD,GACnBjB,KAAKyE,IAAMA,EACXzE,KAAK8L,UAAOlM,EACZI,KAAKiB,IAAMA,EA8Cf,SAASuL,cAAcvL,EAAKC,EAAKC,GAC7B,KAAOF,EAAI8C,IACP7C,EAAIC,KAAkB,IAATF,EAAI6C,GAAW,IAC5B7C,EAAI6C,IAAM7C,EAAI6C,KAAO,EAAI7C,EAAI8C,IAAM,MAAQ,EAC3C9C,EAAI8C,MAAQ,EAEhB,KAAO9C,EAAI6C,GAAK,KACZ5C,EAAIC,KAAkB,IAATF,EAAI6C,GAAW,IAC5B7C,EAAI6C,GAAK7C,EAAI6C,KAAO,EAExB5C,EAAIC,KAASF,EAAI6C,GA2CrB,SAAS2I,aAAaxL,EAAKC,EAAKC,GAC5BD,EAAIC,GAA0B,IAAdF,EAChBC,EAAIC,EAAM,GAAMF,IAAQ,EAAM,IAC9BC,EAAIC,EAAM,GAAMF,IAAQ,GAAM,IAC9BC,EAAIC,EAAM,GAAMF,IAAQ,GAtK5B0K,OAAO/D,OAAS9B,QAAK8D,OACf,WACE,OAAQ+B,OAAO/D,OAAS,WACpB,OAAO,IAAIgE,kBAIjB,WACE,OAAO,IAAID,QAQnBA,OAAO5G,MAAQ,SAAeC,GAC1B,OAAO,IAAIc,QAAKzI,MAAM2H,IAKtBc,QAAKzI,QAAUA,QACfsO,OAAO5G,MAAQe,QAAKhB,KAAK6G,OAAO5G,MAAOe,QAAKzI,MAAM6C,UAAUwM,WAUhEf,OAAOzL,UAAUyM,MAAQ,SAAczP,EAAIuH,EAAKxD,GAG5C,OAFAjB,KAAKmM,KAAOnM,KAAKmM,KAAKL,KAAO,IAAID,GAAG3O,EAAIuH,EAAKxD,GAC7CjB,KAAKyE,KAAOA,EACLzE,MA8BXuM,SAASrM,UAAYmE,OAAOuD,OAAOiE,GAAG3L,WACtCqM,SAASrM,UAAUhD,GAAKoP,cAOxBX,OAAOzL,UAAU0M,OAAS,SAAsBhH,GAW5C,OARA5F,KAAKyE,MAAQzE,KAAKmM,KAAOnM,KAAKmM,KAAKL,KAAO,IAAIS,UACzC3G,KAAkB,GACT,IAAY,EACpBA,EAAQ,MAAY,EACpBA,EAAQ,QAAY,EACpBA,EAAQ,UAAY,EACA,EAC1BA,IAAQnB,IACDzE,MASX2L,OAAOzL,UAAU2M,MAAQ,SAAqBjH,GAC1C,OAAOA,EAAQ,EACT5F,KAAK2M,MAAMH,cAAe,GAAInH,WAASM,WAAWC,IAClD5F,KAAK4M,OAAOhH,IAQtB+F,OAAOzL,UAAU4M,OAAS,SAAsBlH,GAC5C,OAAO5F,KAAK4M,QAAQhH,GAAS,EAAIA,GAAS,MAAQ,IAsBtD+F,OAAOzL,UAAU6M,OAAS,SAAsBnH,GAC5C,IAAI4E,EAAOnF,WAASQ,KAAKD,GACzB,OAAO5F,KAAK2M,MAAMH,cAAehC,EAAKjN,SAAUiN,IAUpDmB,OAAOzL,UAAU8M,MAAQrB,OAAOzL,UAAU6M,OAQ1CpB,OAAOzL,UAAU+M,OAAS,SAAsBrH,GAC5C,IAAI4E,EAAOnF,WAASQ,KAAKD,GAAOJ,WAChC,OAAOxF,KAAK2M,MAAMH,cAAehC,EAAKjN,SAAUiN,IAQpDmB,OAAOzL,UAAUgN,KAAO,SAAoBtH,GACxC,OAAO5F,KAAK2M,MAAMN,UAAW,EAAGzG,EAAQ,EAAI,IAehD+F,OAAOzL,UAAUiN,QAAU,SAAuBvH,GAC9C,OAAO5F,KAAK2M,MAAMF,aAAc,EAAG7G,IAAU,IASjD+F,OAAOzL,UAAUkN,SAAWzB,OAAOzL,UAAUiN,QAQ7CxB,OAAOzL,UAAUmN,QAAU,SAAuBzH,GAC9C,IAAI4E,EAAOnF,WAASQ,KAAKD,GACzB,OAAO5F,KAAK2M,MAAMF,aAAc,EAAGjC,EAAK1G,IAAI6I,MAAMF,aAAc,EAAGjC,EAAKzG,KAU5E4H,OAAOzL,UAAUoN,SAAW3B,OAAOzL,UAAUmN,QAQ7C1B,OAAOzL,UAAUgI,MAAQ,SAAqBtC,GAC1C,OAAO5F,KAAK2M,MAAM7G,QAAKoC,MAAM3G,aAAc,EAAGqE,IASlD+F,OAAOzL,UAAUqN,OAAS,SAAsB3H,GAC5C,OAAO5F,KAAK2M,MAAM7G,QAAKoC,MAAM5E,cAAe,EAAGsC,IAGnD,IAAI4H,WAAa1H,QAAKzI,MAAM6C,UAAUuN,IAChC,SAAwBxM,EAAKC,EAAKC,GAChCD,EAAIuM,IAAIxM,EAAKE,IAGf,SAAwBF,EAAKC,EAAKC,GAChC,IAAK,IAAIzC,EAAI,EAAGA,EAAIuC,EAAI1D,SAAUmB,EAC9BwC,EAAIC,EAAMzC,GAAKuC,EAAIvC,IAQ/BiN,OAAOzL,UAAUoL,MAAQ,SAAqB1F,GAC1C,IAAInB,EAAMmB,EAAMrI,SAAW,EAC3B,IAAKkH,EACD,OAAOzE,KAAK2M,MAAMN,UAAW,EAAG,GACpC,GAAIvG,QAAKC,SAASH,GAAQ,CACtB,IAAI1E,EAAMyK,OAAO5G,MAAMN,EAAMzG,OAAOT,OAAOqI,IAC3C5H,OAAOyB,OAAOmG,EAAO1E,EAAK,GAC1B0E,EAAQ1E,EAEZ,OAAOlB,KAAK4M,OAAOnI,GAAKkI,MAAMa,WAAY/I,EAAKmB,IAQnD+F,OAAOzL,UAAUhC,OAAS,SAAsB0H,GAC5C,IAAInB,EAAMD,KAAKjH,OAAOqI,GACtB,OAAOnB,EACDzE,KAAK4M,OAAOnI,GAAKkI,MAAMnI,KAAKG,MAAOF,EAAKmB,GACxC5F,KAAK2M,MAAMN,UAAW,EAAG,IAQnCV,OAAOzL,UAAUwN,KAAO,WAIpB,OAHA1N,KAAKoM,OAAS,IAAIJ,MAAMhM,MACxBA,KAAKkM,KAAOlM,KAAKmM,KAAO,IAAIN,GAAGE,KAAM,EAAG,GACxC/L,KAAKyE,IAAM,EACJzE,MAOX2L,OAAOzL,UAAUyN,MAAQ,WAUrB,OATI3N,KAAKoM,QACLpM,KAAKkM,KAASlM,KAAKoM,OAAOF,KAC1BlM,KAAKmM,KAASnM,KAAKoM,OAAOD,KAC1BnM,KAAKyE,IAASzE,KAAKoM,OAAO3H,IAC1BzE,KAAKoM,OAASpM,KAAKoM,OAAON,OAE1B9L,KAAKkM,KAAOlM,KAAKmM,KAAO,IAAIN,GAAGE,KAAM,EAAG,GACxC/L,KAAKyE,IAAO,GAETzE,MAOX2L,OAAOzL,UAAU0N,OAAS,WACtB,IAAI1B,EAAOlM,KAAKkM,KACZC,EAAOnM,KAAKmM,KACZ1H,EAAOzE,KAAKyE,IAOhB,OANAzE,KAAK2N,QAAQf,OAAOnI,GAChBA,IACAzE,KAAKmM,KAAKL,KAAOI,EAAKJ,KACtB9L,KAAKmM,KAAOA,EACZnM,KAAKyE,KAAOA,GAETzE,MAOX2L,OAAOzL,UAAU2N,OAAS,WAItB,IAHA,IAAI3B,EAAOlM,KAAKkM,KAAKJ,KACjB5K,EAAOlB,KAAK6H,YAAY9C,MAAM/E,KAAKyE,KACnCtD,EAAO,EACJ+K,GACHA,EAAKhP,GAAGgP,EAAKjL,IAAKC,EAAKC,GACvBA,GAAO+K,EAAKzH,IACZyH,EAAOA,EAAKJ,KAGhB,OAAO5K,GAGXyK,OAAOH,WAAa,SAASsC,GACzBlC,aAAekC,GCxcnB,kBAAiBlC,gBAIhBA,eAAa1L,UAAYmE,OAAOuD,OAAO+D,OAAOzL,YAAY2H,YAAc+D,eAIzE,IAAIhC,SAAS9D,QAAK8D,OAQlB,SAASgC,iBACLD,OAAOvG,KAAKpF,qBAQH+E,MAAQ,SAAsBC,GACvC,OAAQ4G,eAAa7G,MAAQe,QAAKiE,qBAAqB/E,IAG3D,IAAI+I,iBAAmBnE,UAAUA,SAAO1J,qBAAqBY,YAA4C,QAA9B8I,SAAO1J,UAAUuN,IAAIrG,KAC1F,SAA8BnG,EAAKC,EAAKC,GACtCD,EAAIuM,IAAIxM,EAAKE,IAIf,SAA+BF,EAAKC,EAAKC,GACvC,GAAIF,EAAI+M,KACJ/M,EAAI+M,KAAK9M,EAAKC,EAAK,EAAGF,EAAI1D,aACzB,IAAK,IAAImB,EAAI,EAAGA,EAAIuC,EAAI1D,QACzB2D,EAAIC,KAASF,EAAIvC,MAgB7B,SAASuP,kBAAkBhN,EAAKC,EAAKC,GAC7BF,EAAI1D,OAAS,GACbuI,QAAKtB,KAAKG,MAAM1D,EAAKC,EAAKC,GAE1BD,EAAI2I,UAAU5I,EAAKE,kBAddjB,UAAUoL,MAAQ,SAA4B1F,GACnDE,QAAKC,SAASH,KACdA,EAAQE,QAAKgE,aAAalE,EAAO,WACrC,IAAInB,EAAMmB,EAAMrI,SAAW,EAI3B,OAHAyC,KAAK4M,OAAOnI,GACRA,GACAzE,KAAK2M,MAAMoB,iBAAkBtJ,EAAKmB,GAC/B5F,qBAaEE,UAAUhC,OAAS,SAA6B0H,GACzD,IAAInB,EAAMmF,SAAOsE,WAAWtI,GAI5B,OAHA5F,KAAK4M,OAAOnI,GACRA,GACAzE,KAAK2M,MAAMsB,kBAAmBxJ,EAAKmB,GAChC5F,MCtEX,WAAiBmO,OAIbC,aAEA/I,WAAYS,QAAKT,SACjBb,OAAYsB,QAAKtB,KAGrB,SAAS6J,gBAAgBC,EAAQC,GAC7B,OAAOC,WAAW,uBAAyBF,EAAOnN,IAAM,OAASoN,GAAe,GAAK,MAAQD,EAAO7J,KASxG,SAAS0J,OAAOvP,GAMZoB,KAAKkB,IAAMtC,EAMXoB,KAAKmB,IAAM,EAMXnB,KAAKyE,IAAM7F,EAAOrB,OAGtB,IAAIkR,aAAqC,oBAAf3N,WACpB,SAA4BlC,GAC1B,GAAIA,aAAkBkC,YAAczD,MAAMsM,QAAQ/K,GAC9C,OAAO,IAAIuP,OAAOvP,GACtB,MAAMiB,MAAM,mBAGd,SAAsBjB,GACpB,GAAIvB,MAAMsM,QAAQ/K,GACd,OAAO,IAAIuP,OAAOvP,GACtB,MAAMiB,MAAM,mBA8BZ+F,MAoCR,SAAS8I,iBAEL,IAAIlE,EAAO,IAAInF,WAAS,EAAG,GACvB3G,EAAI,EACR,KAAIsB,KAAKyE,IAAMzE,KAAKmB,IAAM,GAanB,CACH,KAAOzC,EAAI,IAAKA,EAAG,CAEf,GAAIsB,KAAKmB,KAAOnB,KAAKyE,IACjB,MAAM4J,gBAAgBrO,MAG1B,GADAwK,EAAK1G,IAAM0G,EAAK1G,IAA2B,IAArB9D,KAAKkB,IAAIlB,KAAKmB,OAAmB,EAAJzC,KAAW,EAC1DsB,KAAKkB,IAAIlB,KAAKmB,OAAS,IACvB,OAAOqJ,EAIf,OADAA,EAAK1G,IAAM0G,EAAK1G,IAA6B,IAAvB9D,KAAKkB,IAAIlB,KAAKmB,SAAqB,EAAJzC,KAAW,EACzD8L,EAxBP,KAAO9L,EAAI,IAAKA,EAGZ,GADA8L,EAAK1G,IAAM0G,EAAK1G,IAA2B,IAArB9D,KAAKkB,IAAIlB,KAAKmB,OAAmB,EAAJzC,KAAW,EAC1DsB,KAAKkB,IAAIlB,KAAKmB,OAAS,IACvB,OAAOqJ,EAKf,GAFAA,EAAK1G,IAAM0G,EAAK1G,IAA2B,IAArB9D,KAAKkB,IAAIlB,KAAKmB,OAAe,MAAQ,EAC3DqJ,EAAKzG,IAAMyG,EAAKzG,IAA2B,IAArB/D,KAAKkB,IAAIlB,KAAKmB,OAAgB,KAAO,EACvDnB,KAAKkB,IAAIlB,KAAKmB,OAAS,IACvB,OAAOqJ,EAgBf,GAfI9L,EAAI,EAeJsB,KAAKyE,IAAMzE,KAAKmB,IAAM,GACtB,KAAOzC,EAAI,IAAKA,EAGZ,GADA8L,EAAKzG,IAAMyG,EAAKzG,IAA2B,IAArB/D,KAAKkB,IAAIlB,KAAKmB,OAAmB,EAAJzC,EAAQ,KAAO,EAC9DsB,KAAKkB,IAAIlB,KAAKmB,OAAS,IACvB,OAAOqJ,OAGf,KAAO9L,EAAI,IAAKA,EAAG,CAEf,GAAIsB,KAAKmB,KAAOnB,KAAKyE,IACjB,MAAM4J,gBAAgBrO,MAG1B,GADAwK,EAAKzG,IAAMyG,EAAKzG,IAA2B,IAArB/D,KAAKkB,IAAIlB,KAAKmB,OAAmB,EAAJzC,EAAQ,KAAO,EAC9DsB,KAAKkB,IAAIlB,KAAKmB,OAAS,IACvB,OAAOqJ,EAInB,MAAM3K,MAAM,2BAkChB,SAAS8O,gBAAgBzN,EAAKpC,GAC1B,OAAQoC,EAAIpC,EAAM,GACVoC,EAAIpC,EAAM,IAAM,EAChBoC,EAAIpC,EAAM,IAAM,GAChBoC,EAAIpC,EAAM,IAAM,MAAQ,EA+BpC,SAAS8P,cAGL,GAAI5O,KAAKmB,IAAM,EAAInB,KAAKyE,IACpB,MAAM4J,gBAAgBrO,KAAM,GAEhC,OAAO,IAAIqF,WAASsJ,gBAAgB3O,KAAKkB,IAAKlB,KAAKmB,KAAO,GAAIwN,gBAAgB3O,KAAKkB,IAAKlB,KAAKmB,KAAO,IArLxGgN,OAAOvG,OAAS9B,QAAK8D,OACf,SAA6BhL,GAC3B,OAAQuP,OAAOvG,OAAS,SAAuBhJ,GAC3C,OAAOkH,QAAK8D,OAAOiF,SAASjQ,GACtB,IAAIwP,aAAaxP,GAEjB6P,aAAa7P,KACpBA,IAGL6P,aAENN,OAAOjO,UAAU4O,OAAShJ,QAAKzI,MAAM6C,UAAUwM,UAAuC5G,QAAKzI,MAAM6C,UAAUX,MAO3G4O,OAAOjO,UAAU0M,QACThH,MAAQ,WACL,WACuD,GAA1DA,OAAuC,IAArB5F,KAAKkB,IAAIlB,KAAKmB,QAAuB,EAAOnB,KAAKkB,IAAIlB,KAAKmB,OAAS,IAAK,OAAOyE,MACvC,GAA1DA,OAASA,OAA8B,IAArB5F,KAAKkB,IAAIlB,KAAKmB,OAAgB,KAAO,EAAOnB,KAAKkB,IAAIlB,KAAKmB,OAAS,IAAK,OAAOyE,MACvC,GAA1DA,OAASA,OAA8B,IAArB5F,KAAKkB,IAAIlB,KAAKmB,OAAe,MAAQ,EAAOnB,KAAKkB,IAAIlB,KAAKmB,OAAS,IAAK,OAAOyE,MACvC,GAA1DA,OAASA,OAA8B,IAArB5F,KAAKkB,IAAIlB,KAAKmB,OAAe,MAAQ,EAAOnB,KAAKkB,IAAIlB,KAAKmB,OAAS,IAAK,OAAOyE,MACvC,GAA1DA,OAASA,OAA+B,GAAtB5F,KAAKkB,IAAIlB,KAAKmB,OAAe,MAAQ,EAAOnB,KAAKkB,IAAIlB,KAAKmB,OAAS,IAAK,OAAOyE,MAGjG,IAAK5F,KAAKmB,KAAO,GAAKnB,KAAKyE,IAEvB,MADAzE,KAAKmB,IAAMnB,KAAKyE,IACV4J,gBAAgBrO,KAAM,IAEhC,OAAO4F,QAQfuI,OAAOjO,UAAU2M,MAAQ,WACrB,OAAuB,EAAhB7M,KAAK4M,UAOhBuB,OAAOjO,UAAU4M,OAAS,WACtB,IAAIlH,EAAQ5F,KAAK4M,SACjB,OAAOhH,IAAU,IAAc,EAARA,GAAa,GAqFxCuI,OAAOjO,UAAUgN,KAAO,WACpB,OAAyB,IAAlBlN,KAAK4M,UAchBuB,OAAOjO,UAAUiN,QAAU,WAGvB,GAAInN,KAAKmB,IAAM,EAAInB,KAAKyE,IACpB,MAAM4J,gBAAgBrO,KAAM,GAEhC,OAAO2O,gBAAgB3O,KAAKkB,IAAKlB,KAAKmB,KAAO,IAOjDgN,OAAOjO,UAAUkN,SAAW,WAGxB,GAAIpN,KAAKmB,IAAM,EAAInB,KAAKyE,IACpB,MAAM4J,gBAAgBrO,KAAM,GAEhC,OAAkD,EAA3C2O,gBAAgB3O,KAAKkB,IAAKlB,KAAKmB,KAAO,IAmCjDgN,OAAOjO,UAAUgI,MAAQ,WAGrB,GAAIlI,KAAKmB,IAAM,EAAInB,KAAKyE,IACpB,MAAM4J,gBAAgBrO,KAAM,GAEhC,IAAI4F,EAAQE,QAAKoC,MAAMzG,YAAYzB,KAAKkB,IAAKlB,KAAKmB,KAElD,OADAnB,KAAKmB,KAAO,EACLyE,GAQXuI,OAAOjO,UAAUqN,OAAS,WAGtB,GAAIvN,KAAKmB,IAAM,EAAInB,KAAKyE,IACpB,MAAM4J,gBAAgBrO,KAAM,GAEhC,IAAI4F,EAAQE,QAAKoC,MAAM1E,aAAaxD,KAAKkB,IAAKlB,KAAKmB,KAEnD,OADAnB,KAAKmB,KAAO,EACLyE,GAOXuI,OAAOjO,UAAUoL,MAAQ,WACrB,IAAI/N,EAASyC,KAAK4M,SACd/N,EAASmB,KAAKmB,IACdrC,EAASkB,KAAKmB,IAAM5D,EAGxB,GAAIuB,EAAMkB,KAAKyE,IACX,MAAM4J,gBAAgBrO,KAAMzC,GAGhC,OADAyC,KAAKmB,KAAO5D,EACRF,MAAMsM,QAAQ3J,KAAKkB,KACZlB,KAAKkB,IAAI3B,MAAMV,EAAOC,GAC1BD,IAAUC,EACX,IAAIkB,KAAKkB,IAAI2G,YAAY,GACzB7H,KAAK8O,OAAO1J,KAAKpF,KAAKkB,IAAKrC,EAAOC,IAO5CqP,OAAOjO,UAAUhC,OAAS,WACtB,IAAIoN,EAAQtL,KAAKsL,QACjB,OAAO9G,OAAKE,KAAK4G,EAAO,EAAGA,EAAM/N,SAQrC4Q,OAAOjO,UAAU6O,KAAO,SAAcxR,GAClC,GAAsB,iBAAXA,EAAqB,CAE5B,GAAIyC,KAAKmB,IAAM5D,EAASyC,KAAKyE,IACzB,MAAM4J,gBAAgBrO,KAAMzC,GAChCyC,KAAKmB,KAAO5D,OAEZ,GAEI,GAAIyC,KAAKmB,KAAOnB,KAAKyE,IACjB,MAAM4J,gBAAgBrO,YACE,IAAvBA,KAAKkB,IAAIlB,KAAKmB,QAE3B,OAAOnB,MAQXmO,OAAOjO,UAAU8O,SAAW,SAASC,GACjC,OAAQA,GACJ,KAAK,EACDjP,KAAK+O,OACL,MACJ,KAAK,EACD/O,KAAK+O,KAAK,GACV,MACJ,KAAK,EACD/O,KAAK+O,KAAK/O,KAAK4M,UACf,MACJ,KAAK,EACD,KAA0C,IAAlCqC,EAA2B,EAAhBjP,KAAK4M,WACpB5M,KAAKgP,SAASC,GAElB,MACJ,KAAK,EACDjP,KAAK+O,KAAK,GACV,MAGJ,QACI,MAAMlP,MAAM,qBAAuBoP,EAAW,cAAgBjP,KAAKmB,KAE3E,OAAOnB,MAGXmO,OAAO3C,WAAa,SAAS0D,GACzBd,aAAec,EAEf,IAAIhS,EAAK4I,QAAKE,KAAO,SAAsC,WAC3DF,QAAKiB,MAAMoH,OAAOjO,WAEd8M,MAAO,WACH,OAAO0B,eAAetJ,KAAKpF,MAAM9C,IAAI,IAGzC6P,OAAQ,WACJ,OAAO2B,eAAetJ,KAAKpF,MAAM9C,IAAI,IAGzC+P,OAAQ,WACJ,OAAOyB,eAAetJ,KAAKpF,MAAMyF,WAAWvI,IAAI,IAGpDmQ,QAAS,WACL,OAAOuB,YAAYxJ,KAAKpF,MAAM9C,IAAI,IAGtCoQ,SAAU,WACN,OAAOsB,YAAYxJ,KAAKpF,MAAM9C,IAAI,OC/Y9C,kBAAiBkR,eAejB,SAASA,eAAaxP,GAClBuP,OAAO/I,KAAKpF,KAAMpB,IAZrBwP,eAAalO,UAAYmE,OAAOuD,OAAOuG,OAAOjO,YAAY2H,YAAcuG,eAsBrEtI,QAAK8D,SACLwE,eAAalO,UAAU4O,OAAShJ,QAAK8D,OAAO1J,UAAUX,sBAK7CW,UAAUhC,OAAS,WAC5B,IAAIuG,EAAMzE,KAAK4M,SACf,OAAO5M,KAAKkB,IAAIiO,UAAUnP,KAAKmB,IAAKnB,KAAKmB,IAAM7C,KAAK8Q,IAAIpP,KAAKmB,IAAMsD,EAAKzE,KAAKyE,OClCjF,YAAiB4K,QAwCjB,SAASA,QAAQC,EAASC,EAAkBC,GAExC,GAAuB,mBAAZF,EACP,MAAMG,UAAU,8BAEpB3J,QAAK/F,aAAaqF,KAAKpF,MAMvBA,KAAKsP,QAAUA,EAMftP,KAAKuP,iBAAmBhJ,QAAQgJ,GAMhCvP,KAAKwP,kBAAoBjJ,QAAQiJ,IA1DpCH,QAAQnP,UAAYmE,OAAOuD,OAAO9B,QAAK/F,aAAaG,YAAY2H,YAAcwH,QAwE/EA,QAAQnP,UAAUwP,QAAU,SAASA,EAAQC,EAAQC,EAAaC,EAAcC,EAASC,GAErF,IAAKD,EACD,MAAML,UAAU,6BAEpB,IAAI/G,EAAO1I,KACX,IAAK+P,EACD,OAAOjK,QAAK7I,UAAUyS,EAAShH,EAAMiH,EAAQC,EAAaC,EAAcC,GAE5E,GAAKpH,EAAK4G,QAKV,IACI,OAAO5G,EAAK4G,QACRK,EACAC,EAAYlH,EAAK6G,iBAAmB,kBAAoB,UAAUO,GAASjC,SAC3E,SAAqB/P,EAAKkS,GAEtB,GAAIlS,EAEA,OADA4K,EAAKlI,KAAK,QAAS1C,EAAK6R,GACjBI,EAASjS,GAGpB,GAAiB,OAAbkS,EAAJ,CAKA,KAAMA,aAAoBH,GACtB,IACIG,EAAWH,EAAanH,EAAK8G,kBAAoB,kBAAoB,UAAUQ,GACjF,MAAOlS,GAEL,OADA4K,EAAKlI,KAAK,QAAS1C,EAAK6R,GACjBI,EAASjS,GAKxB,OADA4K,EAAKlI,KAAK,OAAQwP,EAAUL,GACrBI,EAAS,KAAMC,GAdlBtH,EAAK5J,KAAqB,KAiBxC,MAAOhB,GAGL,OAFA4K,EAAKlI,KAAK,QAAS1C,EAAK6R,QACxBM,WAAW,WAAaF,EAASjS,IAAS,QAnC1CmS,WAAW,WAAaF,EAASlQ,MAAM,mBAAsB,IA6CrEwP,QAAQnP,UAAUpB,IAAM,SAAaoR,GAOjC,OANIlQ,KAAKsP,UACAY,GACDlQ,KAAKsP,QAAQ,KAAM,KAAM,MAC7BtP,KAAKsP,QAAU,KACftP,KAAKQ,KAAK,OAAOH,OAEdL,mDCtID/B,EA6BNoR,QAAUtH,mEClCd,IAAIoI,EAAWlS,EA2Bf,SAASmS,IACLD,EAAShC,OAAO3C,WAAW2E,EAAS/B,cACpC+B,EAASrK,KAAK0F,aArBlB2E,EAASE,MAAQ,UAGjBF,EAASxE,OAAe5D,OACxBoI,EAASvE,aAAe5D,cACxBmI,EAAShC,OAAelG,OACxBkI,EAAS/B,aAAejG,cAGxBgI,EAASrK,KAAesC,QACxB+H,EAASG,IAAejI,MACxB8H,EAASI,MAAejI,MACxB6H,EAASC,UAAeA,EAaxBD,EAASxE,OAAOH,WAAW2E,EAASvE,cACpCwE,gBChCiBrI,2FCEbyI,QAAUC,UAAUtC,OAAQuC,MAAQD,UAAU3K,KAE9C6K,MAAQF,UAAUF,MAAe,UAAME,UAAUF,MAAe,YA2CxDK,WAAiBC,OAvCrBC,WAFRH,MAAMG,YAEEA,cAEJA,WAAWC,IAAM,WAEb,SAASA,EAAI5S,GACT,GAAIA,EACA,IAAK,IAAI6S,EAAK3M,OAAOC,KAAKnG,GAAIO,EAAI,EAAGA,EAAIsS,EAAGzT,SAAUmB,EAClC,MAAZP,EAAE6S,EAAGtS,MACLsB,KAAKgR,EAAGtS,IAAMP,EAAE6S,EAAGtS,KA2BnC,OAxBAqS,EAAI7Q,UAAU+Q,QAAU,GACxBF,EAAI7Q,UAAU0F,MAAQ8K,MAAM1G,cAE5B+G,EAAItR,OAAS,SAAgByR,EAAGC,GACtBD,aAAaV,UACfU,EAAIV,QAAQ5I,OAAOsJ,IAEvB,IADA,IAAIxR,OAAUE,IAANuR,EAAkBD,EAAEzM,IAAMyM,EAAE/P,IAAMgQ,EAAGC,EAAI,IAAIT,MAAMG,WAAWC,IAC/DG,EAAE/P,IAAMzB,GAAG,CACd,IAAIX,EAAImS,EAAEtE,SACV,OAAQ7N,IAAM,GACd,KAAK,EACDqS,EAAEH,QAAUC,EAAEhT,SACd,MACJ,KAAK,EACDkT,EAAExL,MAAQsL,EAAE5F,QACZ,MACJ,QACI4F,EAAElC,SAAa,EAAJjQ,IAInB,OAAOqS,GAGJL,EAjCM,GAoCjBD,WAAWO,UACHT,eAAiBC,OAASxM,OAAOuD,OAAOgJ,aACrCA,WAAW,GAAK,cAAgB,EACvCC,OAAOD,WAAW,GAAK,YAAc,EACrCC,OAAOD,WAAW,GAAK,aAAe,EACtCC,OAAOD,WAAW,GAAK,YAAc,EACrCC,OAAOD,WAAW,GAAK,YAAc,EACrCC,OAAOD,WAAW,GAAK,YAAc,EACrCC,OAAOD,WAAW,GAAK,WAAa,EACpCC,OAAOD,WAAW,GAAK,aAAe,EACtCC,OAAOD,WAAW,GAAK,gBAAkB,EACzCC,OAAOD,WAAW,GAAK,YAAc,EACrCC,OAAOD,WAAW,IAAM,WAAa,GACrCC,OAAOD,WAAW,IAAM,YAAc,GACtCC,OAAOD,WAAW,IAAM,aAAe,GACvCC,OAAOD,WAAW,IAAM,aAAe,GACvCC,OAAOD,WAAW,IAAM,eAAiB,GACzCC,OAAOD,WAAW,KAAO,gBAAkB,IAC3CC,OAAOD,WAAW,KAAO,iBAAmB,IAC5CC,OAAOD,WAAW,KAAO,gBAAkB,IAC3CC,OAAOD,WAAW,KAAO,gBAAkB,IAC3CC,OAAOD,WAAW,KAAO,gBAAkB,IAC3CC,OAAOD,WAAW,KAAO,eAAiB,IAC1CC,OAAOD,WAAW,KAAO,iBAAmB,IAC5CC,OAAOD,WAAW,KAAO,oBAAsB,IAC/CC,OAAOD,WAAW,KAAO,gBAAkB,IAC3CC,OAAOD,WAAW,KAAO,eAAiB,IAC1CC,OAAOD,WAAW,KAAO,gBAAkB,IAC3CC,OAAOD,WAAW,KAAO,iBAAmB,IAC5CC,OAAOD,WAAW,KAAO,iBAAmB,IAC5CC,OAAOD,WAAW,KAAO,mBAAqB,IACvCC,QAGXC,WAAWQ,YAAc,WAErB,SAASA,EAAYnT,GAEjB,GADA6B,KAAKuR,OACDpT,EACA,IAAK,IAAI6S,EAAK3M,OAAOC,KAAKnG,GAAIO,EAAI,EAAGA,EAAIsS,EAAGzT,SAAUmB,EAClC,MAAZP,EAAE6S,EAAGtS,MACLsB,KAAKgR,EAAGtS,IAAMP,EAAE6S,EAAGtS,KAiEnC,OA9DA4S,EAAYpR,UAAUqR,IAAMb,MAAM/H,WAClC2I,EAAYpR,UAAUsR,aAAc,EAEpCF,EAAY7R,OAAS,SAAgByR,EAAGC,GAC9BD,aAAaV,UACfU,EAAIV,QAAQ5I,OAAOsJ,IAEvB,IADA,IAAIxR,OAAUE,IAANuR,EAAkBD,EAAEzM,IAAMyM,EAAE/P,IAAMgQ,EAAGC,EAAI,IAAIT,MAAMG,WAAWQ,YAC/DJ,EAAE/P,IAAMzB,GAAG,CACd,IAAIX,EAAImS,EAAEtE,SACV,OAAQ7N,IAAM,GACd,KAAK,EACKqS,EAAEG,KAAOH,EAAEG,IAAIhU,SACjB6T,EAAEG,QACNH,EAAEG,IAAInS,KAAKuR,MAAMG,WAAWQ,YAAYG,IAAIhS,OAAOyR,EAAGA,EAAEtE,WACxD,MACJ,KAAK,EACDwE,EAAEI,YAAcN,EAAEhE,OAClB,MACJ,QACIgE,EAAElC,SAAa,EAAJjQ,IAInB,OAAOqS,GAGXE,EAAYG,IAAM,WAEd,SAASA,EAAItT,GACT,GAAIA,EACA,IAAK,IAAI6S,EAAK3M,OAAOC,KAAKnG,GAAIO,EAAI,EAAGA,EAAIsS,EAAGzT,SAAUmB,EAClC,MAAZP,EAAE6S,EAAGtS,MACLsB,KAAKgR,EAAGtS,IAAMP,EAAE6S,EAAGtS,KA2BnC,OAxBA+S,EAAIvR,UAAU8E,KAAO0L,MAAM1K,KAAO0K,MAAM1K,KAAKyE,SAAS,EAAE,GAAE,GAAS,EACnEgH,EAAIvR,UAAUkH,KAAO,GAErBqK,EAAIhS,OAAS,SAAgByR,EAAGC,GACtBD,aAAaV,UACfU,EAAIV,QAAQ5I,OAAOsJ,IAEvB,IADA,IAAIxR,OAAUE,IAANuR,EAAkBD,EAAEzM,IAAMyM,EAAE/P,IAAMgQ,EAAGC,EAAI,IAAIT,MAAMG,WAAWQ,YAAYG,IAC3EP,EAAE/P,IAAMzB,GAAG,CACd,IAAIX,EAAImS,EAAEtE,SACV,OAAQ7N,IAAM,GACd,KAAK,EACDqS,EAAEpM,KAAOkM,EAAElE,QACX,MACJ,KAAK,EACDoE,EAAEhK,KAAO8J,EAAEhT,SACX,MACJ,QACIgT,EAAElC,SAAa,EAAJjQ,IAInB,OAAOqS,GAGJK,EAjCO,GAoCXH,EAxEc,GA2EzBR,WAAWY,OAAS,WAEhB,SAASA,EAAOvT,GAUZ,GATA6B,KAAK2R,YACL3R,KAAK4R,aACL5R,KAAK6R,UACL7R,KAAK8R,aACL9R,KAAK+R,eACL/R,KAAKgS,YACLhS,KAAKiS,WACLjS,KAAKkS,aACLlS,KAAKmS,aACDhU,EACA,IAAK,IAAI6S,EAAK3M,OAAOC,KAAKnG,GAAIO,EAAI,EAAGA,EAAIsS,EAAGzT,SAAUmB,EAClC,MAAZP,EAAE6S,EAAGtS,MACLsB,KAAKgR,EAAGtS,IAAMP,EAAE6S,EAAGtS,KAiInC,OA9HAgT,EAAOxR,UAAUkS,MAAQ,EACzBV,EAAOxR,UAAUmS,YAAc,KAC/BX,EAAOxR,UAAUoS,cAAgB,EACjCZ,EAAOxR,UAAUqS,cAAgB7B,MAAM1G,cACvC0H,EAAOxR,UAAUyR,SAAWjB,MAAM/H,WAClC+I,EAAOxR,UAAU0R,UAAYlB,MAAM/H,WACnC+I,EAAOxR,UAAU2R,OAASnB,MAAM/H,WAChC+I,EAAOxR,UAAU4R,UAAYpB,MAAM/H,WACnC+I,EAAOxR,UAAU6R,YAAcrB,MAAM/H,WACrC+I,EAAOxR,UAAU8R,SAAWtB,MAAM/H,WAClC+I,EAAOxR,UAAU+R,QAAUvB,MAAM/H,WACjC+I,EAAOxR,UAAUgS,UAAYxB,MAAM/H,WACnC+I,EAAOxR,UAAUiS,UAAYzB,MAAM/H,WAEnC+I,EAAOjS,OAAS,SAAgByR,EAAGC,GACzBD,aAAaV,UACfU,EAAIV,QAAQ5I,OAAOsJ,IAEvB,IADA,IAAIxR,OAAUE,IAANuR,EAAkBD,EAAEzM,IAAMyM,EAAE/P,IAAMgQ,EAAGC,EAAI,IAAIT,MAAMG,WAAWY,OAC/DR,EAAE/P,IAAMzB,GAAG,CACd,IAAIX,EAAImS,EAAEtE,SACV,OAAQ7N,IAAM,GACd,KAAK,EACDqS,EAAEgB,MAAQlB,EAAErE,QACZ,MACJ,KAAK,EACDuE,EAAEiB,YAAc1B,MAAMG,WAAWQ,YAAY7R,OAAOyR,EAAGA,EAAEtE,UACzD,MACJ,KAAK,EACDwE,EAAEkB,cAAgBpB,EAAErE,QACpB,MACJ,KAAK,EACDuE,EAAEmB,cAAgBrB,EAAE5F,QACpB,MACJ,KAAK,EAGD,GAFM8F,EAAEO,UAAYP,EAAEO,SAASpU,SAC3B6T,EAAEO,aACU,IAAP,EAAJ5S,GAED,IADA,IAAI8F,EAAKqM,EAAEtE,SAAWsE,EAAE/P,IACjB+P,EAAE/P,IAAM0D,GACXuM,EAAEO,SAASvS,KAAK8R,EAAEhJ,cAEtBkJ,EAAEO,SAASvS,KAAK8R,EAAEhJ,SACtB,MACJ,KAAK,EAGD,GAFMkJ,EAAEQ,WAAaR,EAAEQ,UAAUrU,SAC7B6T,EAAEQ,cACU,IAAP,EAAJ7S,GAED,IADI8F,EAAKqM,EAAEtE,SAAWsE,EAAE/P,IACjB+P,EAAE/P,IAAM0D,GACXuM,EAAEQ,UAAUxS,KAAK8R,EAAE3D,eAEvB6D,EAAEQ,UAAUxS,KAAK8R,EAAE3D,UACvB,MACJ,KAAK,EAGD,GAFM6D,EAAES,QAAUT,EAAES,OAAOtU,SACvB6T,EAAES,WACU,IAAP,EAAJ9S,GAED,IADI8F,EAAKqM,EAAEtE,SAAWsE,EAAE/P,IACjB+P,EAAE/P,IAAM0D,GACXuM,EAAES,OAAOzS,KAAK8R,EAAErE,cAEpBuE,EAAES,OAAOzS,KAAK8R,EAAErE,SACpB,MACJ,KAAK,EACKuE,EAAEU,WAAaV,EAAEU,UAAUvU,SAC7B6T,EAAEU,cACNV,EAAEU,UAAU1S,KAAK8R,EAAE5F,SACnB,MACJ,KAAK,EAGD,GAFM8F,EAAEW,aAAeX,EAAEW,YAAYxU,SACjC6T,EAAEW,gBACU,IAAP,EAAJhT,GAED,IADI8F,EAAKqM,EAAEtE,SAAWsE,EAAE/P,IACjB+P,EAAE/P,IAAM0D,GACXuM,EAAEW,YAAY3S,KAAK8R,EAAEhJ,cAEzBkJ,EAAEW,YAAY3S,KAAK8R,EAAEhJ,SACzB,MACJ,KAAK,GAGD,GAFMkJ,EAAEY,UAAYZ,EAAEY,SAASzU,SAC3B6T,EAAEY,aACU,IAAP,EAAJjT,GAED,IADI8F,EAAKqM,EAAEtE,SAAWsE,EAAE/P,IACjB+P,EAAE/P,IAAM0D,GACXuM,EAAEY,SAAS5S,KAAK8R,EAAElE,cAEtBoE,EAAEY,SAAS5S,KAAK8R,EAAElE,SACtB,MACJ,KAAK,GAGD,GAFMoE,EAAEa,SAAWb,EAAEa,QAAQ1U,SACzB6T,EAAEa,YACU,IAAP,EAAJlT,GAED,IADI8F,EAAKqM,EAAEtE,SAAWsE,EAAE/P,IACjB+P,EAAE/P,IAAM0D,GACXuM,EAAEa,QAAQ7S,KAAK8R,EAAEhE,aAErBkE,EAAEa,QAAQ7S,KAAK8R,EAAEhE,QACrB,MACJ,KAAK,GAGD,GAFMkE,EAAEc,WAAad,EAAEc,UAAU3U,SAC7B6T,EAAEc,cACU,IAAP,EAAJnT,GAED,IADI8F,EAAKqM,EAAEtE,SAAWsE,EAAE/P,IACjB+P,EAAE/P,IAAM0D,GACXuM,EAAEc,UAAU9S,KAAK8R,EAAEtE,eAEvBwE,EAAEc,UAAU9S,KAAK8R,EAAEtE,UACvB,MACJ,KAAK,GAGD,GAFMwE,EAAEe,WAAaf,EAAEe,UAAU5U,SAC7B6T,EAAEe,cACU,IAAP,EAAJpT,GAED,IADI8F,EAAKqM,EAAEtE,SAAWsE,EAAE/P,IACjB+P,EAAE/P,IAAM0D,GACXuM,EAAEe,UAAU/S,KAAK8R,EAAEnE,eAEvBqE,EAAEe,UAAU/S,KAAK8R,EAAEnE,UACvB,MACJ,QACImE,EAAElC,SAAa,EAAJjQ,IAInB,OAAOqS,GAGJM,EAhJS,GAmJpBZ,WAAW0B,UAAY,WAEnB,SAASA,EAAUrU,GACf,GAAIA,EACA,IAAK,IAAI6S,EAAK3M,OAAOC,KAAKnG,GAAIO,EAAI,EAAGA,EAAIsS,EAAGzT,SAAUmB,EAClC,MAAZP,EAAE6S,EAAGtS,MACLsB,KAAKgR,EAAGtS,IAAMP,EAAE6S,EAAGtS,KAcnC,IAAI+T,EA4JJ,OAvKAD,EAAUtS,UAAUwS,KAAO,KAC3BF,EAAUtS,UAAUyS,EAAIjC,MAAM1G,cAC9BwI,EAAUtS,UAAUxB,EAAIgS,MAAM1K,KAAO0K,MAAM1K,KAAKyE,SAAS,EAAE,GAAE,GAAS,EACtE+H,EAAUtS,UAAU0S,EAAI,EACxBJ,EAAUtS,UAAUf,GAAI,EACxBqT,EAAUtS,UAAU2S,KAAO,EAC3BL,EAAUtS,UAAU4S,MAAQ,KAC5BN,EAAUtS,UAAU6S,OAAS,KAC7BP,EAAUtS,UAAU8S,YAAc,GAClCR,EAAUtS,UAAU+S,KAAO,KAI3B5O,OAAOmD,eAAegL,EAAUtS,UAAW,SACvCuH,IAAKiJ,MAAM3F,YAAY0H,GAAgB,OAAQ,IAAK,IAAK,IAAK,IAAK,OAAQ,QAAS,SAAU,cAAe,SAC7GhF,IAAKiD,MAAMxF,YAAYuH,KAG3BD,EAAU/S,OAAS,SAAgByR,EAAGC,GAC5BD,aAAaV,UACfU,EAAIV,QAAQ5I,OAAOsJ,IAEvB,IADA,IAAIxR,OAAUE,IAANuR,EAAkBD,EAAEzM,IAAMyM,EAAE/P,IAAMgQ,EAAGC,EAAI,IAAIT,MAAMG,WAAW0B,UAC/DtB,EAAE/P,IAAMzB,GAAG,CACd,IAAIX,EAAImS,EAAEtE,SACV,OAAQ7N,IAAM,GACd,KAAK,EACDqS,EAAEsB,KAAO/B,MAAMG,WAAW0B,UAAUU,UAAUzT,OAAOyR,EAAGA,EAAEtE,UAC1D,MACJ,KAAK,EACDwE,EAAEuB,EAAIzB,EAAE5F,QACR,MACJ,KAAK,EACD8F,EAAE1S,EAAIwS,EAAElE,QACR,MACJ,KAAK,EACDoE,EAAEwB,EAAI1B,EAAEhJ,QACR,MACJ,KAAK,EACDkJ,EAAEjS,EAAI+R,EAAEhE,OACR,MACJ,KAAK,EACDkE,EAAEyB,KAAO3B,EAAErE,QACX,MACJ,KAAK,EACDuE,EAAE0B,MAAQnC,MAAMG,WAAWQ,YAAY7R,OAAOyR,EAAGA,EAAEtE,UACnD,MACJ,KAAK,EACDwE,EAAE2B,OAASpC,MAAMG,WAAWY,OAAOjS,OAAOyR,EAAGA,EAAEtE,UAC/C,MACJ,KAAK,EACDwE,EAAE4B,YAAc9B,EAAEhT,SAClB,MACJ,KAAK,GACDkT,EAAE6B,KAAOtC,MAAMG,WAAWqC,aAAa1T,OAAOyR,EAAGA,EAAEtE,UACnD,MACJ,QACIsE,EAAElC,SAAa,EAAJjQ,IAInB,OAAOqS,GAGXoB,EAAUU,UAAY,WAElB,SAASA,EAAU/U,GASf,GARA6B,KAAK2S,KACL3S,KAAKtB,KACLsB,KAAK4S,KACL5S,KAAKb,KACLa,KAAK6S,QACL7S,KAAK8S,SACL9S,KAAK+S,UACL/S,KAAKiT,QACD9U,EACA,IAAK,IAAI6S,EAAK3M,OAAOC,KAAKnG,GAAIO,EAAI,EAAGA,EAAIsS,EAAGzT,SAAUmB,EAClC,MAAZP,EAAE6S,EAAGtS,MACLsB,KAAKgR,EAAGtS,IAAMP,EAAE6S,EAAGtS,KAuFnC,OApFAwU,EAAUhT,UAAUyS,EAAIjC,MAAM/H,WAC9BuK,EAAUhT,UAAUxB,EAAIgS,MAAM/H,WAC9BuK,EAAUhT,UAAU0S,EAAIlC,MAAM/H,WAC9BuK,EAAUhT,UAAUf,EAAIuR,MAAM/H,WAC9BuK,EAAUhT,UAAU2S,KAAOnC,MAAM/H,WACjCuK,EAAUhT,UAAU4S,MAAQpC,MAAM/H,WAClCuK,EAAUhT,UAAU6S,OAASrC,MAAM/H,WACnCuK,EAAUhT,UAAU+S,KAAOvC,MAAM/H,WAEjCuK,EAAUzT,OAAS,SAAgByR,EAAGC,GAC5BD,aAAaV,UACfU,EAAIV,QAAQ5I,OAAOsJ,IAEvB,IADA,IAAIxR,OAAUE,IAANuR,EAAkBD,EAAEzM,IAAMyM,EAAE/P,IAAMgQ,EAAGC,EAAI,IAAIT,MAAMG,WAAW0B,UAAUU,UACzEhC,EAAE/P,IAAMzB,GAAG,CACd,IAAIX,EAAImS,EAAEtE,SACV,OAAQ7N,IAAM,GACd,KAAK,EACKqS,EAAEuB,GAAKvB,EAAEuB,EAAEpV,SACb6T,EAAEuB,MACNvB,EAAEuB,EAAEvT,KAAK8R,EAAE5F,SACX,MACJ,KAAK,EAGD,GAFM8F,EAAE1S,GAAK0S,EAAE1S,EAAEnB,SACb6T,EAAE1S,MACU,IAAP,EAAJK,GAED,IADA,IAAI8F,EAAKqM,EAAEtE,SAAWsE,EAAE/P,IACjB+P,EAAE/P,IAAM0D,GACXuM,EAAE1S,EAAEU,KAAK8R,EAAElE,cAEfoE,EAAE1S,EAAEU,KAAK8R,EAAElE,SACf,MACJ,KAAK,EAGD,GAFMoE,EAAEwB,GAAKxB,EAAEwB,EAAErV,SACb6T,EAAEwB,MACU,IAAP,EAAJ7T,GAED,IADI8F,EAAKqM,EAAEtE,SAAWsE,EAAE/P,IACjB+P,EAAE/P,IAAM0D,GACXuM,EAAEwB,EAAExT,KAAK8R,EAAEhJ,cAEfkJ,EAAEwB,EAAExT,KAAK8R,EAAEhJ,SACf,MACJ,KAAK,EAGD,GAFMkJ,EAAEjS,GAAKiS,EAAEjS,EAAE5B,SACb6T,EAAEjS,MACU,IAAP,EAAJJ,GAED,IADI8F,EAAKqM,EAAEtE,SAAWsE,EAAE/P,IACjB+P,EAAE/P,IAAM0D,GACXuM,EAAEjS,EAAEC,KAAK8R,EAAEhE,aAEfkE,EAAEjS,EAAEC,KAAK8R,EAAEhE,QACf,MACJ,KAAK,EAGD,GAFMkE,EAAEyB,MAAQzB,EAAEyB,KAAKtV,SACnB6T,EAAEyB,SACU,IAAP,EAAJ9T,GAED,IADI8F,EAAKqM,EAAEtE,SAAWsE,EAAE/P,IACjB+P,EAAE/P,IAAM0D,GACXuM,EAAEyB,KAAKzT,KAAK8R,EAAErE,cAElBuE,EAAEyB,KAAKzT,KAAK8R,EAAErE,SAClB,MACJ,KAAK,EACKuE,EAAE0B,OAAS1B,EAAE0B,MAAMvV,SACrB6T,EAAE0B,UACN1B,EAAE0B,MAAM1T,KAAKuR,MAAMG,WAAWQ,YAAY7R,OAAOyR,EAAGA,EAAEtE,WACtD,MACJ,KAAK,EACKwE,EAAE2B,QAAU3B,EAAE2B,OAAOxV,SACvB6T,EAAE2B,WACN3B,EAAE2B,OAAO3T,KAAKuR,MAAMG,WAAWY,OAAOjS,OAAOyR,EAAGA,EAAEtE,WAClD,MACJ,KAAK,EACKwE,EAAE6B,MAAQ7B,EAAE6B,KAAK1V,SACnB6T,EAAE6B,SACN7B,EAAE6B,KAAK7T,KAAKuR,MAAMG,WAAWqC,aAAa1T,OAAOyR,EAAGA,EAAEtE,WACtD,MACJ,QACIsE,EAAElC,SAAa,EAAJjQ,IAInB,OAAOqS,GAGJ8B,EArGW,GAwGfV,EAhLY,GAmLvB1B,WAAWqC,aAAe,WAEtB,SAASA,EAAahV,GAElB,GADA6B,KAAKoT,QACDjV,EACA,IAAK,IAAI6S,EAAK3M,OAAOC,KAAKnG,GAAIO,EAAI,EAAGA,EAAIsS,EAAGzT,SAAUmB,EAClC,MAAZP,EAAE6S,EAAGtS,MACLsB,KAAKgR,EAAGtS,IAAMP,EAAE6S,EAAGtS,KAgCnC,OA7BAyU,EAAajT,UAAUkH,KAAO,GAC9B+L,EAAajT,UAAUkT,KAAO1C,MAAM7H,YAEpCsK,EAAa1T,OAAS,SAAgByR,EAAGC,GAC/BD,aAAaV,UACfU,EAAIV,QAAQ5I,OAAOsJ,IAEvB,IADA,IAAsFmC,EAAlF3T,OAAUE,IAANuR,EAAkBD,EAAEzM,IAAMyM,EAAE/P,IAAMgQ,EAAGC,EAAI,IAAIT,MAAMG,WAAWqC,aAC/DjC,EAAE/P,IAAMzB,GAAG,CACd,IAAIX,EAAImS,EAAEtE,SACV,OAAQ7N,IAAM,GACd,KAAK,EACDqS,EAAEhK,KAAO8J,EAAEhT,SACX,MACJ,KAAK,EACDgT,EAAEnC,OAAO5N,MACLiQ,EAAEgC,OAAS1C,MAAM7H,cACjBuI,EAAEgC,SACNC,EAAInC,EAAEhT,SACNgT,EAAE/P,MACFiQ,EAAEgC,KAAKC,GAAK1C,MAAMG,WAAW0B,UAAU/S,OAAOyR,EAAGA,EAAEtE,UACnD,MACJ,QACIsE,EAAElC,SAAa,EAAJjQ,IAInB,OAAOqS,GAGJ+B,EAvCe,GA0C1BrC,WAAWwC,QAAU,WAEjB,SAASA,EAAQnV,GAGb,GAFA6B,KAAKuT,SACLvT,KAAKoT,QACDjV,EACA,IAAK,IAAI6S,EAAK3M,OAAOC,KAAKnG,GAAIO,EAAI,EAAGA,EAAIsS,EAAGzT,SAAUmB,EAClC,MAAZP,EAAE6S,EAAGtS,MACLsB,KAAKgR,EAAGtS,IAAMP,EAAE6S,EAAGtS,KA8CnC,OA3CA4U,EAAQpT,UAAUkH,KAAO,GACzBkM,EAAQpT,UAAUsT,GAAK,GACvBF,EAAQpT,UAAUqT,MAAQ7C,MAAM/H,WAChC2K,EAAQpT,UAAUuT,OAAS,GAC3BH,EAAQpT,UAAUkT,KAAO1C,MAAM7H,YAE/ByK,EAAQ7T,OAAS,SAAgByR,EAAGC,GAC1BD,aAAaV,UACfU,EAAIV,QAAQ5I,OAAOsJ,IAEvB,IADA,IAAiFmC,EAA7E3T,OAAUE,IAANuR,EAAkBD,EAAEzM,IAAMyM,EAAE/P,IAAMgQ,EAAGC,EAAI,IAAIT,MAAMG,WAAWwC,QAC/DpC,EAAE/P,IAAMzB,GAAG,CACd,IAAIX,EAAImS,EAAEtE,SACV,OAAQ7N,IAAM,GACd,KAAK,EACDqS,EAAEhK,KAAO8J,EAAEhT,SACX,MACJ,KAAK,EACDkT,EAAEoC,GAAKtC,EAAEhT,SACT,MACJ,KAAK,EACKkT,EAAEmC,OAASnC,EAAEmC,MAAMhW,SACrB6T,EAAEmC,UACNnC,EAAEmC,MAAMnU,KAAK8R,EAAEhT,UACf,MACJ,KAAK,EACDkT,EAAEqC,OAASvC,EAAEhT,SACb,MACJ,KAAK,EACDgT,EAAEnC,OAAO5N,MACLiQ,EAAEgC,OAAS1C,MAAM7H,cACjBuI,EAAEgC,SACNC,EAAInC,EAAEhT,SACNgT,EAAE/P,MACFiQ,EAAEgC,KAAKC,GAAK1C,MAAMG,WAAW0B,UAAU/S,OAAOyR,EAAGA,EAAEtE,UACnD,MACJ,QACIsE,EAAElC,SAAa,EAAJjQ,IAInB,OAAOqS,GAGJkC,EAtDU,GAyDrBxC,WAAW4C,WAAa,WAEpB,SAASA,EAAWvV,GAEhB,GADA6B,KAAK2T,gBACDxV,EACA,IAAK,IAAI6S,EAAK3M,OAAOC,KAAKnG,GAAIO,EAAI,EAAGA,EAAIsS,EAAGzT,SAAUmB,EAClC,MAAZP,EAAE6S,EAAGtS,MACLsB,KAAKgR,EAAGtS,IAAMP,EAAE6S,EAAGtS,KAsCnC,OAnCAgV,EAAWxT,UAAU0T,SAAW,EAChCF,EAAWxT,UAAU2T,YAAc,EACnCH,EAAWxT,UAAUyT,aAAejD,MAAM/H,WAE1C+K,EAAWjU,OAAS,SAAgByR,EAAGC,GAC7BD,aAAaV,UACfU,EAAIV,QAAQ5I,OAAOsJ,IAEvB,IADA,IAAIxR,OAAUE,IAANuR,EAAkBD,EAAEzM,IAAMyM,EAAE/P,IAAMgQ,EAAGC,EAAI,IAAIT,MAAMG,WAAW4C,WAC/DxC,EAAE/P,IAAMzB,GAAG,CACd,IAAIX,EAAImS,EAAEtE,SACV,OAAQ7N,IAAM,GACd,KAAK,EACDqS,EAAEwC,SAAW1C,EAAErE,QACf,MACJ,KAAK,EACDuE,EAAEyC,YAAc3C,EAAErE,QAClB,MACJ,KAAK,EAGD,GAFMuE,EAAEuC,cAAgBvC,EAAEuC,aAAapW,SACnC6T,EAAEuC,iBACU,IAAP,EAAJ5U,GAED,IADA,IAAI8F,EAAKqM,EAAEtE,SAAWsE,EAAE/P,IACjB+P,EAAE/P,IAAM0D,GACXuM,EAAEuC,aAAavU,KAAK8R,EAAErE,cAE1BuE,EAAEuC,aAAavU,KAAK8R,EAAErE,SAC1B,MACJ,QACIqE,EAAElC,SAAa,EAAJjQ,IAInB,OAAOqS,GAGJsC,EA7Ca,GAgDxB5C,WAAWgD,SAAW,WAElB,SAASA,EAAS3V,GAEd,GADA6B,KAAKiJ,QACD9K,EACA,IAAK,IAAI6S,EAAK3M,OAAOC,KAAKnG,GAAIO,EAAI,EAAGA,EAAIsS,EAAGzT,SAAUmB,EAClC,MAAZP,EAAE6S,EAAGtS,MACLsB,KAAKgR,EAAGtS,IAAMP,EAAE6S,EAAGtS,KAiCnC,OA9BAoV,EAAS5T,UAAU+I,KAAOyH,MAAM/H,WAChCmL,EAAS5T,UAAU8I,SAAW,KAC9B8K,EAAS5T,UAAU6T,QAAU,KAE7BD,EAASrU,OAAS,SAAgByR,EAAGC,GAC3BD,aAAaV,UACfU,EAAIV,QAAQ5I,OAAOsJ,IAEvB,IADA,IAAIxR,OAAUE,IAANuR,EAAkBD,EAAEzM,IAAMyM,EAAE/P,IAAMgQ,EAAGC,EAAI,IAAIT,MAAMG,WAAWgD,SAC/D5C,EAAE/P,IAAMzB,GAAG,CACd,IAAIX,EAAImS,EAAEtE,SACV,OAAQ7N,IAAM,GACd,KAAK,EACKqS,EAAEnI,MAAQmI,EAAEnI,KAAK1L,SACnB6T,EAAEnI,SACNmI,EAAEnI,KAAK7J,KAAKuR,MAAMG,WAAWwC,QAAQ7T,OAAOyR,EAAGA,EAAEtE,WACjD,MACJ,KAAK,EACDwE,EAAEpI,SAAW2H,MAAMG,WAAW4C,WAAWjU,OAAOyR,EAAGA,EAAEtE,UACrD,MACJ,KAAK,EACDwE,EAAE2C,QAAUpD,MAAMG,WAAWkD,mBAAmBvU,OAAOyR,EAAGA,EAAEtE,UAC5D,MACJ,QACIsE,EAAElC,SAAa,EAAJjQ,IAInB,OAAOqS,GAGJ0C,EAxCW,GA2CtBhD,WAAWmD,cAAgB,WAEvB,SAASA,EAAc9V,GACnB,GAAIA,EACA,IAAK,IAAI6S,EAAK3M,OAAOC,KAAKnG,GAAIO,EAAI,EAAGA,EAAIsS,EAAGzT,SAAUmB,EAClC,MAAZP,EAAE6S,EAAGtS,MACLsB,KAAKgR,EAAGtS,IAAMP,EAAE6S,EAAGtS,KASnC,IAAI+T,EA8NJ,OApOAwB,EAAc/T,UAAUgU,SAAW,KACnCD,EAAc/T,UAAUiU,UAAY,KACpCF,EAAc/T,UAAUkU,UAAY,KACpCH,EAAc/T,UAAUmU,UAAY,KACpCJ,EAAc/T,UAAUoU,QAAU,KAIlCjQ,OAAOmD,eAAeyM,EAAc/T,UAAW,QAC3CuH,IAAKiJ,MAAM3F,YAAY0H,GAAgB,WAAY,YAAa,YAAa,YAAa,YAC1FhF,IAAKiD,MAAMxF,YAAYuH,KAG3BwB,EAAcxU,OAAS,SAAgByR,EAAGC,GAChCD,aAAaV,UACfU,EAAIV,QAAQ5I,OAAOsJ,IAEvB,IADA,IAAIxR,OAAUE,IAANuR,EAAkBD,EAAEzM,IAAMyM,EAAE/P,IAAMgQ,EAAGC,EAAI,IAAIT,MAAMG,WAAWmD,cAC/D/C,EAAE/P,IAAMzB,GAAG,CACd,IAAIX,EAAImS,EAAEtE,SACV,OAAQ7N,IAAM,GACd,KAAK,EACDqS,EAAE8C,SAAWvD,MAAMG,WAAWmD,cAAcM,SAAS9U,OAAOyR,EAAGA,EAAEtE,UACjE,MACJ,KAAK,EACDwE,EAAE+C,UAAYxD,MAAMG,WAAWmD,cAAcO,UAAU/U,OAAOyR,EAAGA,EAAEtE,UACnE,MACJ,KAAK,EACDwE,EAAEgD,UAAYzD,MAAMG,WAAWmD,cAAcQ,UAAUhV,OAAOyR,EAAGA,EAAEtE,UACnE,MACJ,KAAK,EACDwE,EAAEiD,UAAY1D,MAAMG,WAAWmD,cAAcS,UAAUjV,OAAOyR,EAAGA,EAAEtE,UACnE,MACJ,KAAK,EACDwE,EAAEkD,QAAU3D,MAAMG,WAAWmD,cAAcU,QAAQlV,OAAOyR,EAAGA,EAAEtE,UAC/D,MACJ,QACIsE,EAAElC,SAAa,EAAJjQ,IAInB,OAAOqS,GAGX6C,EAAcM,SAAW,WAErB,SAASA,EAASpW,GAEd,GADA6B,KAAK4F,SACDzH,EACA,IAAK,IAAI6S,EAAK3M,OAAOC,KAAKnG,GAAIO,EAAI,EAAGA,EAAIsS,EAAGzT,SAAUmB,EAClC,MAAZP,EAAE6S,EAAGtS,MACLsB,KAAKgR,EAAGtS,IAAMP,EAAE6S,EAAGtS,KAyBnC,OAtBA6V,EAASrU,UAAU0F,MAAQ8K,MAAM/H,WAEjC4L,EAAS9U,OAAS,SAAgByR,EAAGC,GAC3BD,aAAaV,UACfU,EAAIV,QAAQ5I,OAAOsJ,IAEvB,IADA,IAAIxR,OAAUE,IAANuR,EAAkBD,EAAEzM,IAAMyM,EAAE/P,IAAMgQ,EAAGC,EAAI,IAAIT,MAAMG,WAAWmD,cAAcM,SAC7ErD,EAAE/P,IAAMzB,GAAG,CACd,IAAIX,EAAImS,EAAEtE,SACV,OAAQ7N,IAAM,GACd,KAAK,EACKqS,EAAExL,OAASwL,EAAExL,MAAMrI,SACrB6T,EAAExL,UACNwL,EAAExL,MAAMxG,KAAK8R,EAAEhT,UACf,MACJ,QACIgT,EAAElC,SAAa,EAAJjQ,IAInB,OAAOqS,GAGJmD,EAhCc,GAmCzBN,EAAcO,UAAY,WAEtB,SAASA,EAAUrW,GAEf,GADA6B,KAAK4F,SACDzH,EACA,IAAK,IAAI6S,EAAK3M,OAAOC,KAAKnG,GAAIO,EAAI,EAAGA,EAAIsS,EAAGzT,SAAUmB,EAClC,MAAZP,EAAE6S,EAAGtS,MACLsB,KAAKgR,EAAGtS,IAAMP,EAAE6S,EAAGtS,KAyBnC,OAtBA8V,EAAUtU,UAAU0F,MAAQ8K,MAAM/H,WAElC6L,EAAU/U,OAAS,SAAgByR,EAAGC,GAC5BD,aAAaV,UACfU,EAAIV,QAAQ5I,OAAOsJ,IAEvB,IADA,IAAIxR,OAAUE,IAANuR,EAAkBD,EAAEzM,IAAMyM,EAAE/P,IAAMgQ,EAAGC,EAAI,IAAIT,MAAMG,WAAWmD,cAAcO,UAC7EtD,EAAE/P,IAAMzB,GAAG,CACd,IAAIX,EAAImS,EAAEtE,SACV,OAAQ7N,IAAM,GACd,KAAK,EACKqS,EAAExL,OAASwL,EAAExL,MAAMrI,SACrB6T,EAAExL,UACNwL,EAAExL,MAAMxG,KAAK8R,EAAE5F,SACf,MACJ,QACI4F,EAAElC,SAAa,EAAJjQ,IAInB,OAAOqS,GAGJoD,EAhCe,GAmC1BP,EAAcQ,UAAY,WAEtB,SAASA,EAAUtW,GAEf,GADA6B,KAAK4F,SACDzH,EACA,IAAK,IAAI6S,EAAK3M,OAAOC,KAAKnG,GAAIO,EAAI,EAAGA,EAAIsS,EAAGzT,SAAUmB,EAClC,MAAZP,EAAE6S,EAAGtS,MACLsB,KAAKgR,EAAGtS,IAAMP,EAAE6S,EAAGtS,KA8BnC,OA3BA+V,EAAUvU,UAAU0F,MAAQ8K,MAAM/H,WAElC8L,EAAUhV,OAAS,SAAgByR,EAAGC,GAC5BD,aAAaV,UACfU,EAAIV,QAAQ5I,OAAOsJ,IAEvB,IADA,IAAIxR,OAAUE,IAANuR,EAAkBD,EAAEzM,IAAMyM,EAAE/P,IAAMgQ,EAAGC,EAAI,IAAIT,MAAMG,WAAWmD,cAAcQ,UAC7EvD,EAAE/P,IAAMzB,GAAG,CACd,IAAIX,EAAImS,EAAEtE,SACV,OAAQ7N,IAAM,GACd,KAAK,EAGD,GAFMqS,EAAExL,OAASwL,EAAExL,MAAMrI,SACrB6T,EAAExL,UACU,IAAP,EAAJ7G,GAED,IADA,IAAI8F,EAAKqM,EAAEtE,SAAWsE,EAAE/P,IACjB+P,EAAE/P,IAAM0D,GACXuM,EAAExL,MAAMxG,KAAK8R,EAAElE,cAEnBoE,EAAExL,MAAMxG,KAAK8R,EAAElE,SACnB,MACJ,QACIkE,EAAElC,SAAa,EAAJjQ,IAInB,OAAOqS,GAGJqD,EArCe,GAwC1BR,EAAcS,UAAY,WAEtB,SAASA,EAAUvW,GAEf,GADA6B,KAAK4F,SACDzH,EACA,IAAK,IAAI6S,EAAK3M,OAAOC,KAAKnG,GAAIO,EAAI,EAAGA,EAAIsS,EAAGzT,SAAUmB,EAClC,MAAZP,EAAE6S,EAAGtS,MACLsB,KAAKgR,EAAGtS,IAAMP,EAAE6S,EAAGtS,KA8BnC,OA3BAgW,EAAUxU,UAAU0F,MAAQ8K,MAAM/H,WAElC+L,EAAUjV,OAAS,SAAgByR,EAAGC,GAC5BD,aAAaV,UACfU,EAAIV,QAAQ5I,OAAOsJ,IAEvB,IADA,IAAIxR,OAAUE,IAANuR,EAAkBD,EAAEzM,IAAMyM,EAAE/P,IAAMgQ,EAAGC,EAAI,IAAIT,MAAMG,WAAWmD,cAAcS,UAC7ExD,EAAE/P,IAAMzB,GAAG,CACd,IAAIX,EAAImS,EAAEtE,SACV,OAAQ7N,IAAM,GACd,KAAK,EAGD,GAFMqS,EAAExL,OAASwL,EAAExL,MAAMrI,SACrB6T,EAAExL,UACU,IAAP,EAAJ7G,GAED,IADA,IAAI8F,EAAKqM,EAAEtE,SAAWsE,EAAE/P,IACjB+P,EAAE/P,IAAM0D,GACXuM,EAAExL,MAAMxG,KAAK8R,EAAEhJ,cAEnBkJ,EAAExL,MAAMxG,KAAK8R,EAAEhJ,SACnB,MACJ,QACIgJ,EAAElC,SAAa,EAAJjQ,IAInB,OAAOqS,GAGJsD,EArCe,GAwC1BT,EAAcU,QAAU,WAEpB,SAASA,EAAQxW,GAEb,GADA6B,KAAK4F,SACDzH,EACA,IAAK,IAAI6S,EAAK3M,OAAOC,KAAKnG,GAAIO,EAAI,EAAGA,EAAIsS,EAAGzT,SAAUmB,EAClC,MAAZP,EAAE6S,EAAGtS,MACLsB,KAAKgR,EAAGtS,IAAMP,EAAE6S,EAAGtS,KAyBnC,OAtBAiW,EAAQzU,UAAU0F,MAAQ8K,MAAM/H,WAEhCgM,EAAQlV,OAAS,SAAgByR,EAAGC,GAC1BD,aAAaV,UACfU,EAAIV,QAAQ5I,OAAOsJ,IAEvB,IADA,IAAIxR,OAAUE,IAANuR,EAAkBD,EAAEzM,IAAMyM,EAAE/P,IAAMgQ,EAAGC,EAAI,IAAIT,MAAMG,WAAWmD,cAAcU,QAC7EzD,EAAE/P,IAAMzB,GAAG,CACd,IAAIX,EAAImS,EAAEtE,SACV,OAAQ7N,IAAM,GACd,KAAK,EACKqS,EAAExL,OAASwL,EAAExL,MAAMrI,SACrB6T,EAAExL,UACNwL,EAAExL,MAAMxG,KAAKuR,MAAMG,WAAWC,IAAItR,OAAOyR,EAAGA,EAAEtE,WAC9C,MACJ,QACIsE,EAAElC,SAAa,EAAJjQ,IAInB,OAAOqS,GAGJuD,EAhCa,GAmCjBV,EA7OgB,GAgP3BnD,WAAW8D,SAAW,WAElB,SAASA,EAASzW,GACd,GAAIA,EACA,IAAK,IAAI6S,EAAK3M,OAAOC,KAAKnG,GAAIO,EAAI,EAAGA,EAAIsS,EAAGzT,SAAUmB,EAClC,MAAZP,EAAE6S,EAAGtS,MACLsB,KAAKgR,EAAGtS,IAAMP,EAAE6S,EAAGtS,KA+CA,IAC3BkS,EAAiBC,EAOzB,OApDA+D,EAAS1U,UAAU2U,mBAAqB,GACxCD,EAAS1U,UAAU4U,eAAiB,GACpCF,EAAS1U,UAAU6U,cAAgB,GACnCH,EAAS1U,UAAU8U,UAAY,EAC/BJ,EAAS1U,UAAU+U,SAAU,EAC7BL,EAAS1U,UAAUgV,0BAA4B,EAC/CN,EAAS1U,UAAUiV,QAAU,EAE7BP,EAASnV,OAAS,SAAgByR,EAAGC,GAC3BD,aAAaV,UACfU,EAAIV,QAAQ5I,OAAOsJ,IAEvB,IADA,IAAIxR,OAAUE,IAANuR,EAAkBD,EAAEzM,IAAMyM,EAAE/P,IAAMgQ,EAAGC,EAAI,IAAIT,MAAMG,WAAW8D,SAC/D1D,EAAE/P,IAAMzB,GAAG,CACd,IAAIX,EAAImS,EAAEtE,SACV,OAAQ7N,IAAM,GACd,KAAK,EACDqS,EAAEyD,mBAAqB3D,EAAEhT,SACzB,MACJ,KAAK,EACDkT,EAAE0D,eAAiB5D,EAAEhT,SACrB,MACJ,KAAK,EACDkT,EAAE2D,cAAgB7D,EAAEhT,SACpB,MACJ,KAAK,EACDkT,EAAE4D,UAAY9D,EAAErE,QAChB,MACJ,KAAK,EACDuE,EAAE6D,QAAU/D,EAAEhE,OACd,MACJ,KAAK,EACDkE,EAAE8D,0BAA4BhE,EAAEhJ,QAChC,MACJ,KAAK,EACDkJ,EAAE+D,QAAUjE,EAAErE,QACd,MACJ,QACIqE,EAAElC,SAAa,EAAJjQ,IAInB,OAAOqS,GAGXwD,EAASQ,yBACDxE,MAAiBC,EAASxM,OAAOuD,OAAOgJ,IACrCA,EAAW,GAAK,UAAY,EACnCC,EAAOD,EAAW,GAAK,MAAQ,EAC/BC,EAAOD,EAAW,GAAK,MAAQ,EACxBC,GAGJ+D,EA7DW,GAgEtB9D,WAAWuE,WAAa,WAEpB,SAASA,EAAWlX,GAChB,GAAIA,EACA,IAAK,IAAI6S,EAAK3M,OAAOC,KAAKnG,GAAIO,EAAI,EAAGA,EAAIsS,EAAGzT,SAAUmB,EAClC,MAAZP,EAAE6S,EAAGtS,MACLsB,KAAKgR,EAAGtS,IAAMP,EAAE6S,EAAGtS,KAQnC,IAAI+T,EA0EJ,OA/EA4C,EAAWnV,UAAUkH,KAAO,GAC5BiO,EAAWnV,UAAUoV,UAAY,KACjCD,EAAWnV,UAAUkS,MAAQ,EAC7BiD,EAAWnV,UAAUmS,YAAc,KAInChO,OAAOmD,eAAe6N,EAAWnV,UAAW,YACxCuH,IAAKiJ,MAAM3F,YAAY0H,GAAgB,OAAQ,cAC/ChF,IAAKiD,MAAMxF,YAAYuH,KAG3B4C,EAAW5V,OAAS,SAAgByR,EAAGC,GAC7BD,aAAaV,UACfU,EAAIV,QAAQ5I,OAAOsJ,IAEvB,IADA,IAAIxR,OAAUE,IAANuR,EAAkBD,EAAEzM,IAAMyM,EAAE/P,IAAMgQ,EAAGC,EAAI,IAAIT,MAAMG,WAAWuE,WAC/DnE,EAAE/P,IAAMzB,GAAG,CACd,IAAIX,EAAImS,EAAEtE,SACV,OAAQ7N,IAAM,GACd,KAAK,EACDqS,EAAEhK,KAAO8J,EAAEhT,SACX,MACJ,KAAK,EACDkT,EAAEkE,UAAY3E,MAAMG,WAAWuE,WAAWE,UAAU9V,OAAOyR,EAAGA,EAAEtE,UAChE,MACJ,KAAK,EACDwE,EAAEgB,MAAQlB,EAAErE,QACZ,MACJ,KAAK,EACDuE,EAAEiB,YAAc1B,MAAMG,WAAWQ,YAAY7R,OAAOyR,EAAGA,EAAEtE,UACzD,MACJ,QACIsE,EAAElC,SAAa,EAAJjQ,IAInB,OAAOqS,GAGXiE,EAAWE,UAAY,WAEnB,SAASA,EAAUpX,GACf,GAAIA,EACA,IAAK,IAAI6S,EAAK3M,OAAOC,KAAKnG,GAAIO,EAAI,EAAGA,EAAIsS,EAAGzT,SAAUmB,EAClC,MAAZP,EAAE6S,EAAGtS,MACLsB,KAAKgR,EAAGtS,IAAMP,EAAE6S,EAAGtS,KA+BnC,OA5BA6W,EAAUrV,UAAUsV,iBAAmB,GACvCD,EAAUrV,UAAUuV,kBAAoB,GACxCF,EAAUrV,UAAUwV,qBAAuB,GAE3CH,EAAU9V,OAAS,SAAgByR,EAAGC,GAC5BD,aAAaV,UACfU,EAAIV,QAAQ5I,OAAOsJ,IAEvB,IADA,IAAIxR,OAAUE,IAANuR,EAAkBD,EAAEzM,IAAMyM,EAAE/P,IAAMgQ,EAAGC,EAAI,IAAIT,MAAMG,WAAWuE,WAAWE,UAC1ErE,EAAE/P,IAAMzB,GAAG,CACd,IAAIX,EAAImS,EAAEtE,SACV,OAAQ7N,IAAM,GACd,KAAK,EACDqS,EAAEoE,iBAAmBtE,EAAEhT,SACvB,MACJ,KAAK,EACDkT,EAAEqE,kBAAoBvE,EAAEhT,SACxB,MACJ,KAAK,EACDkT,EAAEsE,qBAAuBxE,EAAEhT,SAC3B,MACJ,QACIgT,EAAElC,SAAa,EAAJjQ,IAInB,OAAOqS,GAGJmE,EArCY,GAwChBF,EAxFa,GA2FxBvE,WAAW6E,aAAe,WAEtB,SAASA,EAAaxX,GAGlB,GAFA6B,KAAK4V,UACL5V,KAAK6V,WACD1X,EACA,IAAK,IAAI6S,EAAK3M,OAAOC,KAAKnG,GAAIO,EAAI,EAAGA,EAAIsS,EAAGzT,SAAUmB,EAClC,MAAZP,EAAE6S,EAAGtS,MACLsB,KAAKgR,EAAGtS,IAAMP,EAAE6S,EAAGtS,KAyCnC,OAtCAiX,EAAazV,UAAU0V,OAASlF,MAAM7H,YACtC8M,EAAazV,UAAU2V,QAAUnF,MAAM7H,YACvC8M,EAAazV,UAAU4V,WAAa,GAEpCH,EAAalW,OAAS,SAAgByR,EAAGC,GAC/BD,aAAaV,UACfU,EAAIV,QAAQ5I,OAAOsJ,IAEvB,IADA,IAAsFmC,EAAlF3T,OAAUE,IAANuR,EAAkBD,EAAEzM,IAAMyM,EAAE/P,IAAMgQ,EAAGC,EAAI,IAAIT,MAAMG,WAAW6E,aAC/DzE,EAAE/P,IAAMzB,GAAG,CACd,IAAIX,EAAImS,EAAEtE,SACV,OAAQ7N,IAAM,GACd,KAAK,EACDmS,EAAEnC,OAAO5N,MACLiQ,EAAEwE,SAAWlF,MAAM7H,cACnBuI,EAAEwE,WACNvC,EAAInC,EAAEhT,SACNgT,EAAE/P,MACFiQ,EAAEwE,OAAOvC,GAAK1C,MAAMG,WAAWuE,WAAW5V,OAAOyR,EAAGA,EAAEtE,UACtD,MACJ,KAAK,EACDsE,EAAEnC,OAAO5N,MACLiQ,EAAEyE,UAAYnF,MAAM7H,cACpBuI,EAAEyE,YACNxC,EAAInC,EAAEhT,SACNgT,EAAE/P,MACFiQ,EAAEyE,QAAQxC,GAAK1C,MAAMG,WAAWuE,WAAW5V,OAAOyR,EAAGA,EAAEtE,UACvD,MACJ,KAAK,EACDwE,EAAE0E,WAAa5E,EAAEhT,SACjB,MACJ,QACIgT,EAAElC,SAAa,EAAJjQ,IAInB,OAAOqS,GAGJuE,EAjDe,GAoD1B7E,WAAWiF,aAAe,WAEtB,SAASA,EAAa5X,GAClB,GAAIA,EACA,IAAK,IAAI6S,EAAK3M,OAAOC,KAAKnG,GAAIO,EAAI,EAAGA,EAAIsS,EAAGzT,SAAUmB,EAClC,MAAZP,EAAE6S,EAAGtS,MACLsB,KAAKgR,EAAGtS,IAAMP,EAAE6S,EAAGtS,KA2BnC,OAxBAqX,EAAa7V,UAAU8V,WAAa,KACpCD,EAAa7V,UAAU+V,SAAW,GAElCF,EAAatW,OAAS,SAAgByR,EAAGC,GAC/BD,aAAaV,UACfU,EAAIV,QAAQ5I,OAAOsJ,IAEvB,IADA,IAAIxR,OAAUE,IAANuR,EAAkBD,EAAEzM,IAAMyM,EAAE/P,IAAMgQ,EAAGC,EAAI,IAAIT,MAAMG,WAAWiF,aAC/D7E,EAAE/P,IAAMzB,GAAG,CACd,IAAIX,EAAImS,EAAEtE,SACV,OAAQ7N,IAAM,GACd,KAAK,EACDqS,EAAE4E,WAAarF,MAAMG,WAAWuE,WAAW5V,OAAOyR,EAAGA,EAAEtE,UACvD,MACJ,KAAK,EACDwE,EAAE6E,SAAW/E,EAAEhT,SACf,MACJ,QACIgT,EAAElC,SAAa,EAAJjQ,IAInB,OAAOqS,GAGJ2E,EAjCe,GAoC1BjF,WAAWoF,MAAQ,WAEf,SAASA,EAAM/X,GAIX,GAHA6B,KAAKmW,YACLnW,KAAKoW,aACLpW,KAAKoT,QACDjV,EACA,IAAK,IAAI6S,EAAK3M,OAAOC,KAAKnG,GAAIO,EAAI,EAAGA,EAAIsS,EAAGzT,SAAUmB,EAClC,MAAZP,EAAE6S,EAAGtS,MACLsB,KAAKgR,EAAGtS,IAAMP,EAAE6S,EAAGtS,KAyNnC,OAtNAwX,EAAMhW,UAAUkH,KAAO,GACvB8O,EAAMhW,UAAUiW,SAAWzF,MAAM/H,WACjCuN,EAAMhW,UAAUkW,UAAY1F,MAAM/H,WAClCuN,EAAMhW,UAAUkT,KAAO1C,MAAM/H,WAC7BuN,EAAMhW,UAAUmW,YAAc,KAC9BH,EAAMhW,UAAUoW,QAAU,GAC1BJ,EAAMhW,UAAUqW,YAAc,GAC9BL,EAAMhW,UAAUsW,eAAgB,EAChCN,EAAMhW,UAAUuW,aAAc,EAC9BP,EAAMhW,UAAUwW,YAAa,EAC7BR,EAAMhW,UAAUyW,0BAA2B,EAE3CT,EAAMzW,OAAS,SAAgByR,EAAGC,GACxBD,aAAaV,UACfU,EAAIV,QAAQ5I,OAAOsJ,IAEvB,IADA,IAAIxR,OAAUE,IAANuR,EAAkBD,EAAEzM,IAAMyM,EAAE/P,IAAMgQ,EAAGC,EAAI,IAAIT,MAAMG,WAAWoF,MAC/DhF,EAAE/P,IAAMzB,GAAG,CACd,IAAIX,EAAImS,EAAEtE,SACV,OAAQ7N,IAAM,GACd,KAAK,EACDqS,EAAEhK,KAAO8J,EAAEhT,SACX,MACJ,KAAK,EACKkT,EAAE+E,UAAY/E,EAAE+E,SAAS5Y,SAC3B6T,EAAE+E,aACN/E,EAAE+E,SAAS/W,KAAKuR,MAAMG,WAAWoF,MAAMU,OAAOnX,OAAOyR,EAAGA,EAAEtE,WAC1D,MACJ,KAAK,EACKwE,EAAEgF,WAAahF,EAAEgF,UAAU7Y,SAC7B6T,EAAEgF,cACNhF,EAAEgF,UAAUhX,KAAKuR,MAAMG,WAAWoF,MAAMU,OAAOnX,OAAOyR,EAAGA,EAAEtE,WAC3D,MACJ,KAAK,EACKwE,EAAEgC,MAAQhC,EAAEgC,KAAK7V,SACnB6T,EAAEgC,SACNhC,EAAEgC,KAAKhU,KAAKuR,MAAMG,WAAWoF,MAAMW,QAAQpX,OAAOyR,EAAGA,EAAEtE,WACvD,MACJ,KAAK,EACDwE,EAAEiF,YAAc1F,MAAMG,WAAWoF,MAAMY,cAAcrX,OAAOyR,EAAGA,EAAEtE,UACjE,MACJ,KAAK,EACDwE,EAAEkF,QAAUpF,EAAEhT,SACd,MACJ,KAAK,EACDkT,EAAEmF,YAAcrF,EAAEhT,SAClB,MACJ,KAAK,GACDkT,EAAEoF,cAAgBtF,EAAEhE,OACpB,MACJ,KAAK,GACDkE,EAAEqF,YAAcvF,EAAEhE,OAClB,MACJ,KAAK,GACDkE,EAAEsF,WAAaxF,EAAEhE,OACjB,MACJ,KAAK,GACDkE,EAAEuF,yBAA2BzF,EAAEhE,OAC/B,MACJ,QACIgE,EAAElC,SAAa,EAAJjQ,IAInB,OAAOqS,GAGX8E,EAAMU,OAAS,WAEX,SAASA,EAAOzY,GACZ,GAAIA,EACA,IAAK,IAAI6S,EAAK3M,OAAOC,KAAKnG,GAAIO,EAAI,EAAGA,EAAIsS,EAAGzT,SAAUmB,EAClC,MAAZP,EAAE6S,EAAGtS,MACLsB,KAAKgR,EAAGtS,IAAMP,EAAE6S,EAAGtS,KA+CnC,OA5CAkY,EAAO1W,UAAUkH,KAAO,GACxBwP,EAAO1W,UAAUqW,YAAc,GAC/BK,EAAO1W,UAAU2S,KAAO,EACxB+D,EAAO1W,UAAU6W,SAAW,GAC5BH,EAAO1W,UAAU8W,WAAa,GAC9BJ,EAAO1W,UAAU+W,aAAe,GAChCL,EAAO1W,UAAUgX,OAAQ,EAEzBN,EAAOnX,OAAS,SAAgByR,EAAGC,GACzBD,aAAaV,UACfU,EAAIV,QAAQ5I,OAAOsJ,IAEvB,IADA,IAAIxR,OAAUE,IAANuR,EAAkBD,EAAEzM,IAAMyM,EAAE/P,IAAMgQ,EAAGC,EAAI,IAAIT,MAAMG,WAAWoF,MAAMU,OACrE1F,EAAE/P,IAAMzB,GAAG,CACd,IAAIX,EAAImS,EAAEtE,SACV,OAAQ7N,IAAM,GACd,KAAK,EACDqS,EAAEhK,KAAO8J,EAAEhT,SACX,MACJ,KAAK,EACDkT,EAAEmF,YAAcrF,EAAEhT,SAClB,MACJ,KAAK,EACDkT,EAAEyB,KAAO3B,EAAErE,QACX,MACJ,KAAK,EACDuE,EAAE2F,SAAW7F,EAAEhT,SACf,MACJ,KAAK,EACDkT,EAAE4F,WAAa9F,EAAEhT,SACjB,MACJ,KAAK,EACDkT,EAAE6F,aAAe/F,EAAEhT,SACnB,MACJ,KAAK,GACDkT,EAAE8F,MAAQhG,EAAEhE,OACZ,MACJ,QACIgE,EAAElC,SAAa,EAAJjQ,IAInB,OAAOqS,GAGJwF,EArDI,GAwDfV,EAAMW,QAAU,WAEZ,SAASA,EAAQ1Y,GACb,GAAIA,EACA,IAAK,IAAI6S,EAAK3M,OAAOC,KAAKnG,GAAIO,EAAI,EAAGA,EAAIsS,EAAGzT,SAAUmB,EAClC,MAAZP,EAAE6S,EAAGtS,MACLsB,KAAKgR,EAAGtS,IAAMP,EAAE6S,EAAGtS,KA+CnC,OA5CAmY,EAAQ3W,UAAUkH,KAAO,GACzByP,EAAQ3W,UAAU2S,KAAO,GACzBgE,EAAQ3W,UAAUiX,aAAe,KACjCN,EAAQ3W,UAAUqW,YAAc,GAChCM,EAAQ3W,UAAUkX,YAAa,EAC/BP,EAAQ3W,UAAUmX,QAAU3G,MAAM1K,KAAO0K,MAAM1K,KAAKyE,SAAS,EAAE,GAAE,GAAS,EAC1EoM,EAAQ3W,UAAUoX,cAAgB,KAElCT,EAAQpX,OAAS,SAAgByR,EAAGC,GAC1BD,aAAaV,UACfU,EAAIV,QAAQ5I,OAAOsJ,IAEvB,IADA,IAAIxR,OAAUE,IAANuR,EAAkBD,EAAEzM,IAAMyM,EAAE/P,IAAMgQ,EAAGC,EAAI,IAAIT,MAAMG,WAAWoF,MAAMW,QACrE3F,EAAE/P,IAAMzB,GAAG,CACd,IAAIX,EAAImS,EAAEtE,SACV,OAAQ7N,IAAM,GACd,KAAK,EACDqS,EAAEhK,KAAO8J,EAAEhT,SACX,MACJ,KAAK,EACDkT,EAAEyB,KAAO3B,EAAEhT,SACX,MACJ,KAAK,EACDkT,EAAE+F,aAAexG,MAAMG,WAAW0B,UAAU/S,OAAOyR,EAAGA,EAAEtE,UACxD,MACJ,KAAK,EACDwE,EAAEmF,YAAcrF,EAAEhT,SAClB,MACJ,KAAK,EACDkT,EAAEgG,WAAalG,EAAEhE,OACjB,MACJ,KAAK,EACDkE,EAAEiG,QAAUnG,EAAElE,QACd,MACJ,KAAK,EACDoE,EAAEkG,cAAgB3G,MAAMG,WAAW0B,UAAU/S,OAAOyR,EAAGA,EAAEtE,UACzD,MACJ,QACIsE,EAAElC,SAAa,EAAJjQ,IAInB,OAAOqS,GAGJyF,EArDK,GAwDhBX,EAAMY,cAAgB,WAElB,SAASA,EAAc3Y,GACnB,GAAIA,EACA,IAAK,IAAI6S,EAAK3M,OAAOC,KAAKnG,GAAIO,EAAI,EAAGA,EAAIsS,EAAGzT,SAAUmB,EAClC,MAAZP,EAAE6S,EAAGtS,MACLsB,KAAKgR,EAAGtS,IAAMP,EAAE6S,EAAGtS,KA2BnC,OAxBAoY,EAAc5W,UAAUiV,QAAU,EAClC2B,EAAc5W,UAAUqX,YAAc,GAEtCT,EAAcrX,OAAS,SAAgByR,EAAGC,GAChCD,aAAaV,UACfU,EAAIV,QAAQ5I,OAAOsJ,IAEvB,IADA,IAAIxR,OAAUE,IAANuR,EAAkBD,EAAEzM,IAAMyM,EAAE/P,IAAMgQ,EAAGC,EAAI,IAAIT,MAAMG,WAAWoF,MAAMY,cACrE5F,EAAE/P,IAAMzB,GAAG,CACd,IAAIX,EAAImS,EAAEtE,SACV,OAAQ7N,IAAM,GACd,KAAK,EACDqS,EAAE+D,QAAUjE,EAAErE,QACd,MACJ,KAAK,EACDuE,EAAEmG,YAAcrG,EAAEhT,SAClB,MACJ,QACIgT,EAAElC,SAAa,EAAJjQ,IAInB,OAAOqS,GAGJ0F,EAjCW,GAoCfZ,EAlOQ,GAqOnBpF,WAAW0G,OAAS,WAEhB,SAASA,EAAOrZ,GAEZ,GADA6B,KAAKwT,MACDrV,EACA,IAAK,IAAI6S,EAAK3M,OAAOC,KAAKnG,GAAIO,EAAI,EAAGA,EAAIsS,EAAGzT,SAAUmB,EAClC,MAAZP,EAAE6S,EAAGtS,MACLsB,KAAKgR,EAAGtS,IAAMP,EAAE6S,EAAGtS,KAyBnC,OAtBA8Y,EAAOtX,UAAUsT,GAAK9C,MAAM/H,WAE5B6O,EAAO/X,OAAS,SAAgByR,EAAGC,GACzBD,aAAaV,UACfU,EAAIV,QAAQ5I,OAAOsJ,IAEvB,IADA,IAAIxR,OAAUE,IAANuR,EAAkBD,EAAEzM,IAAMyM,EAAE/P,IAAMgQ,EAAGC,EAAI,IAAIT,MAAMG,WAAW0G,OAC/DtG,EAAE/P,IAAMzB,GAAG,CACd,IAAIX,EAAImS,EAAEtE,SACV,OAAQ7N,IAAM,GACd,KAAK,EACKqS,EAAEoC,IAAMpC,EAAEoC,GAAGjW,SACf6T,EAAEoC,OACNpC,EAAEoC,GAAGpU,KAAKuR,MAAMG,WAAWoF,MAAMzW,OAAOyR,EAAGA,EAAEtE,WAC7C,MACJ,QACIsE,EAAElC,SAAa,EAAJjQ,IAInB,OAAOqS,GAGJoG,EAhCS,GAmCpB1G,WAAW2G,aAAe,WAEtB,SAASA,EAAatZ,GAIlB,GAHA6B,KAAK0X,iBACL1X,KAAK2X,gBACL3X,KAAK4X,gBACDzZ,EACA,IAAK,IAAI6S,EAAK3M,OAAOC,KAAKnG,GAAIO,EAAI,EAAGA,EAAIsS,EAAGzT,SAAUmB,EAClC,MAAZP,EAAE6S,EAAGtS,MACLsB,KAAKgR,EAAGtS,IAAMP,EAAE6S,EAAGtS,KA8GnC,OA3GA+Y,EAAavX,UAAU2X,YAAc,KACrCJ,EAAavX,UAAU4X,SAAW,KAClCL,EAAavX,UAAU6X,SAAW,KAClCN,EAAavX,UAAUwX,cAAgBhH,MAAM7H,YAC7C4O,EAAavX,UAAUyX,aAAejH,MAAM7H,YAC5C4O,EAAavX,UAAU0X,aAAelH,MAAM/H,WAE5C8O,EAAahY,OAAS,SAAgByR,EAAGC,GAC/BD,aAAaV,UACfU,EAAIV,QAAQ5I,OAAOsJ,IAEvB,IADA,IAAsFmC,EAAlF3T,OAAUE,IAANuR,EAAkBD,EAAEzM,IAAMyM,EAAE/P,IAAMgQ,EAAGC,EAAI,IAAIT,MAAMG,WAAW2G,aAC/DvG,EAAE/P,IAAMzB,GAAG,CACd,IAAIX,EAAImS,EAAEtE,SACV,OAAQ7N,IAAM,GACd,KAAK,EACDqS,EAAEyG,YAAclH,MAAMG,WAAW2G,aAAaO,YAAYvY,OAAOyR,EAAGA,EAAEtE,UACtE,MACJ,KAAK,EACDwE,EAAE0G,SAAWnH,MAAMG,WAAWgD,SAASrU,OAAOyR,EAAGA,EAAEtE,UACnD,MACJ,KAAK,EACDwE,EAAE2G,SAAWpH,MAAMG,WAAW8D,SAASnV,OAAOyR,EAAGA,EAAEtE,UACnD,MACJ,KAAK,EACDsE,EAAEnC,OAAO5N,MACLiQ,EAAEsG,gBAAkBhH,MAAM7H,cAC1BuI,EAAEsG,kBACNrE,EAAInC,EAAEhT,SACNgT,EAAE/P,MACFiQ,EAAEsG,cAAcrE,GAAK1C,MAAMG,WAAWmD,cAAcxU,OAAOyR,EAAGA,EAAEtE,UAChE,MACJ,KAAK,EACDsE,EAAEnC,OAAO5N,MACLiQ,EAAEuG,eAAiBjH,MAAM7H,cACzBuI,EAAEuG,iBACNtE,EAAInC,EAAEhT,SACNgT,EAAE/P,MACFiQ,EAAEuG,aAAatE,GAAK1C,MAAMG,WAAW6E,aAAalW,OAAOyR,EAAGA,EAAEtE,UAC9D,MACJ,KAAK,EACKwE,EAAEwG,cAAgBxG,EAAEwG,aAAara,SACnC6T,EAAEwG,iBACNxG,EAAEwG,aAAaxY,KAAKuR,MAAMG,WAAWiF,aAAatW,OAAOyR,EAAGA,EAAEtE,WAC9D,MACJ,QACIsE,EAAElC,SAAa,EAAJjQ,IAInB,OAAOqS,GAGXqG,EAAaO,YAAc,WAEvB,SAASA,EAAY7Z,GAEjB,GADA6B,KAAKiY,QACD9Z,EACA,IAAK,IAAI6S,EAAK3M,OAAOC,KAAKnG,GAAIO,EAAI,EAAGA,EAAIsS,EAAGzT,SAAUmB,EAClC,MAAZP,EAAE6S,EAAGtS,MACLsB,KAAKgR,EAAGtS,IAAMP,EAAE6S,EAAGtS,KA6CnC,OA1CAsZ,EAAY9X,UAAUgY,iBAAmB,GACzCF,EAAY9X,UAAUiY,eAAiB,KACvCH,EAAY9X,UAAUkY,QAAU,KAChCJ,EAAY9X,UAAU+X,KAAOvH,MAAM/H,WACnCqP,EAAY9X,UAAUmY,kBAAoB,GAC1CL,EAAY9X,UAAUoY,qBAAuB,GAE7CN,EAAYvY,OAAS,SAAgByR,EAAGC,GAC9BD,aAAaV,UACfU,EAAIV,QAAQ5I,OAAOsJ,IAEvB,IADA,IAAIxR,OAAUE,IAANuR,EAAkBD,EAAEzM,IAAMyM,EAAE/P,IAAMgQ,EAAGC,EAAI,IAAIT,MAAMG,WAAW2G,aAAaO,YAC5E9G,EAAE/P,IAAMzB,GAAG,CACd,IAAIX,EAAImS,EAAEtE,SACV,OAAQ7N,IAAM,GACd,KAAK,EACDqS,EAAE8G,iBAAmBhH,EAAEhT,SACvB,MACJ,KAAK,EACDkT,EAAE+G,eAAiBxH,MAAMG,WAAW0G,OAAO/X,OAAOyR,EAAGA,EAAEtE,UACvD,MACJ,KAAK,EACDwE,EAAEgH,QAAUzH,MAAMG,WAAWC,IAAItR,OAAOyR,EAAGA,EAAEtE,UAC7C,MACJ,KAAK,EACKwE,EAAE6G,MAAQ7G,EAAE6G,KAAK1a,SACnB6T,EAAE6G,SACN7G,EAAE6G,KAAK7Y,KAAK8R,EAAEhT,UACd,MACJ,KAAK,EACDkT,EAAEiH,kBAAoBnH,EAAEhT,SACxB,MACJ,KAAK,EACDkT,EAAEkH,qBAAuBpH,EAAEhT,SAC3B,MACJ,QACIgT,EAAElC,SAAa,EAAJjQ,IAInB,OAAOqS,GAGJ4G,EApDgB,GAuDpBP,EAvHe,GA0H1B3G,WAAWyH,WAAa,WAEpB,SAASA,EAAWpa,GAEhB,GADA6B,KAAKwY,cACDra,EACA,IAAK,IAAI6S,EAAK3M,OAAOC,KAAKnG,GAAIO,EAAI,EAAGA,EAAIsS,EAAGzT,SAAUmB,EAClC,MAAZP,EAAE6S,EAAGtS,MACLsB,KAAKgR,EAAGtS,IAAMP,EAAE6S,EAAGtS,KA6BnC,OA1BA6Z,EAAWrY,UAAUuY,wBAA0B/H,MAAM1K,KAAO0K,MAAM1K,KAAKyE,SAAS,EAAE,GAAE,GAAS,EAC7F8N,EAAWrY,UAAUsY,WAAa9H,MAAM/H,WAExC4P,EAAW9Y,OAAS,SAAgByR,EAAGC,GAC7BD,aAAaV,UACfU,EAAIV,QAAQ5I,OAAOsJ,IAEvB,IADA,IAAIxR,OAAUE,IAANuR,EAAkBD,EAAEzM,IAAMyM,EAAE/P,IAAMgQ,EAAGC,EAAI,IAAIT,MAAMG,WAAWyH,WAC/DrH,EAAE/P,IAAMzB,GAAG,CACd,IAAIX,EAAImS,EAAEtE,SACV,OAAQ7N,IAAM,GACd,KAAK,EACDqS,EAAEqH,wBAA0BvH,EAAElE,QAC9B,MACJ,KAAK,EACKoE,EAAEoH,YAAcpH,EAAEoH,WAAWjb,SAC/B6T,EAAEoH,eACNpH,EAAEoH,WAAWpZ,KAAKuR,MAAMG,WAAW2G,aAAahY,OAAOyR,EAAGA,EAAEtE,WAC5D,MACJ,QACIsE,EAAElC,SAAa,EAAJjQ,IAInB,OAAOqS,GAGJmH,EApCa,GAuCxBzH,WAAWkD,mBAAqB,WAE5B,SAASA,EAAmB7V,GAGxB,GAFA6B,KAAe,YACfA,KAAK0Y,YACDva,EACA,IAAK,IAAI6S,EAAK3M,OAAOC,KAAKnG,GAAIO,EAAI,EAAGA,EAAIsS,EAAGzT,SAAUmB,EAClC,MAAZP,EAAE6S,EAAGtS,MACLsB,KAAKgR,EAAGtS,IAAMP,EAAE6S,EAAGtS,KA+BnC,OA5BAsV,EAAmB9T,UAAoB,SAAIwQ,MAAM/H,WACjDqL,EAAmB9T,UAAUwY,SAAWhI,MAAM/H,WAE9CqL,EAAmBvU,OAAS,SAAgByR,EAAGC,GACrCD,aAAaV,UACfU,EAAIV,QAAQ5I,OAAOsJ,IAEvB,IADA,IAAIxR,OAAUE,IAANuR,EAAkBD,EAAEzM,IAAMyM,EAAE/P,IAAMgQ,EAAGC,EAAI,IAAIT,MAAMG,WAAWkD,mBAC/D9C,EAAE/P,IAAMzB,GAAG,CACd,IAAIX,EAAImS,EAAEtE,SACV,OAAQ7N,IAAM,GACd,KAAK,EACKqS,EAAY,UAAKA,EAAY,SAAE7T,SACjC6T,EAAY,aAChBA,EAAY,SAAEhS,KAAKuR,MAAMG,WAAW6H,YAAYlZ,OAAOyR,EAAGA,EAAEtE,WAC5D,MACJ,KAAK,EACKwE,EAAEsH,UAAYtH,EAAEsH,SAASnb,SAC3B6T,EAAEsH,aACNtH,EAAEsH,SAAStZ,KAAKuR,MAAMG,WAAW8H,YAAYnZ,OAAOyR,EAAGA,EAAEtE,WACzD,MACJ,QACIsE,EAAElC,SAAa,EAAJjQ,IAInB,OAAOqS,GAGJ4C,EAvCqB,GA0ChClD,WAAW6H,YAAc,WAErB,SAASA,EAAYxa,GAIjB,GAHA6B,KAAKoT,QACLpT,KAAK6Y,WACL7Y,KAAK8Y,OACD3a,EACA,IAAK,IAAI6S,EAAK3M,OAAOC,KAAKnG,GAAIO,EAAI,EAAGA,EAAIsS,EAAGzT,SAAUmB,EAClC,MAAZP,EAAE6S,EAAGtS,MACLsB,KAAKgR,EAAGtS,IAAMP,EAAE6S,EAAGtS,KA+CnC,OA5CAia,EAAYzY,UAAU6Y,UAAY,KAClCJ,EAAYzY,UAAUkT,KAAO1C,MAAM7H,YACnC8P,EAAYzY,UAAU2Y,QAAUnI,MAAM/H,WACtCgQ,EAAYzY,UAAU4Y,IAAMpI,MAAM7H,YAElC8P,EAAYlZ,OAAS,SAAgByR,EAAGC,GAC9BD,aAAaV,UACfU,EAAIV,QAAQ5I,OAAOsJ,IAEvB,IADA,IAAqFmC,EAAjF3T,OAAUE,IAANuR,EAAkBD,EAAEzM,IAAMyM,EAAE/P,IAAMgQ,EAAGC,EAAI,IAAIT,MAAMG,WAAW6H,YAC/DzH,EAAE/P,IAAMzB,GAAG,CACd,IAAIX,EAAImS,EAAEtE,SACV,OAAQ7N,IAAM,GACd,KAAK,EACDqS,EAAE2H,UAAYpI,MAAMG,WAAWoF,MAAMzW,OAAOyR,EAAGA,EAAEtE,UACjD,MACJ,KAAK,EACDsE,EAAEnC,OAAO5N,MACLiQ,EAAEgC,OAAS1C,MAAM7H,cACjBuI,EAAEgC,SACNC,EAAInC,EAAEhT,SACNgT,EAAE/P,MACFiQ,EAAEgC,KAAKC,GAAK1C,MAAMG,WAAW0B,UAAU/S,OAAOyR,EAAGA,EAAEtE,UACnD,MACJ,KAAK,EACKwE,EAAEyH,SAAWzH,EAAEyH,QAAQtb,SACzB6T,EAAEyH,YACNzH,EAAEyH,QAAQzZ,KAAKuR,MAAMG,WAAWwC,QAAQ7T,OAAOyR,EAAGA,EAAEtE,WACpD,MACJ,KAAK,EACDsE,EAAEnC,OAAO5N,MACLiQ,EAAE0H,MAAQpI,MAAM7H,cAChBuI,EAAE0H,QACNzF,EAAInC,EAAEhT,SACNgT,EAAE/P,MACFiQ,EAAE0H,IAAIzF,GAAKnC,EAAEhT,SACb,MACJ,QACIgT,EAAElC,SAAa,EAAJjQ,IAInB,OAAOqS,GAGJuH,EAxDc,GA2DzB7H,WAAW8H,YAAc,WAErB,SAASA,EAAYza,GACjB,GAAIA,EACA,IAAK,IAAI6S,EAAK3M,OAAOC,KAAKnG,GAAIO,EAAI,EAAGA,EAAIsS,EAAGzT,SAAUmB,EAClC,MAAZP,EAAE6S,EAAGtS,MACLsB,KAAKgR,EAAGtS,IAAMP,EAAE6S,EAAGtS,KA2BnC,OAxBAka,EAAY1Y,UAAU8Y,aAAe,GACrCJ,EAAY1Y,UAAU+Y,aAAe,GAErCL,EAAYnZ,OAAS,SAAgByR,EAAGC,GAC9BD,aAAaV,UACfU,EAAIV,QAAQ5I,OAAOsJ,IAEvB,IADA,IAAIxR,OAAUE,IAANuR,EAAkBD,EAAEzM,IAAMyM,EAAE/P,IAAMgQ,EAAGC,EAAI,IAAIT,MAAMG,WAAW8H,YAC/D1H,EAAE/P,IAAMzB,GAAG,CACd,IAAIX,EAAImS,EAAEtE,SACV,OAAQ7N,IAAM,GACd,KAAK,EACDqS,EAAE4H,aAAe9H,EAAEhT,SACnB,MACJ,KAAK,EACDkT,EAAE6H,aAAe/H,EAAEhT,SACnB,MACJ,QACIgT,EAAElC,SAAa,EAAJjQ,IAInB,OAAOqS,GAGJwH,EAjCc,GAoClB9H,YAGX,iBAAiBH,oEClqDbuI,EAAmBjQ,EAAYkQ,EAC/BC,GACF,IAAMC,EAAQpQ,EAAK7L,OAAO8b,GAC1B,GAAIG,QAA8BzZ,IAArByZ,EAAMC,WAA0B,CAC3C,GAAmB,WAAfD,EAAMxG,KACR,OAAO0G,UAAUtQ,EAAKuQ,WAAWH,EAAMC,YAAaH,EAAWC,GAEjE,GAAmB,YAAfC,EAAMxG,KAQR,OAPoC,IAArBwG,EAAMC,WACW,IAA3BD,EAAMI,iBACFxQ,EAAKuQ,WACLvQ,EAAKuQ,WAAWja,MACZ8Z,EAAMC,YAAaD,EAAMI,kBAClCxQ,EAAKuQ,WAAWjZ,OAAO8Y,EAAMC,aAEnBI,IAAI,SAAAtS,GAAQ,OAAAmS,UAAUnS,EAAM+R,EAAWC,KAEvD,IAAMO,EAAOtc,MAAM6C,UAAUX,MAAM6F,KAC/BmU,UACItQ,EAAKuQ,WAAWja,MAAM8Z,EAAMC,YAAY,GAAIH,EAAWC,GACtDQ,YACT,MAAsB,WAAfP,EAAMxG,KAAoB8G,EAAK,GAAKA,EAE7C,OAAON,GAASA,EAAMzT,yBAUpBwB,EAAcyS,EACdT,GACI,IAAAU,mBAACC,OAAUtc,OACXuc,EAAYZ,EAAQa,kBAAkBC,KAAK,SAAAF,GAC/C,QAASH,EAAWM,yBAAyBJ,EAAUC,MAGzD,YAAqBpa,IAAdoa,EACHH,EAAWM,yBAAyBJ,EAAUC,IAAYvc,QAC1DmC,wCASFwH,EAAcyS,EACdT,GACF,OAAOS,EAAWM,yBAAyB/S,EAAMgS,EAAQgB,gDAUvDC,EAAmBjB,GACf,IAAAU,mBAACC,OAAUtc,OAEjB,OACE0c,yBAAyBJ,EAAUX,GAAWA,EAAQgB,kBACtD3c,GAIJ,kCAAkC2J,EAAc4S,GAC9C,OAASA,EAAe5S,MAAQ4S,EAAc5S,yBAGlBA,GAC5B,IAAM3J,EAAQ2J,EAAKkT,YAAY,KAC/B,OAAe,IAAX7c,GAAsB2J,EAAM,IAEfA,EAAKyD,UAAU,EAAGpN,GACjB0L,OAAO/B,EAAKyD,UAAUpN,EAAQ,oBAG5B8c,EAAevV,GAEnC,IADA,IAAMwV,KACG9b,EAAI,EAAGA,EAAI6b,EAAIhd,OAAQmB,GAAKsG,EACnCwV,EAAIpb,KAAKmb,EAAIhb,MAAMb,EAAGA,EAAIsG,IAE5B,OAAOwV,EChGF,IAAMjP,OAETkP,SAAY,MACZC,SAAY,MACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/C+H,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,OACZC,SAAY,OACZC,SAAY,aACZvd,SACEwd,aAAgB,EAChBI,mBAAsB,EACtBH,YAAe,UACfhI,KAAQ,cAIV4H,SAAY,UACZC,SAAY,MACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/C+H,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,MACZC,SAAY,MACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/C+H,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,UACZC,SAAY,MACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/C+H,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,MACZC,SAAY,MACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/C+H,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,WACZC,SAAY,WACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/C+H,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,MACZC,SAAY,MACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/C+H,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,UACZC,SAAY,UACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/C+H,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,aAIlD4H,SAAY,UACZC,SAAY,UACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/C+H,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,aAIlD4H,SAAY,MACZC,SAAY,MACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/C+H,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,oBACZC,SAAY,oBACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/C+H,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,MACZC,SAAY,MACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/C+H,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,WACZC,SAAY,MACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/C+H,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,4CCpLXxP,SAETkP,SAAY,MACZC,SAAY,MACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,OACZC,SAAY,OACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,OACZC,SAAY,OACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,OACZC,SAAY,OACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,QACZC,SAAY,QACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/C+H,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,OACZC,SAAY,OACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,cACZC,SAAY,cACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,iBACfD,YAAe,eACfhI,KAAQ,WAGRiI,YAAe,iBACfD,YAAe,eACfhI,KAAQ,aAKZ4H,SAAY,MACZC,SAAY,MACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,OACZC,SAAY,OACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,MACZC,SAAY,MACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,MACZC,SAAY,MACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,QACZC,SAAY,QACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,MACZC,SAAY,MACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,MACZC,SAAY,MACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,OACZC,SAAY,OACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,QACZC,SAAY,cACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,IAEjBF,YAAe,eAAgBhI,KAAQ,SAAUsE,aAAgB,IACjE0D,YAAe,eAAgBhI,KAAQ,SAAUsE,aAAgB,MAIpEsD,SAAY,OACZC,SAAY,OACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,UACZC,SAAY,UACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,MACZC,SAAY,MACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,OACZC,SAAY,OACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,OACZC,SAAY,OACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,QACZC,SAAY,QACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,SACZC,SAAY,SACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,MACZC,SAAY,MACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,OACZC,SAAY,OACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,OACZC,SAAY,OACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,QACZC,SAAY,QACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,QACZC,SAAY,QACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,QACZC,SAAY,QACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,aACZC,SAAY,aACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,aACZC,SAAY,aACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,WACZC,SAAY,WACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,QACZC,SAAY,QACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,QACZC,SAAY,QACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,QACZC,SAAY,QACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,MACZC,SAAY,MACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,OACZC,SAAY,OACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/C+H,aAAgB,EAAGC,YAAe,OAAQhI,KAAQ,aACjDiI,YAAe,YACfD,YAAe,WACfhI,KAAQ,OACRkI,cAAgB,IAGhBD,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,YACZC,SAAY,YACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,QACfD,YAAe,QACfhI,KAAQ,SACRsE,aAAgB,KAGhB2D,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,6CC/fXxP,SAETkP,SAAY,WACZC,SAAY,WACZC,SAAY,UACZvd,SAAYwd,aAAgB,EAAGC,YAAe,OAAQhI,KAAQ,aAG9D4H,SAAY,SACZC,SAAY,SACZC,SAAY,UACZvd,SACGwd,aAAgB,EAAGC,YAAe,OAAQhI,KAAQ,WAClD+H,aAAgB,EAAGC,YAAe,OAAQhI,KAAQ,aAIrD4H,SAAY,QACZC,SAAY,QACZC,SAAY,UACZvd,SACEwd,aAAgB,EAChBI,mBAAsB,EACtBH,YAAe,UACfhI,KAAQ,cAIV4H,SAAY,QACZC,SAAY,QACZC,SAAY,UACZvd,SACGwd,aAAgB,EAAGC,YAAe,SAAUhI,KAAQ,WACnDiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,IAGhBD,YAAe,aACfD,YAAe,YACfhI,KAAQ,WAGRiI,YAAe,cACfD,YAAe,aACfhI,KAAQ,WAKZ4H,SAAY,OACZC,SAAY,OACZC,SAAY,UACZvd,SACGwd,aAAgB,EAAGC,YAAe,SAAUhI,KAAQ,WACnDiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,gBACZC,SAAY,gBACZC,SAAY,UACZvd,SACGwd,aAAgB,EAAGC,YAAe,SAAUhI,KAAQ,WACnDiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,gBACZC,SAAY,cACZC,SAAY,UACZvd,SACGwd,aAAgB,EAAGC,YAAe,OAAQhI,KAAQ,WAClDiI,YAAe,QAASD,YAAe,QAAShI,KAAQ,UACvDiI,YAAe,gBACfD,YAAe,eACfhI,KAAQ,UAGRiI,YAAe,eACfD,YAAe,cACfhI,KAAQ,SAGRiI,YAAe,mBACfD,YAAe,iBACfhI,KAAQ,SAGRiI,YAAe,2BACfD,YAAe,yBACfhI,KAAQ,SAGRiI,YAAe,oBACfD,YAAe,OACfhI,KAAQ,aAKZ4H,SAAY,qBACZC,SAAY,mBACZC,SAAY,UACZvd,SACGwd,aAAgB,EAAGC,YAAe,gBAAiBhI,KAAQ,WAC3D+H,aAAgB,EAAGC,YAAe,QAAShI,KAAQ,WACnD+H,aAAgB,EAAGC,YAAe,SAAUhI,KAAQ,WACpD+H,aAAgB,EAAGC,YAAe,SAAUhI,KAAQ,WACnDiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,oBACZC,SAAY,kBACZC,SAAY,UACZvd,SACGwd,aAAgB,EAAGC,YAAe,gBAAiBhI,KAAQ,WAC3D+H,aAAgB,EAAGC,YAAe,QAAShI,KAAQ,WACnD+H,aAAgB,EAAGC,YAAe,SAAUhI,KAAQ,WACnDiI,YAAe,QACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,sBACZC,SAAY,oBACZC,SAAY,UACZvd,SACGwd,aAAgB,EAAGC,YAAe,gBAAiBhI,KAAQ,WAC3D+H,aAAgB,EAAGC,YAAe,UAAWhI,KAAQ,aACrD+H,aAAgB,EAAGC,YAAe,SAAUhI,KAAQ,WACpDiI,YAAe,QAASD,YAAe,QAAShI,KAAQ,UACvDiI,YAAe,gBACfD,YAAe,eACfhI,KAAQ,YAKZ4H,SAAY,uBACZC,SAAY,qBACZC,SAAY,UACZvd,SACGwd,aAAgB,EAAGC,YAAe,gBAAiBhI,KAAQ,WAC3D+H,aAAgB,EAAGC,YAAe,UAAWhI,KAAQ,aACrD+H,aAAgB,EAAGC,YAAe,SAAUhI,KAAQ,WACpD+H,aAAgB,EAAGC,YAAe,SAAUhI,KAAQ,WACpDiI,YAAe,IAAKD,YAAe,QAAShI,KAAQ,YAIvD4H,SAAY,sBACZC,SAAY,oBACZC,SAAY,UACZvd,SACGwd,aAAgB,EAAGC,YAAe,gBAAiBhI,KAAQ,WAC3D+H,aAAgB,EAAGC,YAAe,SAAUhI,KAAQ,WACpDiI,YAAe,QAASD,YAAe,QAAShI,KAAQ,UACvDiI,YAAe,wBACfD,YAAe,sBACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,qBACZC,SAAY,mBACZC,SAAY,UACZvd,SACGwd,aAAgB,EAAGC,YAAe,gBAAiBhI,KAAQ,WAC3D+H,aAAgB,EAAGC,YAAe,SAAUhI,KAAQ,WACpD+H,aAAgB,EAAGC,YAAe,UAAWhI,KAAQ,aACrD+H,aAAgB,EAAGC,YAAe,SAAUhI,KAAQ,WACpDiI,YAAe,IAAKD,YAAe,QAAShI,KAAQ,YAIvD4H,SAAY,oBACZC,SAAY,kBACZC,SAAY,UACZvd,SACGwd,aAAgB,EAAGC,YAAe,gBAAiBhI,KAAQ,WAC3D+H,aAAgB,EAAGC,YAAe,SAAUhI,KAAQ,aAIvD4H,SAAY,qBACZC,SAAY,mBACZC,SAAY,UACZvd,SACGwd,aAAgB,EAAGC,YAAe,gBAAiBhI,KAAQ,kDChNrDtH,SAETkP,SAAY,UACZC,SAAY,UACZC,SAAY,cACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/CiI,YAAe,UAAWD,YAAe,UAAWhI,KAAQ,aAC5DiI,YAAe,UAAWD,YAAe,MAAOhI,KAAQ,WACvDiI,YAAe,cACfD,YAAe,aACfhI,KAAQ,SACRkI,cAAgB,IAEjBD,YAAe,QAASD,YAAe,aAAchI,KAAQ,aAE5DiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,UACZC,SAAY,UACZC,SAAY,cACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/CiI,YAAe,UAAWD,YAAe,UAAWhI,KAAQ,aAC5DiI,YAAe,UAAWD,YAAe,MAAOhI,KAAQ,WACvDiI,YAAe,cACfD,YAAe,aACfhI,KAAQ,SACRkI,cAAgB,IAEjBD,YAAe,QAASD,YAAe,aAAchI,KAAQ,aAE5DiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,SACZC,SAAY,SACZC,SAAY,cACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/C+H,aAAgB,EAAGC,YAAe,SAAUhI,KAAQ,WACpDiI,YAAe,SAAUD,YAAe,SAAUhI,KAAQ,WAC1DiI,YAAe,UAAWD,YAAe,MAAOhI,KAAQ,WACvDiI,YAAe,cACfD,YAAe,aACfhI,KAAQ,SACRsE,aAAgB,QAGhB2D,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,IAGhBD,YAAe,WACfD,YAAe,WACfhI,KAAQ,SACRsE,aAAgB,MAKpBsD,SAAY,SACZC,SAAY,SACZC,SAAY,cACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/C+H,aAAgB,EAAGC,YAAe,SAAUhI,KAAQ,WACnDiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,IAEjBD,YAAe,UAAWD,YAAe,UAAWhI,KAAQ,aAC5DiI,YAAe,UAAWD,YAAe,MAAOhI,KAAQ,WACvDiI,YAAe,gBACfD,YAAe,gBACfhI,KAAQ,SAGRiI,YAAe,cACfD,YAAe,aACfhI,KAAQ,SACRsE,aAAgB,SAGhB2D,YAAe,YACfD,YAAe,YACfhI,KAAQ,eAKZ4H,SAAY,sBACZC,SAAY,kBACZC,SAAY,cACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/C+H,aAAgB,EAAGC,YAAe,SAAUhI,KAAQ,WACpD+H,aAAgB,EAAGC,YAAe,cAAehI,KAAQ,aACzDiI,YAAe,UAAWD,YAAe,UAAWhI,KAAQ,aAC5DiI,YAAe,UAAWD,YAAe,MAAOhI,KAAQ,WACvDiI,YAAe,cACfD,YAAe,aACfhI,KAAQ,SACRkI,cAAgB,MAKpBN,SAAY,kBACZC,SAAY,kBACZC,SAAY,cACZvd,SACGwd,aAAgB,EAAGC,YAAe,QAAShI,KAAQ,WACnD+H,aAAgB,EAAGC,YAAe,SAAUhI,KAAQ,WACpDiI,YAAe,UAAWD,YAAe,UAAWhI,KAAQ,aAC5DiI,YAAe,UAAWD,YAAe,MAAOhI,KAAQ,WACvDiI,YAAe,cACfD,YAAe,aACfhI,KAAQ,SACRsE,aAAgB,SAGhB2D,YAAe,YACfD,YAAe,YACfhI,KAAQ,eAKZ4H,SAAY,wBACZC,SAAY,kBACZC,SAAY,cACZvd,SACGwd,aAAgB,EAAGC,YAAe,QAAShI,KAAQ,WACnD+H,aAAgB,EAAGC,YAAe,SAAUhI,KAAQ,WACpDiI,YAAe,UAAWD,YAAe,UAAWhI,KAAQ,aAC5DiI,YAAe,UAAWD,YAAe,MAAOhI,KAAQ,WACvDiI,YAAe,cACfD,YAAe,aACfhI,KAAQ,SACRsE,aAAgB,SAGhB2D,YAAe,YACfD,YAAe,YACfhI,KAAQ,wDC/JHtH,SAETkP,SAAY,OACZC,SAAY,OACZC,SAAY,WACZvd,SACGwd,aAAgB,EAAGC,YAAe,QAAShI,KAAQ,aACnD+H,aAAgB,EAAGC,YAAe,QAAShI,KAAQ,WACnDiI,YAAe,IAAKD,YAAe,QAAShI,KAAQ,YAIvD4H,SAAY,WACZC,SAAY,WACZC,SAAY,WACZvd,SACGwd,aAAgB,EAAGC,YAAe,QAAShI,KAAQ,WACnD+H,aAAgB,EAAGC,YAAe,OAAQhI,KAAQ,WAClD+H,aAAgB,EAAGC,YAAe,MAAOhI,KAAQ,WAChDiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,SACZC,SAAY,SACZC,SAAY,WACZvd,SACGwd,aAAgB,EAAGC,YAAe,UAAWhI,KAAQ,WACrD+H,aAAgB,EAAGC,YAAe,QAAShI,KAAQ,WAClD+H,aAAgB,EAChBC,YAAe,UACfhI,KAAQ,SACRsE,aAAgB,IAGhByD,aAAgB,EAChBC,YAAe,WACfhI,KAAQ,SACRsE,aAAgB,IAGhB2D,YAAe,OACfD,YAAe,OACfhI,KAAQ,SACRkI,cAAgB,IAGhBD,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,OACZC,SAAY,OACZC,SAAY,WACZvd,SACGwd,aAAgB,EAAGC,YAAe,QAAShI,KAAQ,aACnDiI,YAAe,IAAKD,YAAe,QAAShI,KAAQ,YAIvD4H,SAAY,WACZC,SAAY,WACZC,SAAY,WACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/CiI,YAAe,QAASD,YAAe,QAAShI,KAAQ,YAI3D4H,SAAY,gBACZC,SAAY,gBACZC,SAAY,WACZvd,SACGwd,aAAgB,EAAGC,YAAe,QAAShI,KAAQ,aAClDiI,YAAe,SACfD,YAAe,SACfhI,KAAQ,SACRsE,aAAgB,IAGhB2D,YAAe,SACfD,YAAe,SACfhI,KAAQ,SACRsE,aAAgB,IAEjB2D,YAAe,QAASD,YAAe,QAAShI,KAAQ,UACvDiI,YAAe,OACfD,YAAe,OACfhI,KAAQ,SACRsE,aAAgB,IAGhB2D,YAAe,QACfD,YAAe,QACfhI,KAAQ,SACRsE,aAAgB,EAChB4D,cAAgB,IAGhBD,YAAe,IACfD,YAAe,IACfhI,KAAQ,SACRkI,cAAgB,MAKpBN,SAAY,QACZC,SAAY,QACZC,SAAY,WACZvd,SACGwd,aAAgB,EAAGC,YAAe,QAAShI,KAAQ,WACnD+H,aAAgB,EAAGC,YAAe,OAAQhI,KAAQ,WACjD+H,aAAgB,EAChBC,YAAe,OACfhI,KAAQ,SACRsE,aAAgB,IAEjB2D,YAAe,OAAQD,YAAe,QAAShI,KAAQ,YAI1D4H,SAAY,kBACZC,SAAY,kBACZC,SAAY,WACZvd,SACGwd,aAAgB,EAAGC,YAAe,QAAShI,KAAQ,aAClDiI,YAAe,QACfD,YAAe,OACfhI,KAAQ,SACRsE,aAAgB,IAGhB2D,YAAe,SACfD,YAAe,SACfhI,KAAQ,SACRsE,aAAgB,IAEjB2D,YAAe,OAAQD,YAAe,OAAQhI,KAAQ,WACrDiI,YAAe,QACfD,YAAe,QACfhI,KAAQ,SACRsE,aAAgB,EAChB4D,cAAgB,IAEjBD,YAAe,QAASD,YAAe,QAAShI,KAAQ,UACvDiI,YAAe,IACfD,YAAe,IACfhI,KAAQ,SACRkI,cAAgB,MAKpBN,SAAY,QACZC,SAAY,QACZC,SAAY,WACZvd,SACGwd,aAAgB,EAAGC,YAAe,QAAShI,KAAQ,aACnDiI,YAAe,IAAKD,YAAe,QAAShI,KAAQ,YAIvD4H,SAAY,YACZC,SAAY,YACZC,SAAY,WACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/CiI,YAAe,IAAKD,YAAe,QAAShI,KAAQ,kDChL9CtH,SAETkP,SAAY,sBACZC,SAAY,oBACZC,SAAY,UACZvd,SACGwd,aAAgB,EAAGC,YAAe,QAAShI,KAAQ,WACnD+H,aAAgB,EAAGC,YAAe,SAAUhI,KAAQ,WACpD+H,aAAgB,EAAGC,YAAe,gBAAiBhI,KAAQ,WAC3D+H,aAAgB,EAAGC,YAAe,eAAgBhI,KAAQ,aAI7D4H,SAAY,sBACZC,SAAY,oBACZC,SAAY,UACZvd,SACGwd,aAAgB,EAAGC,YAAe,QAAShI,KAAQ,WACnD+H,aAAgB,EAAGC,YAAe,SAAUhI,KAAQ,WACpD+H,aAAgB,EAAGC,YAAe,gBAAiBhI,KAAQ,WAC3D+H,aAAgB,EAAGC,YAAe,eAAgBhI,KAAQ,WAC1D+H,aAAgB,EAAGC,YAAe,iBAAkBhI,KAAQ,aAI/D4H,SAAY,QACZC,SAAY,aACZC,SAAY,UACZvd,SACGwd,aAAgB,EAAGC,YAAe,YAAahI,KAAQ,WACtDiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,WACZC,SAAY,iBACZC,SAAY,UACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/C+H,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,2CC/CXxP,SACXkP,SAAY,SACZC,SAAY,OACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/C+H,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/CiI,YAAe,SAAUD,YAAe,SAAUhI,KAAQ,mDCPlDtH,SAETkP,SAAY,yBACZC,SAAY,cACZC,SAAY,QACZvd,SACGwd,aAAgB,EAAGC,YAAe,UAAWhI,KAAQ,WACrDiI,YAAe,QAASD,YAAe,QAAShI,KAAQ,UACxDiI,YAAe,QAASD,YAAe,QAAShI,KAAQ,YAI3D4H,SAAY,cACZC,SAAY,cACZC,SAAY,QACZvd,SACG0d,YAAe,QAASD,YAAe,QAAShI,KAAQ,UACxDiI,YAAe,QAASD,YAAe,QAAShI,KAAQ,YAG5D4H,SAAY,QAASC,SAAY,QAASC,SAAY,UACrDF,SAAY,WACZC,SAAY,WACZC,SAAY,QACZvd,SAAYwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,aAG3D4H,SAAY,WACZC,SAAY,WACZC,SAAY,QACZvd,SAAYwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,aAG3D4H,SAAY,OACZC,SAAY,OACZC,SAAY,QACZvd,SAAYwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,aAG3D4H,SAAY,OACZC,SAAY,OACZC,SAAY,QACZvd,SAAYwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,aAG3D4H,SAAY,QACZC,SAAY,QACZC,SAAY,QACZvd,SAAYwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,aAG3D4H,SAAY,SACZC,SAAY,SACZC,SAAY,QACZvd,SACEwd,aAAgB,EAChBI,mBAAsB,EACtBH,YAAe,IACfhI,KAAQ,cAIV4H,SAAY,QACZC,SAAY,QACZC,SAAY,QACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9C+H,aAAgB,EAChBI,mBAAsB,EACtBH,YAAe,OACfhI,KAAQ,YAETiI,YAAe,UAAWD,YAAe,UAAWhI,KAAQ,WAC3DiI,YAAe,UACfD,YAAe,SACfhI,KAAQ,SACRoI,aAAe,IAGfH,YAAe,YACfD,YAAe,YACfhI,KAAQ,SACRsE,aAAgB,MAIrBsD,SAAY,OAAQC,SAAY,OAAQC,SAAY,QAASvd,YAC5Dqd,SAAY,eACZC,SAAY,eACZC,SAAY,QACZvd,SAAYwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,aAG3D4H,SAAY,0BACZC,SAAY,0BACZC,SAAY,QACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/CiI,YAAe,MAAOD,YAAe,MAAOhI,KAAQ,WACpDiI,YAAe,MAAOD,YAAe,MAAOhI,KAAQ,gDCnG9CtH,SAETkP,SAAY,iBACZC,SAAY,iBACZC,SAAY,QACZvd,SACGwd,aAAgB,EAAGC,YAAe,SAAUhI,KAAQ,WACpD+H,aAAgB,EAAGC,YAAe,OAAQhI,KAAQ,aACjDiI,YAAe,gBACfD,YAAe,eACfhI,KAAQ,SAGRiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,wBACZC,SAAY,wBACZC,SAAY,QACZvd,SACGwd,aAAgB,EAAGC,YAAe,SAAUhI,KAAQ,WACpD+H,aAAgB,EAAGC,YAAe,OAAQhI,KAAQ,aACjDiI,YAAe,gBACfD,YAAe,eACfhI,KAAQ,SAGRiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,gBACZC,SAAY,gBACZC,SAAY,QACZvd,SACGwd,aAAgB,EAAGC,YAAe,QAAShI,KAAQ,WACnD+H,aAAgB,EAAGC,YAAe,QAAShI,KAAQ,WACnD+H,aAAgB,EAAGC,YAAe,SAAUhI,KAAQ,WACpD+H,aAAgB,EAAGC,YAAe,WAAYhI,KAAQ,aACtDiI,YAAe,SAAUD,YAAe,SAAUhI,KAAQ,WACzDiI,YAAe,sBACfD,YAAe,qBACfhI,KAAQ,gDCnDHtH,SAETkP,SAAY,QACZC,SAAY,QACZC,SAAY,UACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/C+H,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,WACZC,SAAY,WACZC,SAAY,UACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/C+H,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,UACZC,SAAY,UACZC,SAAY,UACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/C+H,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,eACZC,SAAY,eACZC,SAAY,UACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/C+H,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,OACZC,SAAY,OACZC,SAAY,UACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/C+H,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,YACZC,SAAY,YACZC,SAAY,UACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/C+H,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,aACZC,SAAY,aACZC,SAAY,UACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/C+H,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,aACZC,SAAY,aACZC,SAAY,UACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,YACZC,SAAY,YACZC,SAAY,UACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/C+H,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,SACZC,SAAY,QACZC,SAAY,UACZvd,SACGwd,aAAgB,EAAGC,YAAe,YAAahI,KAAQ,WACvD+H,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/C+H,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,2CCzIXxP,UAETkP,SAAY,SACZC,SAAY,SACZC,SAAY,WACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/C+H,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,cACfD,YAAe,aACfhI,KAAQ,OACRsE,cAAgB,IAGhB2D,YAAe,cACfD,YAAe,aACfhI,KAAQ,OACRsE,cAAgB,IAGhB2D,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,cACZC,SAAY,SACZC,SAAY,WACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/C+H,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,QACfD,YAAe,aACfhI,KAAQ,OACRsE,cAAgB,IAGhB2D,YAAe,QACfD,YAAe,aACfhI,KAAQ,OACRsE,cAAgB,IAGhB2D,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,MAKpBN,SAAY,YACZC,SAAY,YACZC,SAAY,WACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/C+H,aAAgB,EAAGC,YAAe,OAAQhI,KAAQ,aACjDiI,YAAe,IACfD,YAAe,QACfhI,KAAQ,QACRkI,cAAgB,6CC/DXxP,UAETkP,SAAY,iBACZC,SAAY,qBACZC,SAAY,gBACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/C+H,aAAgB,EAAGC,YAAe,QAAShI,KAAQ,WACnD+H,aAAgB,EAAGC,YAAe,SAAUhI,KAAQ,WACpD+H,aAAgB,EAAGC,YAAe,OAAQhI,KAAQ,WAClD+H,aAAgB,EAAGC,YAAe,WAAYhI,KAAQ,WACrDiI,YAAe,UACfD,YAAe,UACfhI,KAAQ,SACRsE,aAAgB,OAGhB2D,YAAe,cACfD,YAAe,aACfhI,KAAQ,SACRkI,cAAgB,MAKpBN,SAAY,mBACZC,SAAY,qBACZC,SAAY,gBACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/C+H,aAAgB,EAAGC,YAAe,QAAShI,KAAQ,WACnD+H,aAAgB,EAAGC,YAAe,SAAUhI,KAAQ,WACpD+H,aAAgB,EAAGC,YAAe,OAAQhI,KAAQ,WAClD+H,aAAgB,EAAGC,YAAe,WAAYhI,KAAQ,WACrDiI,YAAe,UACfD,YAAe,UACfhI,KAAQ,SACRsE,aAAgB,OAGhB2D,YAAe,cACfD,YAAe,aACfhI,KAAQ,SACRkI,cAAgB,MAKpBN,SAAY,MACZC,SAAY,6BACZC,SAAY,gBACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,eACfD,YAAe,SACfhI,KAAQ,SACRsE,aAAgB,IAGhB2D,YAAe,OACfD,YAAe,OACfhI,KAAQ,SACRsE,aAAgB,IAGhB2D,YAAe,QACfD,YAAe,QACfhI,KAAQ,SACRsE,aAAgB,IAGhB2D,YAAe,OACfD,YAAe,OACfhI,KAAQ,SACRsE,aAAgB,OAKpBsD,SAAY,UACZC,SAAY,UACZC,SAAY,gBACZvd,SAAYwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,aAG3D4H,SAAY,aACZC,SAAY,aACZC,SAAY,gBACZvd,SAAYwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,aAG3D4H,SAAY,gBACZC,SAAY,gBACZC,SAAY,gBACZvd,SACGwd,aAAgB,EAAGC,YAAe,gBAAiBhI,KAAQ,WAC3D+H,aAAgB,EAAGC,YAAe,cAAehI,KAAQ,aACzD+H,aAAgB,EAAGC,YAAe,eAAgBhI,KAAQ,WAC1D+H,aAAgB,EAAGC,YAAe,eAAgBhI,KAAQ,WACzDiI,YAAe,mBACfD,YAAe,kBACfhI,KAAQ,OACRsE,cAAgB,EAChB4D,cAAgB,kDCvGXxP,UAETkP,SAAY,MACZC,SAAY,MACZC,SAAY,YACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/C+H,aAAgB,EAAGC,YAAe,OAAQhI,KAAQ,aAClDiI,YAAe,YAAaD,YAAe,WAAYhI,KAAQ,WAIlE4H,SAAY,OACZC,SAAY,OACZC,SAAY,YACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/C+H,aAAgB,EAAGC,YAAe,OAAQhI,KAAQ,aAClDiI,YAAe,YAAaD,YAAe,WAAYhI,KAAQ,WAIlE4H,SAAY,MACZC,SAAY,MACZC,SAAY,YACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/C+H,aAAgB,EAAGC,YAAe,OAAQhI,KAAQ,aAClDiI,YAAe,YAAaD,YAAe,WAAYhI,KAAQ,WAIlE4H,SAAY,MACZC,SAAY,MACZC,SAAY,YACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/C+H,aAAgB,EAAGC,YAAe,OAAQhI,KAAQ,aAClDiI,YAAe,YAAaD,YAAe,WAAYhI,KAAQ,WAIlE4H,SAAY,MACZC,SAAY,MACZC,SAAY,YACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/C+H,aAAgB,EAAGC,YAAe,OAAQhI,KAAQ,aAClDiI,YAAe,YAAaD,YAAe,WAAYhI,KAAQ,WAIlE4H,SAAY,MACZC,SAAY,MACZC,SAAY,YACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/C+H,aAAgB,EAAGC,YAAe,OAAQhI,KAAQ,aAClDiI,YAAe,YAAaD,YAAe,WAAYhI,KAAQ,WAIlE4H,SAAY,SACZC,SAAY,SACZC,SAAY,YACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/C+H,aAAgB,EAAGC,YAAe,OAAQhI,KAAQ,aAIrD4H,SAAY,SACZC,SAAY,SACZC,SAAY,YACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/C+H,aAAgB,EAAGC,YAAe,OAAQhI,KAAQ,aAIrD4H,SAAY,OACZC,SAAY,OACZC,SAAY,YACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/C+H,aAAgB,EAAGC,YAAe,OAAQhI,KAAQ,aACjDiI,YAAe,YACfD,YAAe,WACfhI,KAAQ,mDCxFHtH,UAETkP,SAAY,WACZC,SAAY,SACZC,SAAY,aACZvd,SAEIwd,aAAgB,EAChBI,mBAAsB,EACtBH,YAAe,UACfhI,KAAQ,YAET+H,cAAiB,EAAGC,YAAe,OAAQhI,KAAQ,aAItD4H,SAAY,SACZC,SAAY,SACZC,SAAY,aACZvd,SAEIwd,aAAgB,EAChBI,mBAAsB,EACtBH,YAAe,UACfhI,KAAQ,YAET+H,aAAgB,EAAGC,YAAe,OAAQhI,KAAQ,aAIrD4H,SAAY,WACZC,SAAY,SACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/C+H,aAAgB,EAAGC,YAAe,UAAWhI,KAAQ,WACpD+H,aAAgB,EAChBC,YAAe,OACfhI,KAAQ,SACRsE,aAAgB,MAKpBsD,SAAY,SACZC,SAAY,SACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/C+H,aAAgB,EAAGC,YAAe,UAAWhI,KAAQ,WACpDiI,YAAe,OACfD,YAAe,OACfhI,KAAQ,SACRsE,aAAgB,IAGhB2D,YAAe,mBACfD,YAAe,kBACfhI,KAAQ,OACRkI,cAAgB,MAKpBN,SAAY,UACZC,SAAY,UACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9C+H,aAAgB,EAChBC,YAAe,OACfhI,KAAQ,OACRkI,cAAgB,MAKpBN,SAAY,YACZC,SAAY,UACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/C+H,aAAgB,EAAGC,YAAe,OAAQhI,KAAQ,eAIrD4H,SAAY,QACZC,SAAY,QACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/C+H,aAAgB,EAAGC,YAAe,QAAShI,KAAQ,aACnD+H,aAAgB,EAAGC,YAAe,OAAQhI,KAAQ,eAIrD4H,SAAY,eACZC,SAAY,eACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/C+H,aAAgB,EAAGC,YAAe,QAAShI,KAAQ,aACnD+H,aAAgB,EAAGC,YAAe,MAAOhI,KAAQ,aACjD+H,aAAgB,EAAGC,YAAe,UAAWhI,KAAQ,aACpDiI,YAAe,aACfD,YAAe,YACfhI,KAAQ,SACRsE,aAAgB,IAGhB2D,YAAe,WACfD,YAAe,UACfhI,KAAQ,SACRsE,aAAgB,IAGhB2D,YAAe,gBACfD,YAAe,cACfhI,KAAQ,SACRsE,aAAgB,IAGhB2D,YAAe,gBACfD,YAAe,eACfhI,KAAQ,SACRsE,aAAgB,IAGhB2D,YAAe,mBACfD,YAAe,iBACfhI,KAAQ,SACRsE,aAAgB,MAKpBsD,SAAY,OACZC,SAAY,QACZC,SAAY,aACZvd,SAEIwd,aAAgB,EAChBI,mBAAsB,EACtBH,YAAe,UACfhI,KAAQ,YAGRiI,YAAe,OACfD,YAAe,OACfhI,KAAQ,SACRsE,aAAgB,MAKpBsD,SAAY,SACZC,SAAY,UACZC,SAAY,aACZvd,SAEIwd,aAAgB,EAChBI,mBAAsB,EACtBH,YAAe,SACfhI,KAAQ,WAGRiI,YAAe,OACfD,YAAe,OACfhI,KAAQ,SACRsE,aAAgB,IAGhB2D,YAAe,MACfD,YAAe,MACfhI,KAAQ,SACRsE,aAAgB,EAChB4D,cAAgB,MAKpBN,SAAY,OACZC,SAAY,OACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/C+H,aAAgB,EAAGC,YAAe,OAAQhI,KAAQ,eAIrD4H,SAAY,QACZC,SAAY,QACZC,SAAY,aACZvd,SAEIwd,aAAgB,EAChBC,YAAe,OACfhI,KAAQ,SACRsE,aAAgB,IAEjByD,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,YACfD,YAAe,kBACfhI,KAAQ,SACRsE,aAAgB,MAKpBsD,SAAY,SACZC,SAAY,QACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/C+H,aAAgB,EAAGC,YAAe,kBAAmBhI,KAAQ,aAE5D+H,aAAgB,EAChBC,YAAe,OACfhI,KAAQ,SACRsE,aAAgB,MAKpBsD,SAAY,YACZC,SAAY,YACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,UAAWhI,KAAQ,WACrD+H,aAAgB,EAAGC,YAAe,SAAUhI,KAAQ,WACpD+H,aAAgB,EAAGC,YAAe,QAAShI,KAAQ,eAItD4H,SAAY,WACZC,SAAY,WACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/C+H,aAAgB,EAAGC,YAAe,UAAWhI,KAAQ,aAIxD4H,SAAY,gBACZC,SAAY,gBACZC,SAAY,aACZvd,SACGwd,aAAgB,EAAGC,YAAe,gBAAiBhI,KAAQ,WAC3D+H,aAAgB,EAAGC,YAAe,cAAehI,KAAQ,aACzD+H,aAAgB,EAAGC,YAAe,eAAgBhI,KAAQ,WAC1D+H,aAAgB,EAAGC,YAAe,eAAgBhI,KAAQ,WACzDiI,YAAe,mBACfD,YAAe,kBACfhI,KAAQ,OACRsE,cAAgB,EAChB4D,cAAgB,8CC/PXxP,UAETkP,SAAY,MACZC,SAAY,MACZC,SAAY,WACZvd,SAAYwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,aAG3D4H,SAAY,OACZC,SAAY,OACZC,SAAY,WACZvd,SAAYwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,aAG3D4H,SAAY,OACZC,SAAY,OACZC,SAAY,WACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9C+H,aAAgB,EAChBC,YAAe,aACfhI,KAAQ,SACRqI,aAAe,MAKnBT,SAAY,QACZC,SAAY,QACZC,SAAY,WACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9C+H,aAAgB,EAChBC,YAAe,aACfhI,KAAQ,SACRqI,aAAe,6CCnCV3P,UAETkP,SAAY,OACZC,SAAY,OACZC,SAAY,iBACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,OACfD,YAAe,SACfhI,KAAQ,QACRkI,cAAgB,IAEjBD,YAAe,OAAQD,YAAe,QAAShI,KAAQ,YAI1D4H,SAAY,aACZC,SAAY,aACZC,SAAY,iBACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9C+H,aAAgB,EAChBO,sBAAyB,MACzBN,YAAe,OACfhI,KAAQ,aAKZ4H,SAAY,MACZC,SAAY,MACZC,SAAY,iBACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/C+H,aAAgB,EAAGC,YAAe,UAAWhI,KAAQ,aACpDiI,YAAe,iBACfD,YAAe,gBACfhI,KAAQ,SACRsE,aAAgB,MAKpBsD,SAAY,QACZC,SAAY,MACZC,SAAY,iBACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/C+H,aAAgB,EAAGC,YAAe,UAAWhI,KAAQ,aACpD+H,aAAgB,EAChBC,YAAe,gBACfhI,KAAQ,SACRsE,aAAgB,MAKpBsD,SAAY,UACZC,SAAY,UACZC,SAAY,iBACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/C+H,aAAgB,EAAGC,YAAe,QAAShI,KAAQ,eAItD4H,SAAY,UACZC,SAAY,UACZC,SAAY,iBACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,OACfK,sBAAyB,eACzBN,YAAe,OACfhI,KAAQ,eAKZ4H,SAAY,iBACZC,SAAY,iBACZC,SAAY,iBACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/C+H,aAAgB,EAAGC,YAAe,aAAchI,KAAQ,aACxD+H,aAAgB,EAAGC,YAAe,WAAYhI,KAAQ,eAIzD4H,SAAY,iBACZC,SAAY,iBACZC,SAAY,iBACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC/C+H,aAAgB,EAAGC,YAAe,aAAchI,KAAQ,aACxD+H,aAAgB,EAAGC,YAAe,QAAShI,KAAQ,eAItD4H,SAAY,eACZC,SAAY,eACZC,SAAY,iBACZvd,SACGwd,aAAgB,EAAGC,YAAe,IAAKhI,KAAQ,WAC9CiI,YAAe,aACfD,YAAe,YACfhI,KAAQ,WAGRiI,YAAe,cACfD,YAAe,aACfhI,KAAQ,0DCzFVuI,kBAAoB,SAAU,QAAS,QAAS,OAAQ,iBACxDC,mBACD,sBAAuB,sBAAuB,oCAajD,aACE,IAAMC,GACJC,WAAYC,UAAWC,QAASC,YAAaC,SAAUC,QACvDC,WAAYC,QAASC,MAAOC,MAAOC,SAAUC,cAAeC,UAC5DC,UAAWC,SAAUC,gBAEjBC,KAA6BC,OAAOze,SAAUud,EAAI5B,IAAI,SAAAlG,GAAM,OAAAA,EAAGjI,QAErEvL,KAAKyc,UAAYF,EAAYG,OACzB,SAAChD,EAAKiD,GAEJ,OADAjD,EAAIiD,EAAOlC,UAAYkC,EAChBjD,OA6NjB,OA7OErV,sBAAkBuY,kBAAlB,WACE,OAAO5c,KAAK6c,YAAc7c,KAAK6c,UAAY,IAAI7c,uCAoBzC4c,0BAAR,SAAsB3T,GACpB,OAAOmS,iBAAiB0B,KAAK,SAAAtJ,GAAM,OAAAA,IAAOvK,EAAKuK,MAGzCoJ,2BAAR,SAAuB3T,GACrB,OAAOoS,kBAAkByB,KAAK,SAAAtJ,GAAM,OAAAA,IAAOvK,EAAKuK,MAIlDoJ,2BAAA,SAAeZ,GAAf,WAEMe,GAAkB,EAClBC,GAAmB,EACjBC,KACAC,KACAC,EALUnB,EAAM/S,KAKAyT,OAA8B,SAAChD,EAAKzQ,GAMxD,OALAyQ,EAAIzQ,EAAK7B,MAAQgW,EAAKC,QAAQpU,GAC1BmU,EAAKE,cAAcrU,KAAO8T,GAAkB,GAC5CK,EAAKG,eAAetU,KAAO+T,GAAmB,GAClC,gBAAZ/T,EAAKuK,IAAsByJ,EAAa7d,KAAKsa,EAAIzQ,EAAK7B,OAC1C,UAAZ6B,EAAKuK,IAAgB0J,EAAQ9d,KAAKsa,EAAIzQ,EAAK7B,OACxCsS,OAGH9D,KACAC,KAgBN,OAfAxR,OAAOC,KAAK6Y,GAAOK,QAAQ,SAAAC,GACzB,IAAMxU,EAAOkU,EAAMM,GACnBxU,EAAKuQ,WAAWgE,QAAQ,SAAApW,GACf,IAAA2S,4BACP9Q,EAAK2M,OAAOxW,KAAK+d,EAAMpD,IACvBoD,EAAMpD,GAAU2D,SAASte,KAAK6J,KAEL,IAAvBA,EAAK2M,OAAOrY,QAAcqY,EAAOxW,KAAK6J,KAG5C5E,OAAOC,KAAK6Y,GAAOK,QAAQ,SAAAC,GACzB,IAAMxU,EAAOkU,EAAMM,GACU,IAAzBxU,EAAKyU,SAASngB,QAAcsY,EAAQzW,KAAK6J,MAI7CkU,QACAvH,SACAC,UACAqH,UACAD,eACAF,kBACAC,qBAIIJ,oBAAR,SAAgB3T,GAAhB,WACQ0T,EAAS3c,KAAKyc,UAAUxT,EAAKuK,IACnC,QAAe5T,IAAX+c,EACF,MAAM,IAAI9c,MAAM,mCAAqCoJ,EAAKuK,IAE5D,IAAMmK,GACJvW,KAAM6B,EAAK7B,KACXoM,GAAImJ,EAAOjC,SACXC,SAAUgC,EAAOhC,SACjBnB,YACKvQ,EAAKsK,WACDmG,IAAI,SAAAnG,GAAS,OAAAA,EAAMqK,WAAW,KAAOrK,EAAMsK,OAAO,GAAKtK,IAChEqC,UACA8H,YACAtgB,WAgFF,OA7EMuf,EAAOvf,SACXugB,EAAQvgB,OAASuf,EAAOvf,OAAOsf,OACyB,SAAChD,EAAKL,GAC5D,IAAMC,EAAaD,EAAMuB,aACnBnB,EAAmBJ,EAAM2B,mBACzBnI,EAAOwG,EAAMxG,KACfjN,OAAQhG,EACZ,QAAmBA,IAAf0Z,EACF,OAAQD,EAAMxG,MACZ,IAAK,cAIWjT,KAHdgG,EAAQwX,EAAKU,eACT7U,EAAKmK,KAAMiG,EAAMyB,YAAazB,EAAMlC,gBAEXkC,EAAM8B,wBACjCvV,EAAQwX,EAAKU,eACT7U,EAAKmK,KAAMiG,EAAM8B,sBACjB9B,EAAMlC,eAEZ,MACF,IAAK,cAIWvX,KAHdgG,EAAQwX,EAAKW,eACT9U,EAAKmK,KAAMiG,EAAMyB,YAChBzB,EAAMlC,cAAgB,KACEkC,EAAM8B,wBACjCvV,EAAQwX,EAAKW,eACT9U,EAAKmK,KAAMiG,EAAM8B,sBACjB9B,EAAMlC,eAEZ,MACF,IAAK,gBAGWvX,KAFdgG,EAAQwX,EAAKY,qBACT/U,EAAKmK,KAAMiG,EAAMyB,YAAazB,EAAMlC,gBACXkC,EAAM8B,wBACjCvV,EAAQwX,EAAKY,qBACT/U,EAAKmK,KAAMiG,EAAM8B,sBACjB9B,EAAMlC,eAEZ,MACF,IAAK,YAGWvX,KAFdgG,EAAQwX,EAAKa,aACThV,EAAKmK,KAAMiG,EAAMyB,YAAazB,EAAMlC,gBACXkC,EAAM8B,wBACjCvV,EAAQwX,EAAKa,aACThV,EAAKmK,KAAMiG,EAAM8B,sBACjB9B,EAAMlC,eAEZ,MACF,IAAK,aAGWvX,KAFdgG,EAAQwX,EAAKc,oBACTjV,EAAKmK,KAAMiG,EAAMyB,YAAazB,EAAMlC,gBACXkC,EAAM8B,wBACjCvV,EAAQwX,EAAKc,oBACTjV,EAAKmK,KAAMiG,EAAM8B,sBACjB9B,EAAMlC,eAEZ,MACF,IAAK,aAGWvX,KAFdgG,EAAQwX,EAAKe,cACTlV,EAAKmK,KAAMiG,EAAMyB,YAAazB,EAAMlC,gBACXkC,EAAM8B,wBACjCvV,EAAQwX,EAAKe,cACTlV,EAAKmK,KAAMiG,EAAM8B,sBACjB9B,EAAMlC,eAEZ,MACF,IAAK,SACL,IAAK,UACH,MACF,QACE,MAAM,IAAItX,MACN,2BAA2BwZ,EAAMxG,iBAAgB5J,EAAKuK,IAIhE,OADAkG,EAAIL,EAAMwB,cAAgBjV,QAAO0T,aAAYzG,OAAM4G,oBAC5CC,QAGJiE,GAGDf,2BAAR,SACIwB,EAA+ChX,EAAciX,EAC7DC,gBAAAA,MACF,IAAMjF,EAAQ+E,EAAMhX,GACpB,QAAcxH,IAAVyZ,EAAqB,CACvB,IAAMzT,EAAQvG,OAAOC,aAAavB,MAAM,KAAMsb,EAAM1G,GACpD,OAAO2L,EAAW1Y,EAAQA,EAAMgF,cAElC,OAAOyT,GAGDzB,yBAAR,SACIwB,EAA+ChX,EAC/CiX,GACF,IAAMhF,EAAQ+E,EAAMhX,GACpB,OAAOiS,EAAQA,EAAMla,EAAIkf,GAGnBzB,2BAAR,SACIwB,EAA+ChX,EAC/CiX,GACF,IAAMhF,EAAQ+E,EAAMhX,GACdxB,EAASyT,EAAQA,EAAMA,EAAMzT,OAASyY,EAC5C,MAAyB,iBAAVzY,EAAsBA,EAAQA,EAAa,SAEpDgX,0BAAR,SACIwB,EAA+ChX,EAC/CiX,GACF,IAAMhF,EAAQ+E,EAAMhX,GACpB,GAAIiS,GAASA,EAAMxG,KACjB,OAAQwG,EAAMxG,MACZ,KAAK/B,eAAWO,SAASkN,SACvB,MAAO,UACT,KAAKzN,eAAWO,SAASmN,SACvB,MAAO,QACT,KAAK1N,eAAWO,SAASoN,QACvB,MAAO,OACT,QACE,OAAOJ,EAGb,OAAOA,GAEDzB,gCAAR,SACIwB,EAA+ChX,EAC/CiX,GACF,IAAMhF,EAAQ+E,EAAMhX,GACpB,OAAIiS,GAASA,EAAMvG,MACVuG,EAAMvG,MAAMvB,IAAImI,IACnB,SAAAnI,GACI,MAAqB,iBAAbA,EAAIvM,KAAqBuM,EAAIvM,KAAOuM,EAAIvM,KAAY,UAE/DqZ,GAGDzB,iCAAR,SACIwB,EAA+ChX,EAC/CiX,GACF,IAAMhF,EAAQ+E,EAAMhX,GACpB,OAAIiS,GACOA,EAAM3G,KAAKE,GAAKyG,EAAM3G,KAAKE,EAAErV,OAAS8b,EAAM3G,KAAKE,EACXyG,EAAM3G,KAAKhU,GAC9Cgb,IAAI,SAAAgF,GAAK,MAAc,iBAANA,EAAkBA,EAAIA,EAAS,UAGvDL,QClQAM,UAAwB,SAAC1V,EAAYkQ,EACZC,GAElC,OAAQnQ,EAAKuK,IACX,IAAK,MACH,OAAQoL,QACHC,cAAc,IAAK5V,EAAMkQ,EAAWC,GACrCyF,cAAc,IAAK5V,EAAMkQ,EAAWC,KAE1C,IAAK,OACH,OAAQ0F,SACJD,cAAc,UAAW5V,EAAMkQ,EAAWC,KAEhD,IAAK,MACH,OAAQ2F,QACJF,cAAc,IAAK5V,EAAMkQ,EAAWC,GACpCyF,cAAc,IAAK5V,EAAMkQ,EAAWC,KAC1C,IAAK,MACH,OAAQ4F,QACJH,cAAc,IAAK5V,EAAMkQ,EAAWC,GACpCyF,cAAc,IAAK5V,EAAMkQ,EAAWC,KAC1C,IAAK,MACH,OAAQ6F,QACJJ,cAAc,IAAK5V,EAAMkQ,EAAWC,GACpCyF,cAAc,IAAK5V,EAAMkQ,EAAWC,KAE1C,IAAK,WACH,OAAQ8F,aACJL,cAAc,IAAK5V,EAAMkQ,EAAWC,GACpCyF,cAAc,IAAK5V,EAAMkQ,EAAWC,KAE1C,IAAK,MACH,OAAQ+F,QACJN,cAAc,IAAK5V,EAAMkQ,EAAWC,GACpCyF,cAAc,IAAK5V,EAAMkQ,EAAWC,KAE1C,IAAK,UACH,OAAQgG,YACJP,cAAc,IAAK5V,EAAMkQ,EAAWC,GACpCyF,cAAc,IAAK5V,EAAMkQ,EAAWC,KAE1C,IAAK,UACH,OAAQiG,YACJR,cAAc,IAAK5V,EAAMkQ,EAAWC,GACpCyF,cAAc,IAAK5V,EAAMkQ,EAAWC,KAE1C,IAAK,MACH,OAAQkG,QACJT,cAAc,IAAK5V,EAAMkQ,EAAWC,GACpCyF,cAAc,IAAK5V,EAAMkQ,EAAWC,KAE1C,IAAK,oBACH,OAAQmG,sBACJV,cAAc,IAAK5V,EAAMkQ,EAAWC,GACpCyF,cAAc,IAAK5V,EAAMkQ,EAAWC,KAE1C,QACE,MAAM3J,UAAU,aAAaxG,EAAKuK,4BCzD7BmL,YAAwB,SAAC1V,EAAYkQ,EACZC,GAElC,OAAQnQ,EAAKuK,IACX,IAAK,MACH,OAAQgM,QACJX,cAAc,IAAK5V,EAAMkQ,EAAWC,KAC1C,IAAK,OACH,OAAQqG,SACJZ,cAAc,IAAK5V,EAAMkQ,EAAWC,KAC1C,IAAK,QACH,OAAQsG,UACJb,cAAc,IAAK5V,EAAMkQ,EAAWC,KAC1C,IAAK,OACH,OAAQuG,SACJd,cAAc,IAAK5V,EAAMkQ,EAAWC,KAC1C,IAAK,QACH,OAAQwG,UACJf,cAAc,IAAK5V,EAAMkQ,EAAWC,KAC1C,IAAK,OACH,OAAQyG,SACJhB,cAAc,IAAK5V,EAAMkQ,EAAWC,KAC1C,IAAK,QACH,OAAQ0G,UACJjB,cAAc,IAAK5V,EAAMkQ,EAAWC,GACpCyF,cAAc,IAAK5V,EAAMkQ,EAAWC,KAC1C,IAAK,QACH,OAAQ2G,UACJlB,cAAc,IAAK5V,EAAMkQ,EAAWC,KAC1C,IAAK,OACH,OAAQ4G,SACJnB,cAAc,IAAK5V,EAAMkQ,EAAWC,KAC1C,IAAK,MACH,OAAQ6G,QACJpB,cAAc,IAAK5V,EAAMkQ,EAAWC,KAC1C,IAAK,OACH,OAAQ8G,SACJrB,cAAc,IAAK5V,EAAMkQ,EAAWC,KAC1C,IAAK,MACH,OAAQ+G,QACJtB,cAAc,IAAK5V,EAAMkQ,EAAWC,KAC1C,IAAK,MACH,OAAQgH,QACJvB,cAAc,IAAK5V,EAAMkQ,EAAWC,KAC1C,IAAK,MACH,OAAQiH,QACJxB,cAAc,IAAK5V,EAAMkQ,EAAWC,KAC1C,IAAK,QACH,OAAQkH,UACJzB,cAAc,IAAK5V,EAAMkQ,EAAWC,KAE1C,IAAK,QACH,OAAQmH,UACJ1B,cAAc,IAAK5V,EAAMkQ,EAAWC,KAC1C,IAAK,MACH,OAAQoH,QACJ3B,cAAc,IAAK5V,EAAMkQ,EAAWC,KAC1C,IAAK,QACH,OAAQqH,UACJ5B,cAAc,IAAK5V,EAAMkQ,EAAWC,KAE1C,IAAK,MACH,OAAQsH,QACJ7B,cAAc,IAAK5V,EAAMkQ,EAAWC,KAC1C,IAAK,aACH,OAAQuH,eACJ9B,cAAc,IAAK5V,EAAMkQ,EAAWC,KAE1C,IAAK,OACH,OAAQwH,SACJ/B,cAAc,IAAK5V,EAAMkQ,EAAWC,KAC1C,IAAK,QACH,OAAQyH,UACJhC,cAAc,IAAK5V,EAAMkQ,EAAWC,KAE1C,IAAK,OACH,OAAQ0H,SACJjC,cAAc,IAAK5V,EAAMkQ,EAAWC,KAC1C,IAAK,UACH,OAAQ2H,YACJlC,cAAc,IAAK5V,EAAMkQ,EAAWC,KAC1C,IAAK,MACH,OAAQ4H,QACJnC,cAAc,IAAK5V,EAAMkQ,EAAWC,KAC1C,IAAK,OACH,OAAQ6H,SACJpC,cAAc,IAAK5V,EAAMkQ,EAAWC,KAE1C,IAAK,OACH,OAAQ8H,SACJrC,cAAc,IAAK5V,EAAMkQ,EAAWC,KAE1C,IAAK,WACH,OAAQ+H,aACJtC,cAAc,IAAK5V,EAAMkQ,EAAWC,KAE1C,IAAK,OACH,OAAQgI,SACJvC,cAAc,IAAK5V,EAAMkQ,EAAWC,KAE1C,IAAK,SACH,OAAQiI,WACJxC,cAAc,IAAK5V,EAAMkQ,EAAWC,KAE1C,IAAK,OACH,OAAQkI,SACJzC,cAAc,IAAK5V,EAAMkQ,EAAWC,KAE1C,IAAK,MACH,OAAQmI,QACJ1C,cAAc,IAAK5V,EAAMkQ,EAAWC,KAC1C,IAAK,cACH,OAAQoI,gBACJ3C,cAAc,IAAK5V,EAAMkQ,EAAWC,GACpCyF,cAAc,eAAgB5V,EAAMkQ,EAAWC,GAC/CyF,cAAc,eAAgB5V,EAAMkQ,EAAWC,KACrD,IAAK,QACH,OAAQ6F,QACJwC,WAAW,EAAK,WAChBL,SAAS7H,UAAUtQ,EAAKuQ,WAAW,GAAIL,EAAWC,MACxD,IAAK,OACH,OAAQsI,SACJ7C,cAAc,IAAK5V,EAAMkQ,EAAWC,GACpCyF,cAAc,OAAQ5V,EAAMkQ,EAAWC,KAC7C,IAAK,YACH,OAAQuI,cACJ9C,cAAc,IAAK5V,EAAMkQ,EAAWC,GACpCyF,cAAc,QAAS5V,EAAMkQ,EAAWC,KAC9C,QACE,MAAM3J,UAAU,aAAaxG,EAAKuK,mDCzHtC,WACoBpM,EAA8BgL,EACtCwP,EAAyBC,EACjBC,EACAC,EACAC,GAJAhiB,UAAAoH,EAA8BpH,WAAAoS,EACtCpS,aAAA4hB,EAAyB5hB,kBAAA6hB,EACjB7hB,4BAAA8hB,EACA9hB,iBAAA+hB,EACA/hB,oBAAAgiB,EARZhiB,gBACAA,cAAU,EAQhBA,KAAKiiB,GAAKC,EAAYC,SA0R1B,OAvRE9d,sBAAI6d,0BAAJ,WACE,OAAOliB,KAAKoiB,yCAMdF,0BAAA,WACEliB,KAAKqiB,QAAQ7E,QAAQ,SAAAzK,GAAU,OAAAA,EAAOA,OAAOuP,YAC7CtiB,KAAKqiB,WACLriB,KAAKoiB,SAAU,GAGjBF,iBAAA,WACE,OAAOliB,KAAKqiB,QAAQ9kB,QAOtB2kB,iBAAA,SAAKzkB,GACH,GAAIuC,KAAKoiB,QACP,MAAM,IAAIviB,MAAM,eAAeG,KAAKoH,kCAGtC,GAAI3J,EAAQ,GAAKA,GAASuC,KAAKqiB,QAAQ9kB,OACrC,MAAM,IAAIsC,MAAM,4BAA4BpC,0BACxCuC,KAAKqiB,QAAQ9kB,QAGnB,IAAMglB,EAAkBviB,KAAKqiB,QAAQ5kB,GACrC,GAAI8kB,EAAgBC,QAClB,MAAM,IAAI3iB,MACN,eAAeG,KAAKoH,+BAChB3J,0GASV,OALIuC,KAAKgiB,iBACPO,EAAgBC,SAAU,GAG5BD,EAAgB7d,MAAO,EAChB6d,EAAgBxP,QAMzBmP,qBAAA,SAASO,GAAT,WACE,OAAOA,EAAQ/I,IAAI,SAAAjc,GAAS,OAAA2f,EAAK1Y,KAAKjH,MAQxCykB,kBAAA,SAAMzkB,EAAesV,GACnB,GAAI/S,KAAKoiB,QACP,MAAM,IAAIviB,MAAM,eAAeG,KAAKoH,kCAGtC,GAAI3J,EAAQ,IAAMuC,KAAK+hB,aAAetkB,GAASuC,KAAK4hB,QAClD,MAAM,IAAI/hB,MAAM,2BACZpC,gDAAmDuC,KAAK4hB,SAG9D,IAAM7iB,EAAIiB,KAAKqiB,QAAQ5kB,OAEvB,GAAIsV,EAAOX,QAAUpS,KAAKoS,MACxB,MAAM,IAAIvS,MAAM,eACZG,KAAKoH,+CAA8C3J,6CAEnDsV,EAAOX,oCAAmCpS,KAAKoS,WAcrD,GAVoB,IAAhBpS,KAAKgF,QACiB,MAArBhF,KAAK6hB,cAAqD,IAA7B7hB,KAAK6hB,aAAatkB,SAClDyC,KAAK6hB,aAAe9O,EAAOD,OAG7B9S,KAAK0iB,kBACD1iB,KAAK6hB,aAAc9O,EAAOD,MAC1B,eAAe9S,KAAKoH,+CAChB3J,OAEJsB,GAAKA,EAAE2F,KACT,MAAM,IAAI7E,MACN,eAAeG,KAAKoH,+CAChB3J,yCAGV,GAAIsB,GAAKA,EAAE4jB,QACT,MAAM,IAAI9iB,MACN,eAAeG,KAAKoH,+CAChB3J,4CAGVsB,EAAEgU,OAASA,EACXhU,EAAE4jB,SAAU,EAEZ3iB,KAAKqiB,QAAQ5kB,GAASsB,GAMxBmjB,sBAAA,SAAUO,EAAmBJ,GAA7B,WACE,GAAII,EAAQllB,SAAW8kB,EAAQ9kB,OAC7B,MAAM,IAAIsC,MACN,eAAeG,KAAKoH,mEAEhBqb,EAAQllB,4CACR8kB,EAAQ9kB,YAGlBklB,EAAQjF,QAAQ,SAAC9e,EAAGjB,GAAU,OAAA2f,EAAKzY,MAAMjG,EAAG2jB,EAAQ5kB,OAWtDykB,mBAAA,SAAOO,EAAoBrQ,GACzB,GAAMA,GAASA,IAAUpS,KAAKoS,MAC5B,MAAM,IAAIvS,MAAM,wBACZG,KAAKoS,qCAAoCA,GAG/C,IAAKqQ,EAAS,CACZA,KACA,IAAK,IAAI/jB,EAAI,EAAGA,EAAIsB,KAAKgF,OAAQtG,IAC/B+jB,EAAQrjB,KAAKV,GAIjB,GAAuB,IAAnB+jB,EAAQllB,OACV,OAAOwV,eAAY,GAAGyJ,OAAOxc,KAAK6hB,eAKpC,IAAMQ,EAAUriB,KAAK4iB,SAASH,GAK9B,OAHAziB,KAAK0iB,kBACD1iB,KAAK6hB,aAAcQ,EAAQ,GAAGvP,MAAO,gCAElCnL,UAAM0a,EAAS,IAMxBH,mBAAA,SAAO9P,GACL,GAAMA,GAASA,IAAUpS,KAAKoS,MAC5B,MAAM,IAAIvS,MAAM,wBACZG,KAAKoS,qCAAoCA,GAG/C,GAAoB,IAAhBpS,KAAKgF,OACP,OAAO+N,eAAY,GAAGyJ,OAAOxc,KAAK6hB,eAIpC,IADA,IAAMY,KACG/jB,EAAI,EAAGA,EAAIsB,KAAKgF,OAAQtG,IAC/B+jB,EAAQrjB,KAAKV,GAGf,IAAM2jB,EAAUriB,KAAK4iB,SAASH,GAO9B,OALAziB,KAAK0iB,kBACD1iB,KAAK6hB,aAAcQ,EAAQ,GAAGvP,MAC9B,mDACI9S,KAAK6hB,yCAAwCQ,EAAQ,GAAGvP,WAEzD0J,WAAO6F,EAAS,IASzBH,oBAAA,SAAQO,EAAmB1P,GACzB,GAAIA,EAAOX,QAAUpS,KAAKoS,MACxB,MAAM,IAAIvS,MAAM,wBACZG,KAAKoS,+BAA8BW,EAAOX,OAGhD,GAAIqQ,EAAQllB,SAAWwV,EAAOD,MAAM,GAClC,MAAM,IAAIjT,MAAM,sDACZ4iB,EAAQllB,eAAcwV,EAAOD,MAAM,IAGzC,IAAM+P,EAAWvkB,KAAKwkB,UAALxkB,KAAYmkB,GAE7B,IAAKziB,KAAK+hB,aAAec,GAAY7iB,KAAK4hB,QACxC,MAAM,IAAI/hB,MACN,mCAAmCgjB,WAAiB7iB,KAAK4hB,aAG/D5hB,KAAK+iB,UAAUN,EAASO,YAAQjQ,EAAQ,KAS1CmP,kBAAA,SAAM3kB,EAAkBwV,GAAxB,WACE,GAAIA,EAAOX,QAAUpS,KAAKoS,MACxB,MAAM,IAAIvS,MAAM,wBACZG,KAAKoS,+BAA8BW,EAAOX,OAEhD,IAAI6Q,EAAc,EACZC,EAAoB3lB,EAAOmc,IAAI,SAAAjV,GAEnC,OADAwe,GAAexe,IAIjB,GAAIwe,IAAgBlQ,EAAOD,MAAM,GAC/B,MAAM,IAAIjT,MAAM,qGAEZojB,8BAAuClQ,EAAOD,OAGpD,IAAK9S,KAAK+hB,aAAexkB,EAAOA,SAAWyC,KAAK4hB,QAC9C,MAAM,IAAI/hB,MACN,2DACIG,KAAK4hB,gBAAerkB,EAAOA,yEAIrC,IAAM4lB,EAAgC,IAAhBF,EAAoB,EAAIlQ,EAAO/N,KAAOie,EACtDZ,KACNe,SAAK,WACHrQ,EAASA,EAAOsQ,SAAS,EAAGJ,EAAaE,IACzC,IAAK,IAAIzkB,EAAI,EAAGA,EAAInB,EAAOA,SAAUmB,EAAG,CACtC,IACM4kB,GAAW,EADa,IAAN5kB,EAAW,EAAIwkB,EAAkBxkB,EAAI,GACzB,GAC9B6kB,GAAS,EAAGhmB,EAAOmB,GAAIykB,GAC7Bd,EAAQ3jB,GAAKa,UAAMwT,EAAQuQ,EAASC,GAAOF,QAAQjG,EAAKyE,cAE1D,OAAOQ,IAGT,IADA,IAAMI,KACG/jB,EAAI,EAAGA,EAAInB,EAAOA,OAAQmB,IACjC+jB,EAAQ/jB,GAAKA,EAEfsB,KAAK+iB,UAAUN,EAASJ,IAGlBH,8BAAR,SACIsB,EAAkBC,EAAkBC,gBAAAA,MACtC5d,SAAK6d,OACD3jB,KAAK4jB,YAAYJ,EAAQC,GACzBC,EAAqB,WAAWF,UAAcC,kBAG5CvB,wBAAR,SAAoB2B,EAAcC,GAChC,GAAID,EAAGtmB,SAAWumB,EAAGvmB,OACnB,OAAO,EAET,IAAK,IAAImB,EAAI,EAAGA,EAAImlB,EAAGtmB,OAAQmB,IAC7B,IAAe,IAAXmlB,EAAGnlB,KAAwB,IAAXolB,EAAGplB,IAAamlB,EAAGnlB,KAAOolB,EAAGplB,GAC/C,OAAO,EAGX,OAAO,GAlSMwjB,SAAS,4BCFtBjZ,EAAYkQ,EACZC,8LACMnQ,EAAKuK,QACN,WAAA,gBAIA,SAAA,gBASA,QAAA,gBAMA,QAAA,gBAQA,OAAA,gBAMA,gBAAA,gBAMA,cAAA,gBAoBA,mBAAA,gBAUA,kBAAA,iBAQA,oBAAA,iBAUA,qBAAA,iBAWA,oBAAA,iBAQA,mBAAA,iBAWA,kBAAA,iBAMA,mBAAA,iCA1HH,UACGqL,cAAc,OAAQ5V,EAAMkQ,EAAWC,GAAwB2K,iBAQ1D,OALFC,EACFnF,cAAc,OAAQ5V,EAAMkQ,EAAWC,GACrC6K,EACFpF,cAAc,OAAQ5V,EAAMkQ,EAAWC,MAE7B4K,EAAKrK,eAAnB,SAAQuK,SAAmB,SAAMtkB,EAAWqkB,EAAKF,UAChBE,EAAKF,aAASnkB,WAK/C,UAFMya,EAAYpR,EAAKuQ,WAAWU,KAC9B,SAAA9S,GAAQ,YAAwCxH,IAAxC2Z,UAAUnS,EAAM+R,EAAWC,OACnBG,UAAUc,EAAWlB,EAAWC,GAAS2K,cAC1CnkB,UAQnB,OALMukB,EACFtF,cAAc,YAAa5V,EAAMkQ,EAAWC,GAC1CO,EACFkF,cAAc,SAAU5V,EAAMkQ,EAAWC,GAC7CA,EAAQgL,WAAWD,OACXxK,EAAKoK,iBAMb,OAHMhR,EACF8L,cAAc,SAAU5V,EAAMkQ,EAAWC,GAC7CA,EAAQiL,gBACAtR,EAAOgR,iBAMf,OAHMxQ,EACFsL,cAAc,SAAU5V,EAAMkQ,EAAWC,GAC7CA,EAAQkL,oBACA/Q,EAAMwQ,iBAoBd,OAjBM/e,EAAO6Z,cAAc,OAAQ5V,EAAMkQ,EAAWC,GAC9ChH,EACFyM,cAAc,QAAS5V,EAAMkQ,EAAWC,GACtCyI,EACFhD,cAAc,eAAgB5V,EAAMkQ,EAAWC,GAC7C2I,EACFlD,cAAc,cAAe5V,EAAMkQ,EAAWC,GAC5C4I,EACFnD,cAAc,iBAAkB5V,EAAMkQ,EAAWC,GAC/C0I,EACFjD,cAAc,yBAA0B5V,EAAMkQ,EAAWC,GAEvDmL,EAAO1F,cAAc,OAAQ5V,EAAMkQ,EAAWC,GAC9CoL,EAAc,IAAItC,YACpBqC,EAAMnS,EAAOpN,EAAM6c,EAAcC,EAAwBC,EACzDC,GACJ5I,EAAQqL,eAAeD,OACfE,WAAOF,EAAYvC,IAAKyC,WAAO,YAUvC,OAPMzC,EACFpD,cAAc,gBAAiB5V,EAAMkQ,EAAWC,GAC9C3b,EAAQohB,cAAc,QAAS5V,EAAMkQ,EAAWC,GAChDuL,EACF9F,cAAc,SAAU5V,EAAMkQ,EAAWC,GACpBA,EAAQwL,eAAe3C,GAC/Btd,MAAMlH,EAAOknB,OACtBD,WAAO,aAQf,OALMG,EACFhG,cAAc,gBAAiB5V,EAAMkQ,EAAWC,GAC9C0L,EACFjG,cAAc,QAAS5V,EAAMkQ,EAAWC,OACpBA,EAAQwL,eAAeC,GACvBngB,KAAKogB,aAU7B,OAPMC,EACFlG,cAAc,gBAAiB5V,EAAMkQ,EAAWC,GAC9C4L,EACFnG,cAAc,UAAW5V,EAAMkQ,EAAWC,GACxC6L,EACFpG,cAAc,QAAS5V,EAAMkQ,EAAWC,OAClBA,EAAQwL,eAAeG,GACvBG,OAAOF,EAAeC,aAWhD,OARME,EACFtG,cAAc,gBAAiB5V,EAAMkQ,EAAWC,GAC9CgM,EACFvG,cAAc,UAAW5V,EAAMkQ,EAAWC,GACxCiM,EACFxG,cAAc,SAAU5V,EAAMkQ,EAAWC,GAClBA,EAAQwL,eAAeO,GAC/BG,QAAQF,EAAgBC,OACnCX,WAAO,aAQf,OALMa,EACF1G,cAAc,gBAAiB5V,EAAMkQ,EAAWC,GAC9CoM,EAAoBpM,EAAQwL,eAAeW,GAC3CE,EACF5G,cAAc,QAAS5V,EAAMkQ,EAAWC,OACpCoM,EAAkBhJ,OAAOiJ,aAWjC,OARMC,EACF7G,cAAc,gBAAiB5V,EAAMkQ,EAAWC,GAC9CuM,EACF9G,cAAc,SAAU5V,EAAMkQ,EAAWC,GACvCwM,EACF/G,cAAc,UAAW5V,EAAMkQ,EAAWC,GACrBA,EAAQwL,eAAec,GAC/BG,MAAMD,EAASD,OACxBjB,WAAO,aAMf,OAHMoB,EACFjH,cAAc,gBAAiB5V,EAAMkQ,EAAWC,GAC9C2M,EAAkB3M,EAAQwL,eAAekB,OACvCpB,WAAOqB,EAAgB/gB,OAAQ,mBAOvC,OAJMghB,EACFnH,cAAc,gBAAiB5V,EAAMkQ,EAAWC,GAC3BA,EAAQwL,eAAeoB,GAC/BC,+BAGjB,MAAMxW,UAAU,aAAaxG,EAAKuK,+BCvIjC,IAAImL,YACP,SAAC1V,EAAYkQ,EACZC,GACC,OAAQnQ,EAAKuK,IACX,IAAK,SACH,IAAM0S,EACFrH,cAAc,SAAU5V,EAAMkQ,EAAWC,GACvC+M,EAAMtH,cAAc,MAAO5V,EAAMkQ,EAAWC,GAC5CgN,EACDvH,cAAc,aAAc5V,EAAMkQ,EAAWC,GACzCiN,cACHC,EACFzH,cAAc,WAAY5V,EAAMkQ,EAAWC,GAC/C,OAAQmN,WACJ1H,cAAc,IAAK5V,EAAMkQ,EAAWC,GACpCyF,cAAc,SAAU5V,EAAMkQ,EAAWC,GACzC8M,EAAQC,EAAyBC,EACjCE,IAEN,IAAK,SACGJ,EACFrH,cAAc,UAAW5V,EAAMkQ,EAAWC,GACxC+M,EAAMtH,cAAc,MAAO5V,EAAMkQ,EAAWC,GAC5CgN,EACDvH,cAAc,aAAc5V,EAAMkQ,EAAWC,GACzCiN,cALT,IAMMG,EACF3H,cAAc,YAAa5V,EAAMkQ,EAAWC,GAChD,OAAQqN,WACJ5H,cAAc,IAAK5V,EAAMkQ,EAAWC,GAEpCyF,cAAc,SAAU5V,EAAMkQ,EAAWC,IACxC8M,EAAO,GAAIA,EAAO,IAAKC,EACxBC,GAAgCI,EAAU,GAAIA,EAAU,MAE9D,IAAK,kBACH,IAAM1T,EAAQ+L,cACI,cAAe5V,EAAMkQ,EACrBC,GAEZ8M,EACFrH,cAAc,UAAW5V,EAAMkQ,EAAWC,GACxC+M,EAAMtH,cAAc,MAAO5V,EAAMkQ,EAAWC,GAClD,OAAQsN,oBACJ7H,cAAc,IAAK5V,EAAMkQ,EAAWC,GAEpCyF,cAAc,SAAU5V,EAAMkQ,EAAWC,GACzCtG,GAAQoT,EAAO,GAAIA,EAAO,IAAKC,IAErC,IAAK,kBACGD,EACFrH,cAAc,UAAW5V,EAAMkQ,EAAWC,GACxC+M,EAAMtH,cAAc,MAAO5V,EAAMkQ,EAAWC,GAC5CoN,EACF3H,cAAc,YAAa5V,EAAMkQ,EAAWC,GAC1CgN,EACDvH,cAAc,aAAc5V,EAAMkQ,EAAWC,GACzCiN,cAET,OAAQM,oBACJ9H,cAAc,QAAS5V,EAAMkQ,EAAWC,GAExCyF,cAAc,SAAU5V,EAAMkQ,EAAWC,IACxC8M,EAAO,GAAIA,EAAO,IAAKC,EACxBC,GAAgCI,EAAU,GAAIA,EAAU,MAG9D,IAAK,UACGN,EACFrH,cAAc,UAAW5V,EAAMkQ,EAAWC,GACxC+M,EAAMtH,cAAc,MAAO5V,EAAMkQ,EAAWC,GAFlD,IAGMwN,EACF/H,cAAc,aAAc5V,EAAMkQ,EAAWC,GAEjD,OAAQyN,YACJhI,cAAc,IAAK5V,EAAMkQ,EAAWC,IAEnCwN,EAAW,GAAIA,EAAW,KAAMV,EAAO,GAAIA,EAAO,IACnDC,IAGN,IAAK,UACGD,EACFrH,cAAc,UAAW5V,EAAMkQ,EAAWC,GACxC+M,EAAMtH,cAAc,MAAO5V,EAAMkQ,EAAWC,GAC5CwN,EACF/H,cAAc,aAAc5V,EAAMkQ,EAAWC,GAEjD,OAAQ0N,YACJjI,cAAc,IAAK5V,EAAMkQ,EAAWC,IAEnCwN,EAAW,GAAIA,EAAW,KAAMV,EAAO,GAAIA,EAAO,IACnDC,IAEN,QACE,MAAM1W,UAAU,aAAaxG,EAAKuK,4BC/FjCmL,YAAwB,SAAC1V,EAAYkQ,EACZC,GAElC,OAAQnQ,EAAKuK,IACX,IAAK,OACH,IAAMV,EACF+L,cAAc,QAAS5V,EAAMkQ,EAAWC,GACtChH,EACFyM,cAAc,QAAS5V,EAAMkQ,EAAWC,GACtCxT,EAAQiZ,cAAc,QAAS5V,EAAMkQ,EAAWC,GACtD,OAAQ2N,SAASjU,EAAOlN,EAAOwM,IAEjC,IAAK,WACH,IAAMvT,EAAQggB,cAAc,QAAS5V,EAAMkQ,EAAWC,GAChD4N,EAAOnI,cAAc,OAAQ5V,EAAMkQ,EAAWC,GAC9C6N,EAAMpI,cAAc,MAAO5V,EAAMkQ,EAAWC,GAClD,OAAQ8N,aAAaroB,EAAOmoB,EAAMC,IAEpC,IAAK,SACH,IAAMxE,EACF5D,cAAc,UAAW5V,EAAMkQ,EAAWC,GACxC+N,EAAQtI,cAAc,QAAS5V,EAAMkQ,EAAWC,GAChDgO,EACFvI,cAAc,UAAW5V,EAAMkQ,EAAWC,GACxCiO,EACFxI,cAAc,WAAY5V,EAAMkQ,EAAWC,GAC/C,OAAQkO,WAAW7E,EAAS0E,EAAOC,EAASC,IAE9C,IAAK,OACH,OAAQE,SACJ1I,cAAc,QAAS5V,EAAMkQ,EAAWC,GACxCyF,cAAc,QAAS5V,EAAMkQ,EAAWC,KAE9C,IAAK,WACH,OAAQoO,aACJ3I,cAAc,IAAK5V,EAAMkQ,EAAWC,KAE1C,IAAK,gBACH,OAAQqO,kBAEJ5I,cAAc,QAAS5V,EAAMkQ,EAAWC,GACxCyF,cAAc,SAAU5V,EAAMkQ,EAAWC,GACzCyF,cAAc,SAAU5V,EAAMkQ,EAAWC,GACzCyF,cAAc,QAAS5V,EAAMkQ,EAAWC,KAE9C,IAAK,QACGva,EAAQggB,cAAc,QAAS5V,EAAMkQ,EAAWC,GAAtD,IACMsO,EAAO7I,cAAc,OAAQ5V,EAAMkQ,EAAWC,GAC9CuO,EAAO9I,cAAc,OAAQ5V,EAAMkQ,EAAWC,GACpD,OAAQwO,UACJ/oB,EAAO6oB,EAAMC,EACb9I,cAAc,QAAS5V,EAAMkQ,EAAWC,KAG9C,IAAK,kBACGtG,EACF+L,cAAc,QAAS5V,EAAMkQ,EAAWC,GAD5C,IAEMyO,EAAOhJ,cAAc,OAAQ5V,EAAMkQ,EAAWC,GAC9C0O,EACFjJ,cAAc,SAAU5V,EAAMkQ,EAAWC,GACvC2O,EAAOlJ,cAAc,OAAQ5V,EAAMkQ,EAAWC,GACpD,OAAQ4O,oBACJlV,EAAO+U,EAAMC,EACbjJ,cAAc,QAAS5V,EAAMkQ,EAAWC,GAExC2O,IAEN,IAAK,QACH,OAAQE,UACJpJ,cAAc,QAAS5V,EAAMkQ,EAAWC,GACxCyF,cAAc,QAAS5V,EAAMkQ,EAAWC,KAE9C,IAAK,YACH,OAAQ8O,cACJrJ,cAAc,IAAK5V,EAAMkQ,EAAWC,KAE1C,QACE,MAAM3J,UAAU,aAAaxG,EAAKuK,iDC9EpCvK,EAAYkQ,EACZC,kIACMnQ,EAAKuK,QACN,oBAAA,gBAeA,aAAA,gBAIA,iBAAA,+BARK,OAVF2U,EACFtJ,cAAc,QAAS5V,EAAMkQ,EAAWC,GACtCgP,EACFvJ,cAAc,SAAU5V,EAAMkQ,EAAWC,GACvCiP,EACFxJ,cAAc,gBAAiB5V,EAAMkQ,EAAWC,GAC9CkP,EACFzJ,cAAc,eAAgB5V,EAAMkQ,EAAWC,GAC7CmP,EACF1J,cAAc,iBAAkB5V,EAAMkQ,EAAWC,MACvCoP,UAAUC,uBACpBN,EAAuBC,EAAwBC,EAC/CC,EAAcC,WAFlB,UAAQrE,kBAKA,SAAMwE,eACV7J,cAAc,YAAa5V,EAAMkQ,EAAWC,YADhD,UAAQ8K,kBAID,SAAMyE,mBACT9J,cAAc,IAAK5V,EAAMkQ,EAAWC,GACpCyF,cAAc,IAAK5V,EAAMkQ,EAAWC,YAFxC,SAAO8K,iBAKP,MAAMzU,UAAU,aAAaxG,EAAKuK,+BC3BjC,IAAImL,YACP,SAAC1V,EAAYkQ,EACZC,GACC,OAAQnQ,EAAKuK,IACX,IAAK,OACH,IAAMoV,EAAI/J,cAAc,IAAK5V,EAAMkQ,EAAWC,GACxC/F,EAAIwL,cAAc,IAAK5V,EAAMkQ,EAAWC,GACxCyP,EACFhK,cAAc,SAAU5V,EAAMkQ,EAAWC,GACvC0P,EAASC,SAASH,EAAGvV,EAAGwV,GAC9B,OAAQC,EAAOjY,OAAQiY,EAAOrG,SAEhC,QACE,MAAMhT,UAAU,aAAaxG,EAAKuK,4BCbjCmL,YAAwB,SAAC1V,EAAYkQ,EACZC,GAElC,OAAQnQ,EAAKuK,IACX,IAAK,QACH,OAAO2F,EAAUlQ,EAAK7B,MAExB,IAAK,cACH,IAAMiX,EACFQ,cAAc,UAAW5V,EAAMkQ,EAAWC,GAC9C,OAAQG,UAAUtQ,EAAK7B,KAAM+R,EAAWC,IAAYiF,GACtD,IAAK,WACL,IAAK,eACL,IAAK,0BACH,OACGQ,cAAc,IAAK5V,EAAMkQ,EAAWC,GAAwB2K,SAEjE,IAAK,WAGH,OADKlF,cAAc,IAAK5V,EAAMkQ,EAAWC,GACxB2K,SACnB,IAAK,QACH,OAAQiF,aACHnK,cAAc,IAAK5V,EAAMkQ,EAAWC,GAAwBtG,MAC7D,UACN,IAAK,SACH,OAAQ+L,cAAc,IAAK5V,EAAMkQ,EAAWC,GACvCM,IAAI,SAAC3a,GAAkB,OAAAiqB,aAAajqB,EAAE+T,SAC7C,IAAK,OACH,OAAQ2O,WACH5C,cAAc,IAAK5V,EAAMkQ,EAAWC,GAAwBpU,KAC7D,UACN,IAAK,OACH,OAAQyc,WACH5C,cAAc,IAAK5V,EAAMkQ,EAAWC,GAAwB6P,KAC7D,UACN,IAAK,OACH,SACF,IAAK,QACH,IAAM1V,EAAQsL,cAAc,IAAK5V,EAAMkQ,EAAWC,GAC5CO,EACFkF,cAAc,OAAQ5V,EAAMkQ,EAAWC,GACrC9R,EACFuX,cAAc,UAAW5V,EAAMkQ,EAAWC,GACxC8P,EACFrK,cAAc,YAAa5V,EAAMkQ,EAAWC,GAChD+P,QAAQC,KACJ,kGAEJD,QAAQjnB,IAAIoF,GACZ,IAAK,IAAI5I,EAAI,EAAGA,EAAIib,EAAKpc,OAAQmB,IAC/ByqB,QAAQjnB,IACJ7E,MAAM6C,UAAUX,MAAM6F,KAAKuU,EAAK,GAAGC,YAAYra,MAAM,EAAG2pB,IAE9D,OAAQ3V,GAEV,QACE,MAAM9D,UAAU,aAAaxG,EAAKuK,4BCzD7BmL,YAAwB,SAAC1V,EAAYkQ,EACZC,GAElC,OAAQnQ,EAAKuK,IACX,IAAK,iBACH,IAAM6V,EACFxK,cAAc,SAAU5V,EAAMkQ,EAAWC,GACvCpU,EAAO6Z,cAAc,OAAQ5V,EAAMkQ,EAAWC,GAC9CkQ,EACFzK,cAAc,eAAgB5V,EAAMkQ,EAAWC,GACnD,OAAQoP,UAAUe,eACdF,GAAwCrkB,EAAK,GAAIA,EAAK,IACtDskB,IAEN,IAAK,wBACGD,EACFxK,cAAc,SAAU5V,EAAMkQ,EAAWC,GACvCpU,EAAO6Z,cAAc,OAAQ5V,EAAMkQ,EAAWC,GAC9CkQ,EACFzK,cAAc,eAAgB5V,EAAMkQ,EAAWC,GACnD,OAAQoP,UAAUgB,sBACdH,GAAwCrkB,EAAK,GAAIA,EAAK,IACtDskB,IAEN,IAAK,gBACH,IAAMvN,EACF8C,cAAc,QAAS5V,EAAMkQ,EAAWC,GACtC+O,EACFtJ,cAAc,QAAS5V,EAAMkQ,EAAWC,GACtCqQ,EACF5K,cAAc,SAAU5V,EAAMkQ,EAAWC,GACvCsQ,EACF7K,cAAc,WAAY5V,EAAMkQ,EAAWC,GACzCzJ,EACFkP,cAAc,SAAU5V,EAAMkQ,EAAWC,GACvCuQ,EACF9K,cAAc,qBAAsB5V,EAAMkQ,EAAWC,GAEzD,OAAQoP,UAAUoB,cACd7N,EAAuBoM,EAAuBsB,EAC9CC,EAA8B/Z,EAC9Bga,IAEN,QACE,MAAMla,UAAU,aAAaxG,EAAKuK,4BC5C7BmL,YAAwB,SAAC1V,EAAYkQ,EACZC,GAElC,OAAQnQ,EAAKuK,IACX,IAAK,QACH,OAAQqW,UACJhL,cAAc,IAAK5V,EAAMkQ,EAAWC,GACpCyF,cAAc,IAAK5V,EAAMkQ,EAAWC,KAE1C,IAAK,WACH,OAAQ0Q,aACJjL,cAAc,IAAK5V,EAAMkQ,EAAWC,GACpCyF,cAAc,IAAK5V,EAAMkQ,EAAWC,KAE1C,IAAK,UACH,OAAQ2Q,YACJlL,cAAc,IAAK5V,EAAMkQ,EAAWC,GACpCyF,cAAc,IAAK5V,EAAMkQ,EAAWC,KAE1C,IAAK,eACH,OAAQ4Q,iBACJnL,cAAc,IAAK5V,EAAMkQ,EAAWC,GACpCyF,cAAc,IAAK5V,EAAMkQ,EAAWC,KAE1C,IAAK,OACH,OAAQ6Q,SACJpL,cAAc,IAAK5V,EAAMkQ,EAAWC,GACpCyF,cAAc,IAAK5V,EAAMkQ,EAAWC,KAE1C,IAAK,YACH,OAAQ8Q,cACJrL,cAAc,IAAK5V,EAAMkQ,EAAWC,GACpCyF,cAAc,IAAK5V,EAAMkQ,EAAWC,KAE1C,IAAK,aACH,OAAQ+Q,eACJtL,cAAc,IAAK5V,EAAMkQ,EAAWC,GACpCyF,cAAc,IAAK5V,EAAMkQ,EAAWC,KAE1C,IAAK,aACH,OAAQgR,eACJvL,cAAc,IAAK5V,EAAMkQ,EAAWC,KAE1C,IAAK,YACH,OAAQiR,cACJxL,cAAc,IAAK5V,EAAMkQ,EAAWC,GACpCyF,cAAc,IAAK5V,EAAMkQ,EAAWC,KAE1C,IAAK,QACH,OAAQkR,UACJzL,cAAc,YAAa5V,EAAMkQ,EAAWC,GAC5CyF,cAAc,IAAK5V,EAAMkQ,EAAWC,GACpCyF,cAAc,IAAK5V,EAAMkQ,EAAWC,KAE1C,QACE,MAAM3J,UAAU,aAAaxG,EAAKuK,4BCvD7BmL,aAAwB,SAAC1V,EAAYkQ,EACZC,GAElC,OAAQnQ,EAAKuK,IACX,IAAK,SACH,OAAQ+W,WACJ1L,cAAc,IAAK5V,EAAMkQ,EAAWC,GACpCyF,cAAc,IAAK5V,EAAMkQ,EAAWC,GACpCyF,cAAc,aAAc5V,EAAMkQ,EAAWC,GAC7CyF,cAAc,aAAc5V,EAAMkQ,EAAWC,KACnD,IAAK,YACH,OAAQoR,cACJ3L,cAAc,IAAK5V,EAAMkQ,EAAWC,GACpCyF,cAAc,OAAQ5V,EAAMkQ,EAAWC,KAE7C,QACE,MAAM3J,UAAU,aAAaxG,EAAKuK,4BChB7BmL,aAAwB,SAAC1V,EAAYkQ,EACZC,GAElC,OAAQnQ,EAAKuK,IACX,IAAK,qBACH,OAAQiX,cACJ5L,cAAc,IAAK5V,EAAMkQ,EAAWC,GACpCyF,cAAc,OAAQ5V,EAAMkQ,EAAWC,GACvCyF,cAAc,WAAY5V,EAAMkQ,EAAWC,GAC3CyF,cAAc,SAAU5V,EAAMkQ,EAAWC,GACzCyF,cAAc,QAAS5V,EAAMkQ,EAAWC,GACxCyF,cAAc,UAAW5V,EAAMkQ,EAAWC,KAEhD,IAAK,6BACH,OAAQsR,+BACJ7L,cAAc,IAAK5V,EAAMkQ,EAAWC,GAEpCyF,cAAc,SAAU5V,EAAMkQ,EAAWC,GACzCyF,cAAc,OAAQ5V,EAAMkQ,EAAWC,GACvCyF,cAAc,QAAS5V,EAAMkQ,EAAWC,GACxCyF,cAAc,OAAQ5V,EAAMkQ,EAAWC,KAE7C,IAAK,UACH,OAAQuR,YACJ9L,cAAc,IAAK5V,EAAMkQ,EAAWC,KAE1C,IAAK,aACH,OAAQwR,eACJ/L,cAAc,IAAK5V,EAAMkQ,EAAWC,KAE1C,IAAK,gBACH,OAAQyR,kBACJhM,cAAc,gBAAiB5V,EAAMkQ,EAAWC,GAEhDyF,cAAc,cAAe5V,EAAMkQ,EAAWC,GAC9CyF,cAAc,eAAgB5V,EAAMkQ,EAAWC,GAC/CyF,cAAc,eAAgB5V,EAAMkQ,EAAWC,KAGrD,QACE,MAAM3J,UAAU,aAAaxG,EAAKuK,4BCxC7BmL,aAAwB,SAAC1V,EAAYkQ,EACZC,GAElC,OAAQnQ,EAAKuK,IACX,IAAK,MACH,IAAMsX,EAAOjM,cAAc,OAAQ5V,EAAMkQ,EAAWC,GAC9C2R,EACFlM,cAAc,WAAY5V,EAAMkQ,EAAWC,GAC/C,OAAQ4R,QACJnM,cAAc,IAAK5V,EAAMkQ,EAAWC,GAAwB0R,EAC5DC,IAEN,IAAK,OACGD,EAAOjM,cAAc,OAAQ5V,EAAMkQ,EAAWC,GAC9C2R,EACFlM,cAAc,WAAY5V,EAAMkQ,EAAWC,GAC/C,OAAQ6R,SACJpM,cAAc,IAAK5V,EAAMkQ,EAAWC,GAAwB0R,EAC5DC,IAEN,IAAK,MACGD,EAAOjM,cAAc,OAAQ5V,EAAMkQ,EAAWC,GAC9C2R,EACFlM,cAAc,WAAY5V,EAAMkQ,EAAWC,GAC/C,OAAQ8R,QACJrM,cAAc,IAAK5V,EAAMkQ,EAAWC,GAAwB0R,EAC5DC,IAEN,IAAK,MACGD,EAAOjM,cAAc,OAAQ5V,EAAMkQ,EAAWC,GAC9C2R,EACFlM,cAAc,WAAY5V,EAAMkQ,EAAWC,GAC/C,OAAQ+R,QACJtM,cAAc,IAAK5V,EAAMkQ,EAAWC,GAAwB0R,EAC5DC,IAEN,IAAK,MACGD,EAAOjM,cAAc,OAAQ5V,EAAMkQ,EAAWC,GAC9C2R,EACFlM,cAAc,WAAY5V,EAAMkQ,EAAWC,GAC/C,OAAQgS,QACJvM,cAAc,IAAK5V,EAAMkQ,EAAWC,GAAwB0R,EAC5DC,IAEN,IAAK,MACGD,EAAOjM,cAAc,OAAQ5V,EAAMkQ,EAAWC,GAC9C2R,EACFlM,cAAc,WAAY5V,EAAMkQ,EAAWC,GAC/C,OAAQiS,QACJxM,cAAc,IAAK5V,EAAMkQ,EAAWC,GAAwB0R,EAC5DC,IAEN,IAAK,SACGD,EAAOjM,cAAc,OAAQ5V,EAAMkQ,EAAWC,GACpD,OAAQkS,WACJzM,cAAc,IAAK5V,EAAMkQ,EAAWC,GAAwB0R,IAElE,IAAK,SACGA,EAAOjM,cAAc,OAAQ5V,EAAMkQ,EAAWC,GACpD,OAAQmS,WACJ1M,cAAc,IAAK5V,EAAMkQ,EAAWC,GAAwB0R,IAElE,IAAK,OACGA,EAAOjM,cAAc,OAAQ5V,EAAMkQ,EAAWC,GAC9C2R,EACFlM,cAAc,WAAY5V,EAAMkQ,EAAWC,GAC/C,OAAQsI,SACJ7C,cAAc,IAAK5V,EAAMkQ,EAAWC,GAAwB0R,EAC5DC,IAEN,QACE,MAAMtb,UAAU,aAAaxG,EAAKuK,4BCvE7BmL,aAAwB,SAAC1V,EAAYkQ,EACZC,GAElC,OAAQnQ,EAAKuK,IACX,IAAK,SACH,IAAMsX,EAAOjM,cAAc,OAAQ5V,EAAMkQ,EAAWC,GAC9CxD,EACFiJ,cAAc,UAAW5V,EAAMkQ,EAAWC,GAC9C,OAAQoS,WAAW5V,EAAQkV,IAE7B,IAAK,SACGA,EAAOjM,cAAc,OAAQ5V,EAAMkQ,EAAWC,GAApD,IACM7F,EAAQsL,cAAc,IAAK5V,EAAMkQ,EAAWC,GAC5CqJ,EACF5D,cAAc,UAAW5V,EAAMkQ,EAAWC,GAC9C,OAAQqS,WAAWlY,EAAOkP,EAASqI,IAErC,IAAK,UACGA,EAAOjM,cAAc,OAAQ5V,EAAMkQ,EAAWC,GAC9C7F,EAAQsL,cAAc,IAAK5V,EAAMkQ,EAAWC,GAClD,OAAQsS,YAAYnY,EAAOuX,IAE7B,IAAK,QAEH,IAAMa,EAAQ9M,cAAc,QAAS5V,EAAMkQ,EAAWC,GAEhDpU,EAAO6Z,cAAc,OAAQ5V,EAAMkQ,EAAWC,GACpD,OAAQwS,UACJ/M,cAAc,IAAK5V,EAAMkQ,EAAWC,GAAwBuS,EAC5D3mB,IAEN,IAAK,eACG2mB,EACF9M,cAAc,QAAS5V,EAAMkQ,EAAWC,GAD5C,IAEMta,EAAM+f,cAAc,MAAO5V,EAAMkQ,EAAWC,GAC5CyS,EACFhN,cAAc,UAAW5V,EAAMkQ,EAAWC,GACxC0S,EACFjN,cAAc,YAAa5V,EAAMkQ,EAAWC,GAC1C2S,EACFlN,cAAc,UAAW5V,EAAMkQ,EAAWC,GACxC4S,EACFnN,cAAc,eAAgB5V,EAAMkQ,EAAWC,GAC7C6S,EACFpN,cAAc,cAAe5V,EAAMkQ,EAAWC,GAC5C8S,EACFrN,cAAc,iBAAkB5V,EAAMkQ,EAAWC,GAC/CrG,EAAS8L,cAAc,IAAK5V,EAAMkQ,EAAWC,GACnD,GAAqB,IAAjBuS,EAAMpuB,QAAgBwV,EAAOD,MAAMvV,OAAS,EAC9C,IAAK,IAAImB,EAAI,EAAGA,EAAIqU,EAAOD,MAAMvV,OAAQmB,IACvCitB,EAAMvsB,KAAK,GACXN,EAAIM,KAAK2T,EAAOD,MAAMpU,IACtBmtB,EAAQzsB,KAAKysB,EAAQ,IAGzB,OAAQM,iBACJpZ,EAAQ4Y,EAAO7sB,EAAK+sB,EAASC,EAAWC,EAASC,EACjDC,EAAaC,IAEnB,IAAK,QACH,OAAOE,SAAS,WACd,IAAMtB,EAAOjM,cAAc,OAAQ5V,EAAMkQ,EAAWC,GAC9CiJ,EACFxD,cAAc,UAAW5V,EAAMkQ,EAAWC,GAExCtG,EAAQuP,EAAQ,GAAGvP,MACnBuZ,EAAgBhK,EAAQ,GAAGiK,UAAUxZ,MACrCyZ,EAASlK,EAAQ3I,IAAI,SAAA3G,GACzB,IAAMyZ,EAAYC,SAAS7I,YAAY7Q,EAAOD,MAAOA,GACrD,IAAK0Z,IACAC,SAAS7I,YAAY7Q,EAAOuZ,UAAUxZ,MAAOuZ,GAChD,MAAM,IAAIxsB,MAAM,0CAElB,OAAO2sB,EAAYzZ,EAASA,EAAOsQ,QAAQvQ,KAE7C,OAAQ4Z,UAAUH,EAAQzB,MAG9B,IAAK,UACH,OAAOsB,SAAS,WACd,IAAMtB,EAAOjM,cAAc,OAAQ5V,EAAMkQ,EAAWC,GAC9CrG,EACF8L,cAAc,SAAU5V,EAAMkQ,EAAWC,GAC7C,OAAOuT,YAAY5Z,EAAQ+X,KAG/B,IAAK,OACH,IAAM8B,EAAO/N,cAAc,OAAQ5V,EAAMkQ,EAAWC,GACpD,OAAQyT,SACJhO,cAAc,IAAK5V,EAAMkQ,EAAWC,GAAwBwT,IAElE,IAAK,QACG9B,EAAOjM,cAAc,OAAQ5V,EAAMkQ,EAAWC,GAApD,IACM0T,EACFjO,cAAc,kBAAmB5V,EAAMkQ,EAAWC,GAEtD,OAAO2T,UACHlO,cAAc,IAAK5V,EAAMkQ,EAAWC,GACpC0T,EAAiBhC,GAEvB,IAAK,YACGrI,EACF5D,cAAc,UAAW5V,EAAMkQ,EAAWC,GAD9C,IAEMvI,EACFgO,cAAc,SAAU5V,EAAMkQ,EAAWC,GACvCtG,EACF+L,cAAc,QAAS5V,EAAMkQ,EAAWC,GAC5C,OAAQ4T,cAAcvK,EAAS5R,EAAQiC,IAEzC,IAAK,WACH,IAAM8V,EAAI/J,cAAc,IAAK5V,EAAMkQ,EAAWC,GACxCqJ,EACF5D,cAAc,UAAW5V,EAAMkQ,EAAWC,GAC9C,OAAQ6T,aAAarE,EAAGnG,IAE1B,IAAK,gBACGA,EACF5D,cAAc,gBAAiB5V,EAAMkQ,EAAWC,GAE9CtG,EACF+L,cAAc,cAAe5V,EAAMkQ,EAAWC,GAJlD,IAKM8T,EACFrO,cAAc,eAAgB5V,EAAMkQ,EAAWC,GAC7CjC,EACF0H,cAAc,eAAgB5V,EAAMkQ,EAAWC,GACnD,OAAQyR,kBAAkBpI,EAASyK,EAAcpa,EAAOqE,IAE1D,QACE,MAAM1H,UAAU,aAAaxG,EAAKuK,4BChI7BmL,aACP,SAAC1V,EAAYkQ,EACZC,GACC,OAAQnQ,EAAKuK,IACX,IAAK,MACH,OAAQ2Z,QACJtO,cAAc,IAAK5V,EAAMkQ,EAAWC,KAE1C,IAAK,OACH,OAAQgU,SACJvO,cAAc,IAAK5V,EAAMkQ,EAAWC,KAE1C,IAAK,OACH,OAAQiU,SACJxO,cAAc,IAAK5V,EAAMkQ,EAAWC,KAE1C,IAAK,QACH,OAAQkU,UACJzO,cAAc,IAAK5V,EAAMkQ,EAAWC,KAE1C,QACE,MAAM3J,UAAU,aAAaxG,EAAKuK,4BCrBjCmL,aAAwB,SAAC1V,EAAYkQ,EACZC,GAElC,OAAQnQ,EAAKuK,IACX,IAAK,OACH,OAAQ+Z,SACJ1O,cAAc,IAAK5V,EAAMkQ,EAAWC,GACpCyF,cAAc,QAAS5V,EAAMkQ,EAAWC,KAG9C,IAAK,aACH,IAAM0R,EAAOjM,cAAc,OAAQ5V,EAAMkQ,EAAWC,GACpD,OAAQoU,eACJ3O,cAAc,IAAK5V,EAAMkQ,EAAWC,GAAwB0R,IAElE,IAAK,UACGA,EAAOjM,cAAc,OAAQ5V,EAAMkQ,EAAWC,GACpD,OAAQqU,YACJ5O,cAAc,IAAK5V,EAAMkQ,EAAWC,GAAwB0R,IAGlE,IAAK,UACH,OAAQ4C,YACJ7O,cAAc,IAAK5V,EAAMkQ,EAAWC,GACpCyF,cAAc,QAAS5V,EAAMkQ,EAAWC,KAE9C,IAAK,MACH,OAAQuU,QACJ9O,cAAc,IAAK5V,EAAMkQ,EAAWC,GACpCyM,MACIhH,cAAc,UAAW5V,EAAMkQ,EAAWC,GAC1C,GACJyF,cAAc,gBAAiB5V,EAAMkQ,EAAWC,KAEtD,IAAK,iBACH,IAAMwU,EACF/O,cAAc,aAAc5V,EAAMkQ,EAAWC,GAC3CyU,EAAWhI,MACbhH,cAAc,WAAY5V,EAAMkQ,EAAWC,GAAsB,GACrE,OAAQ0U,mBACJjP,cAAc,IAAK5V,EAAMkQ,EAAWC,GACpCwU,EAAYC,IAElB,IAAK,iBACGD,EACF/O,cAAc,aAAc5V,EAAMkQ,EAAWC,GADjD,IAEM2U,EAAQlI,MACVhH,cAAc,QAAS5V,EAAMkQ,EAAWC,GAAsB,GAClE,OAAQ4U,mBACJnP,cAAc,IAAK5V,EAAMkQ,EAAWC,GACpCwU,EAAYG,IAElB,IAAK,eACH,IAAME,EACFpP,cAAc,YAAa5V,EAAMkQ,EAAWC,GAC1CgN,EACDvH,cAAc,aAAc5V,EAAMkQ,EAAWC,GACrCiN,cAEb,OAAQ6H,iBACJrP,cAAc,IAAK5V,EAAMkQ,EAAWC,GACpC6U,EAAW7H,IAEjB,QACE,MAAM3W,UAAU,aAAaxG,EAAKuK,kDC5CpCvK,EAAYkQ,EACZC,GACF,OAAQnQ,EAAK0R,UACX,IAAK,aACH,OAAOwT,UAAqBllB,EAAMkQ,EAAWC,GAC/C,IAAK,aACH,OAAOgV,YAAoBnlB,EAAMkQ,EAAWC,GAC9C,IAAK,UACH,OAAOiV,YAAkBplB,EAAMkQ,EAAWC,GAC5C,IAAK,cACH,OAAOkV,YAAsBrlB,EAAMkQ,EAAWC,GAChD,IAAK,WACH,OAAOmV,YAAmBtlB,EAAMkQ,EAAWC,GAC7C,IAAK,UACH,OAAOoV,YAAkBvlB,EAAMkQ,EAAWC,GAC5C,IAAK,aACH,OAAOqV,YAAqBxlB,EAAMkQ,EAAWC,GAC/C,IAAK,QACH,OAAOsV,YAAgBzlB,EAAMkQ,EAAWC,GAC1C,IAAK,QACH,OAAOuV,YAAgB1lB,EAAMkQ,EAAWC,GAC1C,IAAK,UACH,OAAOwV,YAAkB3lB,EAAMkQ,EAAWC,GAC5C,IAAK,WACH,OAAOyV,aAAmB5lB,EAAMkQ,EAAWC,GAC7C,IAAK,gBACH,OAAO0V,aAAwB7lB,EAAMkQ,EAAWC,GAClD,IAAK,YACH,OAAO2V,aAAoB9lB,EAAMkQ,EAAWC,GAC9C,IAAK,aACH,OAAO4V,aAAoB/lB,EAAMkQ,EAAWC,GAC9C,IAAK,WACH,OAAO6V,aAAmBhmB,EAAMkQ,EAAWC,GAC7C,IAAK,iBACH,OAAO8V,aAAyBjmB,EAAMkQ,EAAWC,GACnD,QACE,MAAM3J,UAAU,aAAaxG,EAAKuK,2BC5CxC,gCAME,WACoB2b,EACAC,GADApvB,eAAAmvB,EACAnvB,oBAAAovB,EAPZpvB,kBAAeiiB,GAAI,EAAGoN,UAAW,GAAIC,YAAa,GAClDtvB,eAAoCA,KAAKuvB,aACzCvvB,YAAS,EAMfA,KAAKwvB,4BAsHT,OAnHUC,qBAAR,SAAiBxN,EAAYoN,GAC3B,OAAQpN,KAAIoN,YAAWC,YAAa,IAQtCjrB,sBAAIorB,kCAOJ,WACE,OAAOzvB,KAAK0vB,cARd,SAAmBA,GACb1vB,KAAK0vB,WAAaA,IACpB1vB,KAAK0vB,SAAWA,EAChB1vB,KAAKwvB,8DAWTnrB,sBAAIorB,oCAAJ,WACE,OAAOzvB,KAAK2vB,mBAAmB,oCAOjCtrB,sBAAIorB,qCAAJ,WACE,OAAOzvB,KAAK2vB,oDAGNF,sCAAR,WAEE,IADA,IAAMG,KACGlxB,EAAI,EAAGA,EAAIsB,KAAK0vB,SAASnyB,OAAS,EAAGmB,IAAK,CACjD,IAAMgxB,EAAW1vB,KAAK0vB,SAASnwB,MAAM,EAAGS,KAAK0vB,SAASnyB,OAASmB,GAC/DkxB,EAAMxwB,KAAKY,KAAK6vB,qBAAqBH,IAEvCE,EAAMxwB,KAAK,IACXY,KAAK2vB,mBAAqBC,GAGpBH,iCAAR,SAA6BC,GAC3B,OAAOA,EACHA,EACKhW,IACG,SAAAN,GAAW,OAAgB,IAAfA,EAAQ6I,IAAoC,IAAxB7I,EAAQkW,YACpC,GACGlW,EAAQiW,cAAajW,EAAQkW,cACvC9vB,KAAK,KACV,IAONiwB,uBAAA,SAAWtL,GACLnkB,KAAK0vB,WACP1vB,KAAK8vB,SACL9vB,KAAK0vB,SAAW1vB,KAAK0vB,SAASnwB,QAC9BS,KAAK0vB,SAAStwB,KAAKY,KAAK+vB,SAAS/vB,KAAK8vB,OAAQ3L,IAC9CnkB,KAAK2vB,mBAAmBK,QAAQhwB,KAAK6vB,qBAAqB7vB,KAAK0vB,aAQnED,sBAAA,WACE,KAAIzvB,KAAK0vB,UAAY1vB,KAAK0vB,SAASnyB,OAAS,GAK1C,MAAM,IAAIsC,MAAM,2CAJhBG,KAAK0vB,SAAW1vB,KAAK0vB,SAASnwB,QAC9BS,KAAK0vB,SAASnvB,QAAQ,GACtBP,KAAKia,kBAAkBgW,SAU3BR,0BAAA,WACE,KAAIzvB,KAAK0vB,UAAY1vB,KAAK0vB,SAASnyB,OAAS,GAY1C,MAAM,IAAIsC,MAAM,yDAXhBG,KAAK0vB,SAAW1vB,KAAK0vB,SAASnwB,QAC9BS,KAAK8vB,SACL,IAAM1W,EACF/U,OAAO6rB,UAAWlwB,KAAK0vB,SAAS1vB,KAAK0vB,SAASnyB,OAAS,IAE3D6b,EAAQkW,aAAe,EACvBlW,EAAQ6I,GAAKjiB,KAAK8vB,OAClB9vB,KAAK0vB,SAASnvB,QAAQ,EAAG,EAAG6Y,GAC5BpZ,KAAK2vB,mBAAmBpvB,OACpB,EAAG,EAAGP,KAAK6vB,qBAAqB7vB,KAAK0vB,YAM7CD,sBAAA,SAAUroB,GACR,OAAOpH,KAAKmvB,UAAU/nB,IAGxBqoB,2BAAA,SAAejL,GACbxkB,KAAKovB,eAAe5K,EAAYvC,IAAMuC,GAGxCiL,2BAAA,SAAexN,GACb,OAAOjiB,KAAKovB,eAAenN,kCCjF7B,WAAoBjG,GAAAhc,WAAAgc,EAhDZhc,iBAAmC,IAAImwB,IACvCnwB,mBAIAA,eAAY,IA4ClBA,KAAKid,aAAejB,EAAMiB,aAC1Bjd,KAAKowB,SAAWpU,EAAMnG,QACtB7V,KAAKqwB,UA8YT,OA3bEhsB,sBAAIisB,6BAAJ,WACE,OAAOtwB,KAAKuwB,gBAEd,SAAcpB,GACZ,IAAMqB,EAAYnsB,OAAOC,KAAK6qB,GAAWzV,IACrC,SAAA+D,GAAO,OAAA0R,EAAU1R,GAAK/D,IAAI,SAAA3G,GAAU,OAAAA,EAAOkP,OAC/CjiB,KAAKwwB,aAAehU,OAAOze,SAAUyyB,GACrCxwB,KAAKuwB,WAAapB,mCAGpB9qB,sBAAIisB,0BAAJ,WACE,OAAOtwB,KAAKid,aAAavD,IAAI,SAAAzQ,GAC3B,OACE7B,KAAM6B,EAAK7B,KACX0L,MAAO7J,EAAK7L,OAAc,MAAI6L,EAAK7L,OAAc,MAAEwI,WACrBhG,EAC9BwS,MAAOnJ,EAAK7L,OAAc,MAAI6L,EAAK7L,OAAc,MAAEwI,WACrBhG,sCAKpCyE,sBAAIisB,2BAAJ,WACE,OAAOtwB,KAAKowB,SAAS1W,IAAI,SAAAzQ,GACvB,OACE7B,KAAM6B,EAAK7B,KACX0L,MAAO7J,EAAK7L,OAAc,MAAI6L,EAAK7L,OAAc,MAAEwI,WACrBhG,EAC9BwS,MAAOnJ,EAAK7L,OAAc,MAAI6L,EAAK7L,OAAc,MAAEwI,WACrBhG,sCAKpCyE,sBAAIisB,8BAAJ,WACE,OAAOtwB,KAAKid,aAAavD,IAAI,SAAAzQ,GAAQ,OAAAA,EAAK7B,wCAG5C/C,sBAAIisB,+BAAJ,WACE,OAAOtwB,KAAK6V,QAAQ6D,IAAI,SAAAzQ,GAAQ,OAAAA,EAAK7B,wCASvC/C,sBAAIisB,sCAAJ,WACE,OAAOtwB,KAAKgc,MAAMe,iDAGpB1Y,sBAAIisB,uCAAJ,WACE,OAAOtwB,KAAKgc,MAAMgB,kDAOZsT,oBAAR,SAAgBG,GAGd,IAAIzwB,KAAKgc,MAAMe,kBAAmB/c,KAAKgc,MAAMgB,iBAA7C,CAGA,IAAM0T,KACA9a,EAAS6a,GAAczwB,KAAKgc,MAAMiB,aAElC0T,EADkB/a,EAAO8D,IAAI,SAAAzQ,GAAQ,OAAAA,EAAK7B,OAAMwpB,OACtBpxB,KAAKQ,KAAK6wB,WAG1C,IAAI7wB,KAAK8wB,YAAYrpB,IAAIkpB,GAAzB,CAMA,IAFA,IAAMhpB,EAAYiO,SAAW5V,KAAKgc,MAAMkB,SAClC6T,KACCppB,EAAMpK,OAAS,GAAG,CACvB,IAAM0L,EAAOtB,EAAMqpB,MACnBD,EAAQ9nB,EAAK7B,OAAQ,EACrBspB,EAActxB,KAAK6J,GACnBA,EAAKyU,SAASF,QAAQ,SAACyT,IAChBF,EAAQE,EAAU7pB,OAAS6pB,EAAUzX,WAAW0X,MAAM,SAAA9pB,GAC9C,IAAA2S,4BACP,OAAOgX,EAAQhX,MAEnBpS,EAAMvI,KAAK6xB,KAIjBjxB,KAAK8wB,YAAYrjB,IAAIkjB,EAASD,MAYhCJ,oBAAA,SACI1a,EAAyBub,EACzBtb,GAFJ,wBAC6Bsb,MAE3B,IAAMvB,EAAQvrB,OAAOC,KAAKsR,GAAQgb,OAClC5wB,KAAKoxB,WAAWxb,EAAQub,GACxBnxB,KAAKqxB,uBAAuBzb,EAAQub,GAEpCnxB,KAAKqwB,QAAQT,EAAMlW,IAAI,SAAAtS,GAAQ,OAAAgW,EAAKpB,MAAMmB,MAAM/V,MAChD,IAAMkqB,EAActxB,KAAKuxB,iBAAiB1b,GAC1C7V,KAAKwxB,YACDxxB,KAAK8wB,YAAYrpB,IAAImoB,EAAMpwB,KAAKQ,KAAK6wB,YAAaS,GAEtD,IAAMlC,KAwBN,OAvBehM,SAAK,WAOlB,IANA,IAAMhK,EAAU,IAAIqW,iBAAiBrS,EAAKmT,WAAYnB,GAChDjW,cAAgBiE,EAAK+R,UAAcvZ,GACnC6b,EAAgBrU,EAAKsU,mBAAmBvY,GACxCwY,KAEAC,EAAgBxU,EAAK0T,YAAYrpB,IAAImoB,EAAMpwB,KAAK4d,EAAKyT,YAClDnyB,EAAI,EAAGA,EAAIkzB,EAAcr0B,OAAQmB,IAAK,CAC7C,IAAMuK,EAAO2oB,EAAclzB,GAS3B,GARKya,EAAUlQ,EAAK7B,QAClB+R,EAAUlQ,EAAK7B,MACXuX,aAAU1V,EAAMkQ,EAAWC,GAC/BgE,EAAKyU,uBACD5oB,EAAK7B,KAAM6B,EAAMkQ,EAAWC,EAASqY,EAAeH,EACpDK,IAGFL,EAAYJ,MAAM,SAAA9pB,GAAQ,QAAE+R,EAAU/R,KACxC,MAGJ,OAAOgW,EAAK0U,YAAY3Y,EAAWC,EAASkY,MAKxChB,+BAAR,SAA2BnX,GACzB,IAAM4Y,KAASvV,OAAOze,SAElBsG,OAAOC,KAAK6U,GACPO,IAAI,SAAA+D,GAAO,OAAAtE,EAAUsE,KACrB/D,IAAI,SAAA2I,GAAW,OAAAA,EAAQ3I,IAAI,SAAA3G,GAAU,OAAAA,EAAOkP,QACrD,OAAO,IAAI+P,IAAID,IAETzB,mCAAR,SACIvW,EAAkB9Q,EAAYkQ,EAC9BC,EAA2BqY,EAC3BH,EACAK,GAGoB,YAAlB1oB,EAAK0R,WAA6D,IAAnC2W,EAAYW,QAAQlY,KAIvDZ,EAAUY,GAAUyD,QAAQ,SAAAzK,GACZ,MAAVA,IACF4e,EAAgC5e,EAAOkP,KAClC0P,EAAgC5e,EAAOkP,KAAO,GAC/ChZ,EAAKyU,SAASngB,UAGtB0L,EAAK2M,OAAO4H,QAAQ,SAAAjK,GAGlB,GAAuB,YAAnBA,EAAMoH,SAAwB,CAChC,IAAM0H,EACF6P,6BAA6B3e,EAAMnM,KAAM+R,EAAWC,GACzC,MAAXiJ,GACFA,EAAQ7E,QAAQ,SAAAzK,GACd,GAAIA,IAAW0e,EAAcU,IAAIpf,EAAOkP,IAAK,CAC3C,IAAMmQ,EAAQT,EAAgC5e,EAAOkP,IACvC,IAAVmQ,GACFrf,EAAOuP,iBACAqP,EAAgC5e,EAAOkP,KAC5B,MAATmQ,GAGTT,EAAgC5e,EAAOkP,cAiB/CqO,yBAAN,SAAmB1a,EAAyBC,wIAWtC,OATJ7V,KAAKoxB,WAAWxb,GAAQ,GACxB5V,KAAKqxB,uBAAuBzb,GAAQ,GAC9BwZ,KACAhW,EAAU,IAAIqW,iBAAiBzvB,KAAKuwB,WAAYnB,GAChDkC,EAActxB,KAAKuxB,iBAAiB1b,MAKhC7V,KAAKqyB,uBAAuBzc,EAAQwD,EAASkY,WAkBvD,OAnBMjP,EACFvI,SACEwY,EAAUtyB,KAAK8xB,YAAYzP,EAASjJ,EAASvD,GAG7C0c,EAAYluB,OAAOC,KAAKguB,GAAS5Y,IAAI,SAAA+D,GAAO,OAAA6U,EAAQ7U,GAAKwE,KACzDuQ,EACFnuB,OAAOC,KAAKsR,GAAQ8D,IAAI,SAAA+D,GAAO,OAAA7H,EAAO6H,GAAK/D,IAAI,SAAAnG,GAAS,OAAAA,EAAM0O,OAC5DwQ,KAAcjW,OAAOze,SAAUy0B,GACrCnuB,OAAOC,KAAK+d,GAAS7E,QAAQ,SAAAC,GACP4E,EAAQ5E,GAChBD,QAAQ,SAAAzK,GACdA,IAA4C,IAAlCwf,EAAUN,QAAQlf,EAAOkP,MACF,IAAjCwQ,EAASR,QAAQlf,EAAOkP,MACe,IAAvC7E,EAAKoT,UAAUyB,QAAQlf,EAAOkP,KAChClP,EAAOuP,iBAINgQ,SASKhC,mCAAd,SACI1a,EAAyBwD,EACzBkY,wIACI1B,EAAQvrB,OAAOC,KAAKsR,GACpB8c,EAAa9C,EAAMlW,IAAI,SAAAtS,GAAQ,OAAAgW,EAAKpB,MAAMmB,MAAM/V,KAChDO,EACE+qB,SAAe1yB,KAAKgc,MAAMkB,SAASxD,IAAI,SAAAzQ,GACzC,OAAQA,OAAMymB,SAAUtW,EAAQuZ,kBAEhCxZ,cAAgBnZ,KAAKmvB,UAAcvZ,GACnC+b,KACAF,EAAgBzxB,KAAK0xB,mBAAmBvY,GACxCyZ,6BACCjrB,EAAMpK,OAAS,GACds1B,EAAW7yB,KAAK8yB,aAClBJ,EAAY/qB,EAAOyR,EAASD,EAAWyZ,EAAOnB,EAC9CH,EAAaK,MACXh0B,QAAQo1B,IAAIF,yBAAlB/Y,sBAGF,SAAOX,SAGDmX,yBAAR,SACIoC,EAAoB/qB,EAA2ByR,EAC/CD,EAA4ByZ,EAC5BnB,EAA4BH,EAC5BK,GAEF,IANF,WAKQkB,kBAEJ,IAAMG,EAAOrrB,EAAMqpB,MACnB5X,EAAQuZ,eAAiBK,EAAKtD,SAC9B,IAAI3V,EAAW,GAUf,GANqB,UAAjBiZ,EAAK/pB,KAAKuK,IACVqL,cAAc,aAAcmU,EAAK/pB,KAAMkQ,EAAWC,KACnDW,0CAIoC,IAAnC2Y,EAAWT,QAAQe,EAAK/pB,MAAc,CACxC,IAAMoZ,EAAU1D,aAAUqU,EAAK/pB,KAAMkQ,EAAWC,GAC3CW,IACFA,yCAGH,IAAMkZ,EAAiB7Z,EAAQuZ,eAC3BtQ,aAAmB1kB,QACrBk1B,EAASzzB,KAAKijB,EAAQ6Q,KAAK,SAAAn0B,GAOzB,OANAoa,EAAUY,GAAYhb,EACtBqa,EAAQuZ,eAAiBM,EACzB7V,EAAKyU,uBACD9X,EAAUiZ,EAAK/pB,KAAMkQ,EAAWC,EAASqY,EACzCH,EAAaK,GACjBvU,EAAK+V,kBAAkBH,EAAK/pB,KAAMtB,EAAOyR,EAASD,EAAWyZ,GACtD7zB,MAGToa,EAAUY,GAAYsI,EACtB+Q,EAAKvB,uBACD9X,EAAUiZ,EAAK/pB,KAAMkQ,EAAWC,EAASqY,EACzCH,EAAaK,GACjByB,EAAKD,kBAAkBH,EAAK/pB,KAAMtB,EAAOyR,EAASD,EAAWyZ,SAG/DQ,EAAKD,kBAAkBH,EAAK/pB,KAAMtB,EAAOyR,EAASD,EAAWyZ,WAtC1DjrB,EAAMpK,OAAS,OAyCtB,OAAOs1B,GAGDvC,8BAAR,SACIrnB,EAAYtB,EAA2ByR,EACvCD,EAA4ByZ,GAC9B3pB,EAAKyU,SAASF,QAAQ,SAACyT,GACd,IAAAlX,mCACF6Y,EAAM7Y,KAEY,UAAjBkX,EAAUzd,GACRyd,EAAUzX,WAAWsD,KAAK,SAAA1V,GACxB,QAASmS,UAAUnS,EAAM+R,EAAWC,OAExCwZ,EAAM7Y,IAAY,EAClBpS,EAAMvI,MAAMswB,SAAUtW,EAAQuZ,eAAgB1pB,KAAMgoB,KAGhDA,EAAUzX,WAAW0X,MAAM,SAAA9pB,GACzB,QAASmS,UAAUnS,EAAM+R,EAAWC,OAE5CwZ,EAAM7Y,IAAY,EAClBpS,EAAMvI,MAAMswB,SAAUtW,EAAQuZ,eAAgB1pB,KAAMgoB,SAMpDX,6BAAR,SAAyBza,GAIvB,OAHIA,GAAaA,aAAmBxY,QAClCwY,GAAWA,IAELA,GAAW7V,KAAKgc,MAAMnG,QAAQ6D,IAAI,SAAAzQ,GAAQ,OAAAA,EAAK7B,QAGjDkpB,wBAAR,SACInX,EAA4BC,EAC5BvD,GAEF,OADyB7V,KAAKuxB,iBAAiB1b,GACvB6G,OAAuB,SAAChD,EAAKtS,GAEnD,OADAsS,EAAItS,GAAQmS,UAAUnS,EAAM+R,EAAWC,GAChCM,QAMX4W,oBAAA,WAAA,WACEjsB,OAAOC,KAAKtE,KAAKmvB,WACZ3R,QACG,SAAAC,GAAO,OAAAL,EAAK+R,UAAU1R,GAAKD,QAAQ,SAAAzK,GAAU,OAAAA,EAAOuP,eAGtDgO,mCAAR,SACI1a,EAAyBub,gBAAAA,MAC3BnxB,KAAKid,aAAaO,QAAQ,SAAAvU,GACxB,IAAMoqB,EAAezd,EAAO3M,EAAK7B,MAGjC,GAAK+pB,GAAqBkC,EAA1B,CAIA,IAAM9f,EAAQ8f,EAAa,GAC3B,GAAIpqB,EAAK7L,OAAc,OAAK6L,EAAK7L,OAAc,MAAEwI,MAAO,CACtD,IAAM0tB,EAAQrqB,EAAK7L,OAAc,MAAEwI,MAC7B2tB,EAAQD,EAAM/1B,SAAWgW,EAAMT,MAAMvV,QACvCgW,EAAMT,MAAMoe,MACR,SAAC3f,EAAK9T,GAAU,OAAkB,IAAlB61B,EAAM71B,IAAiB61B,EAAM71B,KAAW8T,IAChEzL,SAAK6d,OACD4P,EACA,sBACItqB,EAAK7B,oDACLksB,iBAAoB/f,EAAMT,WAEhC7J,EAAK7L,OAAc,OAAK6L,EAAK7L,OAAc,MAAEwI,OAC/CE,SAAK6d,OACDpQ,EAAMnB,QAAUnJ,EAAK7L,OAAc,MAAEwI,MACrC,sBACIqD,EAAK7B,mDACL6B,EAAK7L,OAAc,MAAEwI,mBAAkB2N,EAAMnB,WAKnDke,uBAAR,SAAmB1a,EAAyBub,GAA5C,wBAA4CA,MAC1C,IAAMqC,EAAYnvB,OAAOC,KAAKsR,GACxB6d,KACAC,KAEN1zB,KAAK0yB,WAAWlV,QAAQ,SAAApW,IACW,IAA7BosB,EAAUvB,QAAQ7qB,IAAcqsB,EAAQr0B,KAAKgI,KAGnDosB,EAAUhW,QAAQ,SAAApW,IACuB,IAAnCgW,EAAKsV,WAAWT,QAAQ7qB,IAAcssB,EAAMt0B,KAAKgI,KAGvD,IAAMusB,EAAaD,EAAME,OAAO,SAAAxsB,GAAQ,OAACgW,EAAKpB,MAAMmB,MAAM/V,KAE1D,GAAIqsB,EAAQl2B,OAAS,GAAK4zB,EACxB,MAAM,IAAItxB,MACN,0DACI2zB,2CAAkDC,QAG5D,GAAIC,EAAMn2B,OAAS,GAAK4zB,EACtB,MAAM,IAAItxB,MACN,8DACiB6zB,iDACb1zB,KAAK0yB,iBAGf,GAAIiB,EAAWp2B,OAAS,EACtB,MAAM,IAAIsC,MACN,uDACU8zB,iCAIVrD,wBAAR,SAAoBsB,EAAuB/b,GACzC,IAAMge,EAAoBjC,EAAclY,IAAI,SAAAzQ,GAAQ,OAAAA,EAAK7B,OACnDssB,KAMN,GALA7d,EAAQ2H,QAAQ,SAAApW,GACP,IAAA2S,uBACsC,IAAzC8Z,EAAkB5B,QAAQlY,IAAkB2Z,EAAMt0B,KAAK2a,KAGzD2Z,EAAMn2B,OAAS,EACjB,MAAM,IAAIsC,MACN,8DACI6zB,cCvcDI,mBAAqB,oBACrBC,mBAAqB,wBACrBC,sBAAwB,+CA8CnC,WACYC,EAA0BC,EAC1BC,EAAqCC,EACrCC,GAFAr0B,cAAAi0B,EAA0Bj0B,uBAAAk0B,EAC1Bl0B,mBAAAm0B,EAAqCn0B,kBAAAo0B,EACrCp0B,gBAAAq0B,EAxCJr0B,aAAU,MAyOpB,OAtOEqE,sBAAIiwB,gCAAJ,WACE,OAAOt0B,KAAKmV,yCAGd9Q,sBAAIiwB,8BAAJ,WACE,OAAOt0B,KAAKu0B,SAAS7B,4CAGvBruB,sBAAIiwB,+BAAJ,WACE,OAAOt0B,KAAKu0B,SAASC,6CAGvBnwB,sBAAIiwB,0BAAJ,WACE,OAAOt0B,KAAKu0B,SAAS3e,wCAGvBvR,sBAAIiwB,2BAAJ,WACE,OAAOt0B,KAAKu0B,SAAS1e,yCAGvBxR,sBAAIiwB,2BAAJ,WACE,OAAOt0B,KAAKu0B,SAASpF,2CAkBfmF,0BAAR,WACE,IAAMG,GAAQz0B,KAAKi0B,SAAUj0B,KAAKk0B,mBAClC,GAAIl0B,KAAKm0B,eAAiBn0B,KAAKo0B,aAC7Bp0B,KAAK00B,QAAUC,OAAOC,mBAClBH,EAAMz0B,KAAKm0B,cAAen0B,KAAKo0B,aAAc,KAAMp0B,KAAKq0B,gBACvD,CACL,IAAMQ,EAAWF,OAAOG,gBAAgBL,EAAMz0B,KAAKq0B,YACnD,GAAwB,IAApBQ,EAASt3B,OAGXs3B,EAASz1B,KAAKu1B,OAAOC,mBACjBH,EAAMz0B,KAAKm0B,cAAen0B,KAAKo0B,aAAc,KAC7Cp0B,KAAKq0B,kBACJ,GAAIQ,EAASt3B,OAAS,EAC3B,MAAM,IAAIsC,MACN,wBAAwBg1B,EAASt3B,oCACxBk3B,QAEfz0B,KAAK00B,QAAUG,EAAS,KAQtBP,iBAAN,+HAEE,GADAt0B,KAAK+0B,gBACoB,MAArB/0B,KAAK00B,QAAQM,KACf,MAAM,IAAIn1B,MACN,iHAGY,SAAMG,KAAK00B,QAAQM,eAUrC,OAVMC,EAAYnb,SACZkC,EAAQlL,eAAWgD,SAASrU,OAC9B,IAAIqB,WAAWm0B,EAAUC,gBAE7Bl1B,KAAKmV,QAAa6G,EAAMhT,SAAS4K,aAAYoI,EAAMhT,SAAS6K,YACtDsb,EACFwF,OAAOQ,cAAcF,EAAUG,WAAYH,EAAUI,aACzDr1B,KAAKu0B,SACD,IAAIjE,cAAc1T,gBAAgB0Y,SAASC,eAAevZ,IAC9Dhc,KAAKu0B,SAASpF,UAAYnvB,KAAKw1B,6BAA6BrG,OACrD,SAuCTmF,oBAAA,SACI1e,EACA6f,GAEF,OAAOz1B,KAAK01B,SAAS9f,GAAQ,EAAM5V,KAAKw0B,cAGlCF,+BAAR,SAA2B1e,GACzB,IAAM+f,EAAa/f,aAAkBggB,YAAchgB,GAAUA,EAC7D,GAAI+f,EAAWp4B,SAAWyC,KAAK0yB,WAAWn1B,OACxC,MAAM,IAAIsC,MACN,oDACwBG,KAAK0yB,WAAWn1B,yCACrBo4B,EAAWp4B,0BAEpC,OAAOyC,KAAK0yB,WAAWhW,OAAO,SAAChD,EAAKW,EAAW3b,GAE7C,OADAgb,EAAIW,GAAasb,EAAWj3B,GACrBgb,QAiBX4a,oBAAA,SACI1e,EACAC,GACF,OAAO7V,KAAK01B,SAAS9f,GAAQ,EAAOC,IAG9Bye,qBAAR,SACI1e,EACAub,EAAyBtb,GAM3B,gBANEsb,MAEFtb,EAAUA,GAAW7V,KAAKw0B,aACtB5e,aAAkBggB,YAAcv4B,MAAMsM,QAAQiM,MAChDA,EAAS5V,KAAK61B,mBAAmBjgB,IAE/B5V,KAAKu0B,SAASuB,oBAAsB91B,KAAKu0B,SAASwB,oBACpD,MAAM,IAAIl2B,MACN,wFAGN,IAAMipB,EAAS9oB,KAAKu0B,SAASyB,QACzBh2B,KAAKw1B,6BAA6B5f,GAASub,EAAkBtb,GAC3DvR,EAAOD,OAAOC,KAAKwkB,GACzB,OAAQzrB,MAAMsM,QAAQkM,IAAYA,EAAQtY,OAAS,EAC/CsY,EAAQ6D,IAAI,SAAAzQ,GAAQ,OAAA6f,EAAO7f,KAC3B6f,EAAOxkB,EAAK,KAgBZgwB,yBAAN,SACI1e,EACAC,qHACF,IAAM7V,KAAKu0B,SAASuB,qBACd91B,KAAKu0B,SAASwB,oBAClB,MAAM,IAAIl2B,MACN,mHAQS,OALfgW,EAAUA,GAAW7V,KAAKw0B,aACtB5e,aAAkBggB,YAAcv4B,MAAMsM,QAAQiM,MAChDA,EAAS5V,KAAK61B,mBAAmBjgB,OAGd5V,KAAKu0B,SAAS0B,aAC/Bj2B,KAAKw1B,6BAA6B5f,GAASC,WAE/C,OAHMiT,EAAShP,SAETxV,EAAOD,OAAOC,KAAKwkB,MAClBzrB,MAAMsM,QAAQkM,IAAYA,EAAQtY,OAAS,EAC9CsY,EAAQ6D,IAAI,SAAAzQ,GAAQ,OAAA6f,EAAO7f,KAC3B6f,EAAOxkB,EAAK,WAGVgwB,yCAAR,SAAqC5a,GAEnC,OAAOrV,OAAOC,KAAKoV,GAAKgD,OAAO,SAACwZ,EAAyBzY,GAEvD,OADAyY,EAAOzY,IAAQ/D,EAAI+D,IACZyY,QAMX5B,oBAAA,WACEt0B,KAAKu0B,SAASjS,gBC1QD6T,yCD+QblC,EAAkBmC,EAA4BjC,EAC9CE,mHAGF,UAFMgC,EAAQ,IAAI/B,YACdL,EAAUmC,EAAoBjC,EAAe,KAAME,IAC3CW,eACZ,OADAlb,YACOuc,iCA0BLC,EAAwBnC,EACxBE,sFAIF,OAHKiC,EAAeC,SAAS,OAC3BD,GAAkC,QAE7BE,gBACH,GAAGF,EAAiBvC,mBAAqBD,mBACzC,GAAGwC,EAAiBtC,sBAAwBF,mBAC5CK,EAAeE,SCtTrB,SAAiB8B,IAWf,SAAY9kB,GACVA,+BACAA,2BACAA,6BACAA,2BACAA,2BACAA,2BACAA,yBACAA,6BACAA,mCACAA,2BACAA,0BACAA,4BACAA,8BACAA,8BACAA,kCACAA,qCACAA,uCACAA,qCACAA,qCACAA,qCACAA,mCACAA,uCACAA,6CACAA,qCACAA,mCACAA,qCACAA,uCACAA,uCACAA,2CA7BF,CAAY8kB,aAAAA,gBAyRZ,SAAiBvhB,IAEf,SAAYQ,GAAyBA,uBAAYA,eAAQA,eAAzD,CAAYR,4BAAAA,+BAFd,CAAiBuhB,aAAAA,gBApSnB,CAAiBA,kBAAAA,qBCqCjB,IAAM/a,oBAAoB,SAAU,QAAS,QAAS,OAAQ,iBACxDC,qBACD,sBAAuB,sBAAuB,sCAajD,aACE,IAAMC,GACJC,WAAYC,UAAWC,QAASC,YAAaC,SAAUC,QACvDC,WAAYC,QAASC,MAAOC,MAAOC,SAAUC,cAAeC,UAC5DC,UAAWC,SAAUC,gBAEjBC,KAA6BC,OAAOze,SAAUud,EAAI5B,IAAI,SAAAlG,GAAM,OAAAA,EAAGjI,QAErEvL,KAAKyc,UAAYF,EAAYG,OACzB,SAAChD,EAAKiD,GAEJ,OADAjD,EAAIiD,EAAOlC,UAAYkC,EAChBjD,OA0PjB,OA1QErV,sBAAkBuY,kBAAlB,WACE,OAAO5c,KAAK6c,YAAc7c,KAAK6c,UAAY,IAAI7c,uCAoBzC4c,0BAAR,SAAsB3T,GACpB,OAAOmS,mBAAiB0B,KAAK,SAAAtJ,GAAM,OAAAA,IAAOvK,EAAKuK,MAGzCoJ,2BAAR,SAAuB3T,GACrB,OAAOoS,oBAAkByB,KAAK,SAAAtJ,GAAM,OAAAA,IAAOvK,EAAKuK,MAIlDoJ,2BAAA,SAAeZ,GAAf,WAEMe,GAAkB,EAClBC,GAAmB,EACjBC,KACAC,KACAC,EALUnB,EAAM/S,KAKAyT,OAA8B,SAAChD,EAAKzQ,GAMxD,OALAyQ,EAAIzQ,EAAK7B,MAAQgW,EAAKC,QAAQpU,GAC1BmU,EAAKE,cAAcrU,KAAO8T,GAAkB,GAC5CK,EAAKG,eAAetU,KAAO+T,GAAmB,GAClC,gBAAZ/T,EAAKuK,IAAsByJ,EAAa7d,KAAKsa,EAAIzQ,EAAK7B,OAC1C,UAAZ6B,EAAKuK,IAAgB0J,EAAQ9d,KAAKsa,EAAIzQ,EAAK7B,OACxCsS,OAGH9D,KACAC,KAgBN,OAfAxR,OAAOC,KAAK6Y,GAAOK,QAAQ,SAAAC,GACzB,IAAMxU,EAAOkU,EAAMM,GACnBxU,EAAKuQ,WAAWgE,QAAQ,SAAApW,GACf,IAAA2S,4BACP9Q,EAAK2M,OAAOxW,KAAK+d,EAAMpD,IACvBoD,EAAMpD,GAAU2D,SAASte,KAAK6J,KAEL,IAAvBA,EAAK2M,OAAOrY,QAAcqY,EAAOxW,KAAK6J,KAG5C5E,OAAOC,KAAK6Y,GAAOK,QAAQ,SAAAC,GACzB,IAAMxU,EAAOkU,EAAMM,GACU,IAAzBxU,EAAKyU,SAASngB,QAAcsY,EAAQzW,KAAK6J,MAI7CkU,QACAvH,SACAC,UACAqH,UACAD,eACAF,kBACAC,qBAIIJ,oBAAR,SAAgB3T,GAAhB,WACQ0T,EAAS3c,KAAKyc,UAAUxT,EAAKuK,IACnC,QAAe5T,IAAX+c,EACF,MAAM,IAAI9c,MAAM,mCAAqCoJ,EAAKuK,IAE5D,IAAMmK,GACJvW,KAAM6B,EAAK7B,KACXoM,GAAImJ,EAAOjC,SACXC,SAAUgC,EAAOhC,SACjBnB,YACKvQ,EAAKsK,WACDmG,IAAI,SAAAnG,GAAS,OAAAA,EAAMqK,WAAW,KAAOrK,EAAMsK,OAAO,GAAKtK,IAChEqC,UACA8H,YACAtgB,WAgFF,OA7EMuf,EAAOvf,SACXugB,EAAQvgB,OAASuf,EAAOvf,OAAOsf,OACyB,SAAChD,EAAKL,GAC5D,IAAMC,EAAaD,EAAMuB,aACnBnB,EAAmBJ,EAAM2B,mBACzBnI,EAAOwG,EAAMxG,KACfjN,OAAQhG,EACZ,QAAmBA,IAAf0Z,EACF,OAAQD,EAAMxG,MACZ,IAAK,cAIWjT,KAHdgG,EAAQwX,EAAKU,eACT7U,EAAKmK,KAAMiG,EAAMyB,YAAazB,EAAMlC,gBAEXkC,EAAM8B,wBACjCvV,EAAQwX,EAAKU,eACT7U,EAAKmK,KAAMiG,EAAM8B,sBACjB9B,EAAMlC,eAEZ,MACF,IAAK,cAIWvX,KAHdgG,EAAQwX,EAAKW,eACT9U,EAAKmK,KAAMiG,EAAMyB,YAChBzB,EAAMlC,cAAgB,KACEkC,EAAM8B,wBACjCvV,EAAQwX,EAAKW,eACT9U,EAAKmK,KAAMiG,EAAM8B,sBACjB9B,EAAMlC,eAEZ,MACF,IAAK,gBAGWvX,KAFdgG,EAAQwX,EAAKY,qBACT/U,EAAKmK,KAAMiG,EAAMyB,YAAazB,EAAMlC,gBACXkC,EAAM8B,wBACjCvV,EAAQwX,EAAKY,qBACT/U,EAAKmK,KAAMiG,EAAM8B,sBACjB9B,EAAMlC,eAEZ,MACF,IAAK,YAGWvX,KAFdgG,EAAQwX,EAAKa,aACThV,EAAKmK,KAAMiG,EAAMyB,YAAazB,EAAMlC,gBACXkC,EAAM8B,wBACjCvV,EAAQwX,EAAKa,aACThV,EAAKmK,KAAMiG,EAAM8B,sBACjB9B,EAAMlC,eAEZ,MACF,IAAK,aAGWvX,KAFdgG,EAAQwX,EAAKc,oBACTjV,EAAKmK,KAAMiG,EAAMyB,YAAazB,EAAMlC,gBACXkC,EAAM8B,wBACjCvV,EAAQwX,EAAKc,oBACTjV,EAAKmK,KAAMiG,EAAM8B,sBACjB9B,EAAMlC,eAEZ,MACF,IAAK,aAGWvX,KAFdgG,EAAQwX,EAAKe,cACTlV,EAAKmK,KAAMiG,EAAMyB,YAAazB,EAAMlC,gBACXkC,EAAM8B,wBACjCvV,EAAQwX,EAAKe,cACTlV,EAAKmK,KAAMiG,EAAM8B,sBACjB9B,EAAMlC,eAEZ,MACF,IAAK,SACL,IAAK,UACH,MACF,QACE,MAAM,IAAItX,MACN,2BAA2BwZ,EAAMxG,iBAAgB5J,EAAKuK,IAIhE,OADAkG,EAAIL,EAAMwB,cAAgBjV,QAAO0T,aAAYzG,OAAM4G,oBAC5CC,QAGJiE,GAGDf,yBAAR,SAAqB6Z,GACnB,GAAoB,oBAATC,KACT,OAAOA,KAAKD,GACP,GAAsB,oBAAX7sB,OAChB,OAAO,IAAIA,OAAO6sB,EAAM,UAAU3uB,WAElC,MAAM,IAAIjI,MACN,qFAKA+c,2BAAR,SACIwB,EAAoDhX,EACpDiX,EAAaC,gBAAAA,MACf,IAAMjF,EAAQ+E,EAAMhX,GACpB,QAAcxH,IAAVyZ,EAAqB,CACvB,IAAMzT,EAAQvI,MAAMsM,QAAQ0P,EAAM1G,GAC9BtT,OAAOC,aAAavB,MAAM,KAAMsb,EAAM1G,GACtC3S,KAAK22B,aAAatd,EAAM1G,GAC5B,OAAO2L,EAAW1Y,EAAQA,EAAMgF,cAElC,OAAOyT,GAGDzB,yBAAR,SACIwB,EAAoDhX,EACpDiX,GACF,IAAMhF,EAAQ+E,EAAMhX,GACpB,OAAOiS,EAAQA,EAAMla,EAAIkf,GAGnBzB,2BAAR,SACIwB,EAAoDhX,EACpDiX,GACF,IAAMhF,EAAQ+E,EAAMhX,OACdxB,EAAQyT,EAAS,EAAIA,EAAS,EAAKA,EAAS,EAAIA,EAAS,EAAIgF,EACnE,MAAyB,iBAAVzY,EACXA,EACAK,SAASL,EAAiB,KAExBgX,0BAAR,SACIwB,EAAoDhX,EACpDiX,GACF,IAAMhF,EAAQ+E,EAAMhX,GACpB,GAAIiS,GAASA,EAAMxG,KAAM,CAEvB,IAAIA,EAAYwG,EAAMxG,KAItB,OAH4B,iBAAhBwG,EAAU,OACpBxG,EAAOsjB,gBAAgB9kB,SAASgI,EAAMxG,OAEhCA,GACN,KAAKsjB,gBAAgB9kB,SAASkN,SAC5B,MAAO,UACT,KAAK4X,gBAAgB9kB,SAASmN,SAC5B,MAAO,QACT,KAAK2X,gBAAgB9kB,SAASoN,QAC5B,MAAO,OACT,QACE,OAAOJ,GAGb,OAAOA,GAEDzB,gCAAR,SACIwB,EAAoDhX,EACpDiX,GACF,IAAMhF,EAAQ+E,EAAMhX,GACpB,GAAIiS,GAASA,EAAMvG,MAAO,CACxB,GAAIuG,EAAMvG,MAAMtB,YACd,OAEF,GAAuB,MAAnB6H,EAAMvG,MAAMvB,IACd,OAAO8H,EAAMvG,MAAMvB,IAAImI,IACnB,SAAAnI,GAAO,MAAqB,iBAAbA,EAAIvM,KACfuM,EAAIvM,KACJiB,SAASsL,EAAIvM,KAAgB,MAGzC,OAAOqZ,GAGDzB,iCAAR,SACIwB,EAAoDhX,EACpDiX,GACF,IAAMhF,EAAQ+E,EAAMhX,GACpB,OAAIiS,GACOA,EAAM3G,KAAKE,GAAKyG,EAAM3G,KAAKE,EAAErV,OAAS8b,EAAM3G,KAAKE,EACXyG,EAAM3G,KAAKhU,GAC9Cgb,IACG,SAAAgF,GAAK,MAAc,iBAANA,EACTA,EACAzY,SAASyY,EAAa,MAEpCL,iCCjPT,WACY4V,EAA0BE,EAC1BC,EAA+BC,GAD/Br0B,cAAAi0B,EAA0Bj0B,mBAAAm0B,EAC1Bn0B,kBAAAo0B,EAA+Bp0B,gBAAAq0B,EAvCnCr0B,aAAU,MAuOpB,OApOEqE,sBAAIiwB,gCAAJ,WACE,OAAOt0B,KAAKmV,yCAGd9Q,sBAAIiwB,8BAAJ,WACE,OAAOt0B,KAAKu0B,SAAS7B,4CAGvBruB,sBAAIiwB,+BAAJ,WACE,OAAOt0B,KAAKu0B,SAASC,6CAGvBnwB,sBAAIiwB,0BAAJ,WACE,OAAOt0B,KAAKu0B,SAAS3e,wCAGvBvR,sBAAIiwB,2BAAJ,WACE,OAAOt0B,KAAKu0B,SAAS1e,yCAGvBxR,sBAAIiwB,2BAAJ,WACE,OAAOt0B,KAAKu0B,SAASpF,2CAiBfmF,0BAAR,WACE,IAAMG,EAAOz0B,KAAKi0B,SAClB,GAAIj0B,KAAKm0B,eAAiBn0B,KAAKo0B,aAC7Bp0B,KAAK00B,QAAUC,OAAOC,mBAClBH,EAAMz0B,KAAKm0B,cAAen0B,KAAKo0B,aAAc,KAAMp0B,KAAKq0B,gBACvD,CACL,IAAMQ,EAAWF,OAAOG,gBAAgBL,EAAMz0B,KAAKq0B,YACnD,GAAwB,IAApBQ,EAASt3B,OAGXs3B,EAASz1B,KAAKu1B,OAAOC,mBACjBH,EAAMz0B,KAAKm0B,cAAen0B,KAAKo0B,aAAc,KAC7Cp0B,KAAKq0B,kBACJ,GAAIQ,EAASt3B,OAAS,EAC3B,MAAM,IAAIsC,MACN,wBAAwBg1B,EAASt3B,oCACxBk3B,QAEfz0B,KAAK00B,QAAUG,EAAS,KAQtBP,iBAAN,+HAEE,GADAt0B,KAAK+0B,gBACoB,MAArB/0B,KAAK00B,QAAQM,KACf,MAAM,IAAIn1B,MACN,iHAGY,SAAMG,KAAK00B,QAAQM,eASrC,OATMC,EAAYnb,SACZkC,EAAQiZ,EAAUC,cAExBl1B,KAAKmV,QAAa6G,EAAMhT,SAAS4K,aAAYoI,EAAMhT,SAAS6K,YACtDsb,EACFwF,OAAOQ,cAAcF,EAAUG,WAAYH,EAAUI,aACzDr1B,KAAKu0B,SACD,IAAIjE,cAAc1T,kBAAgB0Y,SAASC,eAAevZ,IAC9Dhc,KAAKu0B,SAASpF,UAAYnvB,KAAKw1B,6BAA6BrG,OACrD,SAuCTmF,oBAAA,SACI1e,EACA6f,GAEF,OAAOz1B,KAAK01B,SAAS9f,GAAQ,EAAM5V,KAAKw0B,cAGlCF,+BAAR,SAA2B1e,GACzB,IAAM+f,EAAa/f,aAAkBggB,YAAchgB,GAAUA,EAC7D,GAAI+f,EAAWp4B,SAAWyC,KAAK0yB,WAAWn1B,OACxC,MAAM,IAAIsC,MACN,oDACwBG,KAAK0yB,WAAWn1B,yCACrBo4B,EAAWp4B,0BAEpC,OAAOyC,KAAK0yB,WAAWhW,OAAO,SAAChD,EAAKW,EAAW3b,GAE7C,OADAgb,EAAIW,GAAasb,EAAWj3B,GACrBgb,QAiBX4a,oBAAA,SACI1e,EACAC,GACF,OAAO7V,KAAK01B,SAAS9f,GAAQ,EAAOC,IAG9Bye,qBAAR,SACI1e,EACAub,EAAyBtb,GAM3B,gBANEsb,MAEFtb,EAAUA,GAAW7V,KAAKw0B,aACtB5e,aAAkBggB,YAAcv4B,MAAMsM,QAAQiM,MAChDA,EAAS5V,KAAK61B,mBAAmBjgB,IAE/B5V,KAAKu0B,SAASuB,oBAAsB91B,KAAKu0B,SAASwB,oBACpD,MAAM,IAAIl2B,MACN,wFAGN,IAAMipB,EAAS9oB,KAAKu0B,SAASyB,QACzBh2B,KAAKw1B,6BAA6B5f,GAASub,EAAkBtb,GAC3DvR,EAAOD,OAAOC,KAAKwkB,GACzB,OAAQzrB,MAAMsM,QAAQkM,IAAYA,EAAQtY,OAAS,EAC/CsY,EAAQ6D,IAAI,SAAAzQ,GAAQ,OAAA6f,EAAO7f,KAC3B6f,EAAOxkB,EAAK,KAgBZgwB,yBAAN,SACI1e,EACAC,qHACF,IAAM7V,KAAKu0B,SAASuB,qBACd91B,KAAKu0B,SAASwB,oBAClB,MAAM,IAAIl2B,MACN,mHAQS,OALfgW,EAAUA,GAAW7V,KAAKw0B,aACtB5e,aAAkBggB,YAAcv4B,MAAMsM,QAAQiM,MAChDA,EAAS5V,KAAK61B,mBAAmBjgB,OAGd5V,KAAKu0B,SAAS0B,aAC/Bj2B,KAAKw1B,6BAA6B5f,GAASC,WAE/C,OAHMiT,EAAShP,SAETxV,EAAOD,OAAOC,KAAKwkB,MAClBzrB,MAAMsM,QAAQkM,IAAYA,EAAQtY,OAAS,EAC9CsY,EAAQ6D,IAAI,SAAAzQ,GAAQ,OAAA6f,EAAO7f,KAC3B6f,EAAOxkB,EAAK,WAGVgwB,yCAAR,SAAqC5a,GAEnC,OAAOrV,OAAOC,KAAKoV,GAAKgD,OAAO,SAACwZ,EAAyBzY,GAEvD,OADAyY,EAAOzY,IAAQ/D,EAAI+D,IACZyY,QAMX5B,oBAAA,WACEt0B,KAAKu0B,SAASjS,2CA6Bd2R,EAAkBE,EAClBE,mHAEF,UADMgC,EAAQ,IAAI/B,cAAYL,EAAUE,EAAe,KAAME,IACjDW,eACZ,OADAlb,YACOuc,YCrSHlhB,QAAU,mCCsDZ8e,EAAkBmC,EAA6BjC,EAC/CE,GAKF,OAJAuC,oBACI,kHAGA3C,GAAYA,EAASsC,SAAS,SACxBM,kBAAoB5C,EAAUE,EAAeE,IAOvC,MAAZJ,GAA0C,MAAtBmC,IACtBA,EAAqBU,sBAAsB7C,IAEtC8C,gBACH9C,EAAUmC,EAAoBjC,EAAeE,IAGnD,+BAA+BJ,GAC7B,IAAImC,EACY,MAAZnC,IAEFmC,EADanC,EAASpW,OAAO,EAAGoW,EAAS3Z,YAAY,MACzB,IAAM0Z,uBAEpC,OAAOoC,0BAkCLnC,EAAkB+C,GAKpB,gBALoBA,MACL,MAAXA,IACFA,MAGEA,EAAQC,UACV,OAAOC,gBAAgBjD,EAAU+C,EAAQG,YAAaH,EAAQ3C,YAEhE,IAAI+B,OAA6Bx2B,EAEjC,OAAIq0B,GAAYA,EAASsC,SAAS,SACxBM,kBACI5C,EAAU+C,EAAQG,YAAaH,EAAQ3C,aAOrC,MAAZJ,GAA0C,MAAtBmC,IACtBA,EAAqBU,sBAAsB7C,IAEtC8C,gBACH9C,EAAUmC,EAAoBY,EAAQG,YAAaH,EAAQ3C"}